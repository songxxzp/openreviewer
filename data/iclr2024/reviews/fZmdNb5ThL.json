[
    {
        "id": "6S30jSC7vE",
        "forum": "fZmdNb5ThL",
        "replyto": "fZmdNb5ThL",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_cMEX"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_cMEX"
        ],
        "content": {
            "summary": {
                "value": "This paper introduces \"ShiftAddAug,\" a novel approach for training multiplication-free neural networks aiming to reduce energy costs. ShiftAddAug leverages costly multiplication operations during the training phase to enhance the activation of multiplication-free operations. These multiplication operations are subsequently deactivated during inference to avoid additional computational expenses. Additionally, the authors have developed a hardware-aware neural architecture search strategy rooted in a hybrid computing augmentation search space. This strategy dynamically reduces parts of the models to comply with specific hardware constraints throughout the training process. The results obtained from benchmarks such as CIFAR10/100 and ImageNet-1k, among others, demonstrate robust performance and significant gains in energy efficiency."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "4 excellent"
            },
            "strengths": {
                "value": "I appreciate the logical structure and clarity of this paper. The authors present their motivations compellingly, and the proposed ShiftAddAug method is both intuitive and seemingly effective, as evidenced by the strong results reported."
            },
            "weaknesses": {
                "value": "I have several questions that I hope the authors can clarify and expand upon to better understand the nuances of ShiftAddAug:\n\n1. Could you elucidate how ShiftAddAug augments a baseline model? Specifically, in the context of convolutions, are additional channels created for multiplication-free (MF) operations on top of the existing ones? Or is there a division of existing channels between multiplicative and MF operations?\n\n2. Regarding the dedicated input channels for shift/add operations, are they fixed throughout the training process? Figure 1 suggests the presence of a \"gate\" that directs input features, but this mechanism isn\u2019t elaborated upon in the paper.\n\n3. While the concept of heterogeneous weight sharing is intriguing, its practical application during training remains unclear. Are multiplication (M) weights dynamically mapped to MF weights, implying that operations aren't tied to specific input channels? If so, what determines the allocation of operations to particular channels?\n\n4. After the neural architecture search (NAS) process, is further retraining of the resultant models necessary to achieve optimal performance? Does the performance reported in Table 5 directly stem from the NAS search, or is it the result of additional training?\n\n5. Could the authors clarify the purpose of the last row in Table 3?\n\n6. Regarding the behavior during inference, it's clear that multiplicative operations can be disabled, but can they also be entirely removed? The paper doesn't explicitly guarantee alignment between input/output channels among MF channels. Given this, are there concerns about potential computational waste due to this misalignment?"
            },
            "questions": {
                "value": "see weaknesses"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2032/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698617552754,
        "cdate": 1698617552754,
        "tmdate": 1699636134995,
        "mdate": 1699636134995,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "SYNJBqnP1l",
        "forum": "fZmdNb5ThL",
        "replyto": "fZmdNb5ThL",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_J3s9"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_J3s9"
        ],
        "content": {
            "summary": {
                "value": "This work targets better accuracy vs. efficiency trade-offs for multiplication-free tiny neural networks. Specifically, it uses multiplication-based Conv in training to augment Shift-based Conv and Add-based Conv optimization for higher accuracy in the Shift/Add-based networks. The experiments on image classification tasks show the proposed ShiftAddAug framework can have higher accuracy (e.g., +4.05% on CIFAR-100) while reducing energy consumption (e.g., 68.9% reduction) as compared to multiplication-based networks."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "1. Motivation: Current tiny DNNs are primarily designed using multiplication-based operators, often overlooking the more energy-efficient shift and add operators. Exploring shift/add-based tiny DNNs is, therefore, a worthwhile endeavor. \n\n2. Comprehensive Review of Related Works and Preliminaries: The section on related works thoroughly covers existing multiplication-free networks. Additionally, the preliminaries provide a clear explanation of the shift and add operators utilized in this work. \n\n3. Clear and Understandable Figures: The figures presented are clear, making the entire paper straightforward and easy to follow."
            },
            "weaknesses": {
                "value": "1. Quality of the Draft: It appears the authors may not have thoroughly proofread their draft before submission. In Table 3, the performance of the proposed ShiftAddAug is denoted as \"xx\". This is a crucial detail for comprehending the efficacy of the suggested framework.\n\n2. Ambiguity in the Contribution of the Proposed NAS: From the details provided in Sec. 3.4, the introduced NAS, which is highlighted as the third contribution, seems to essentially apply tinyNAS (Lin et al., 2020) over the ShiftAddAug. The search space is presented in Table 2 without clarifying its design rationale. Consequently, the true value-add of the proposed NAS remains ambiguous.\n\n3. Unclear Contribution of the Weight Sharing Strategy: The weight-tearing issue that the proposed weight sharing strategy addresses is previously identified in ShiftAddNAS (You et al., 2022). The weight mapping strategy delineated in Eq. 5 is similar to the approach in ShiftAddNAS, which employed a learnable transformation kernel, T (\u00b7), to transition shared weights from a Gaussian to a Laplacian distribution. However, there are no theoretical justifications or empirical findings illustrating why this strategy outperforms the one in ShiftAddNAS.\n\n4. Concerns on the Accuracy of the Efficiency Metric: As mentioned in Sec. 4.1, the efficiency metric chosen for this study is the energy and latency reported by an Eyeriss-like hardware accelerator simulator. However, the referenced studies (Chen et al., 2017; Zhao et al., 2020) are designed for multiplication-based networks. The authors have overlooked elaborating on the specific modifications implemented to adapt the simulator for multiplication-free networks. Given this, it's debatable if the evaluation backdrop is fair for multiplication-based networks. A recommendation for the authors would be to utilize more reproducible metrics, such as the latency from the TVM-based Shift/Add execution in ShiftAddViT (You et al., 2023)."
            },
            "questions": {
                "value": "Besides the previously listed weaknesses, I have the following questions:\n\n1. The experiments exclusively consider the image classification task. How can it be asserted that this is the dominant task for IoT devices?\n\n2. As indicated in Tab. 5, when introducing multiplication into the search space, the proposed ShiftAddAug displays a reduced accuracy compared to the baseline ShiftAddNAS (You et al., 2022). The given justification, which states \"our method has given the multiplication-free operators strong capabilities, bridging the gap to the original operator\", appears inconsistent. Notably, the ShiftAddNAS baseline actually boasts a similar count of Mult, Shift, and Add parameters. If the assertion were accurate, ShiftAddAug should outperform ShiftAddNAS in terms of accuracy. It seems more plausible that ShiftAddAug adversely affects the efficacy of multiplication-based operators. If this is the case, an exclusive emphasis on shift/add-only networks might be misplaced, as the existing multiplication hardware in IoT devices would remain underutilized."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2032/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698654987518,
        "cdate": 1698654987518,
        "tmdate": 1699636134913,
        "mdate": 1699636134913,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "8Fx8P0BN7W",
        "forum": "fZmdNb5ThL",
        "replyto": "fZmdNb5ThL",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_x9yN"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_x9yN"
        ],
        "content": {
            "summary": {
                "value": "The paper proposes to augment shiftadd operation kernel based training with traditional multiplication kernel based training to improve the performance of CNNs while doing inference with only shiftadd ops."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "1 poor"
            },
            "contribution": {
                "value": "1 poor"
            },
            "strengths": {
                "value": "1. The idea of leveraging shiftAdd operation to improve compute bottleneck of CNNs is a useful and effective direction.\n\n2. The paper is written well, apart from few sentences, example: the last sentence of related work (on NAS)"
            },
            "weaknesses": {
                "value": "1. The paper's contribution needs improvement. The current draft is heavily based on ShiftAddNet and ShiftAddNAS. \n\n2. In the abstract the authors compared the energy performance with traditional DNN, however, it should have been ShiftAddNet, if there is any. As it is already understandable due to the earlier publications in this line that shift-add ops based computation would incur energy saving over MAC based computation.\n\n3. The idea of augmenting the training shiftadd kernel with multiplicative kernel would incur additional training compute and storage overhead, thus essentially altering the training recipe of the baseline shiftadd methods. Additionally, on device training and fine-tuning is a largely growing field, which is basically demeaned by this style of training compared to that of shiftaddnet.\n\n4. Interestingly shiftAddNAS can be assumed as a superset of this work, which not only proposes the option of multiple compute kernel types, but also searches over them based on resource budget. Thus, I find it very hard to appreciate the current work in its current format.\n\n5. The results are not comprehensive and the comparison baselines are not proper. The paper should be compared with ShiftAddNAS, ShiftAddNet, AdderNet, NetAug etc. Though having more comparisons are good, however, I am not sure why the authors compared with MCUNet, as there is already the next version in that family published > 1 year back,  MCUNet v2.\n\n6. Results on ImageNet are incomprehensive.\n\n7. Table 3 last row is not filled in!"
            },
            "questions": {
                "value": "Please see weaknesses."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2032/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698723943839,
        "cdate": 1698723943839,
        "tmdate": 1699636134815,
        "mdate": 1699636134815,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "TVoBwztJtT",
        "forum": "fZmdNb5ThL",
        "replyto": "fZmdNb5ThL",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_PuT1"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2032/Reviewer_PuT1"
        ],
        "content": {
            "summary": {
                "value": "This work proposed a network augmentation methods for muliplication-free (MF) convolutional neural networks (CNNs). The augmented part is multiplicative and only exists during training to \"condition\" the training of the multiplication-free part. During inference, the augmented part will be disgarded; hence the inference latency and energy efficiency will not be compromised.\n\nA key technical contribution of this work is the heterogeneous weight sharing between the MF part and the augmented part. The intuition is the observation of the distribution shift of the trained weights in the two parts. The authors proposed to use the so called \"heterogeneous weight sharing with remapping\" that maps the original conv weights to those in the MF convs so that the remapped weights approximately follow a Laplacian distribution. This weight sharing technique is essential for the success of the proposed method.\n\nThe authors conducted a number of experiments to show the effectiveness of the proposed method."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "+ The idea of conditioning MF network training via network augmentation is interesting. While this idea is not new as the authors discussed in the related work section, the authors identified a unique numerical issue encountered when applying the methodology to MF network training, that is the weight tearing issue --- the inconsistency of weight distribution between the MF and mulicative parts. Solving this issue brought significant boost in performance to the proposed method."
            },
            "weaknesses": {
                "value": "**Clarity**. As the most important part of this work, the elaboration on the heterogeneous weight sharing technique is not clear enough. I feel confused about several parts of the technique when I was reading the paper.\n- Between which two parts are the weights shared, and how? The authors are not quite clear (mathematically and technically) about this. According to the authors description, I guess the augmented convs (multiplicative) contain the original weights. The weights are mapped to those in the ML convs using Eqn (5).\n- If my understanding is correct above, does it mean the augmented conv has to be in the exactly same size as the MF conv? If so, how do the [2.2, 2.4, 2.8, 3.2] multiples in Tab. 2 work for the NAS part?\n- Is it correct understanding that there are no actually weights stored for MF part during training; instead they are generated with mapping (5) instantly? \n- What is the consideration of adding a learnable FC layer in (5)? From my understanding, there are analytical way that maps data points from a Gaussian dist. to Lap dist, like optimal transport?\n- Are the weights rounded to powers of 2 for ShiftConv?\n\n**Experiment design**.\n- The plain multiplicaive augmentation seems only to hurt the MF part without the heterogeneous weight sharing technique. Another possibility is that the weight sharing technique plays a role as a special parameterization trick. What if we only apply the parameterization without augmentation? Will this improve the performance?\n- The MF augmentation seems to work well itself. Is the weight sharing also applied for this baseline? If so, what if we relax it? The point here is to see how the performance improves just by increasing the width of a MF network.\n\n**Overall writing quality**. While the overall flow of the paper is ok, there are writing issues here and there. A incomlete list of issues:\n- The ShiftAddAug-NAS row in Table 3 is missing. The MobileNetV3 Add/AddAug accuracy data is also missing without clarification.\n- The punctuations and capitalizations in many places are wrong.\n- The names of the compared methods are confusing. I recommend the authors use a dedicated paragraph to clarify the naming of counterparts compared in the experiments."
            },
            "questions": {
                "value": "See the weaknesses part."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2032/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698832586793,
        "cdate": 1698832586793,
        "tmdate": 1699636134749,
        "mdate": 1699636134749,
        "license": "CC BY 4.0",
        "version": 2
    }
]