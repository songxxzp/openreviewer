[
    {
        "id": "8DwPBSAzOl",
        "forum": "5zNJQV60Wm",
        "replyto": "5zNJQV60Wm",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_ZKfU"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_ZKfU"
        ],
        "content": {
            "summary": {
                "value": "The paper presented a prompting strategy to LLMs to generate interpretable programs to symbolic/math/text reasoning tasks."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "The author thoroughly reviewed and combined existing experience in prompting the LLM for better reasoning results, e.g. CoT, PoT."
            },
            "weaknesses": {
                "value": "While the approach is well presented, the overall contribution is less clear to the reviewer. \n\n* The author claimed that NLEP is a unified framework for math/symbolic reasoning, NLU, and instruction following tasks. Since the entire model, except the text classification, is just prompting the LLM, it's unified naturally. On the other hand, from Table 1, each domain may share the same prompt, while the prompts still need to be different cross-domain. It's super reasonable for sure, but the unified framework is further weakened. \n\n* Fundamentally, the experiment section compares the prompting strategies. It's better to compare the content in the prompts side by side. \n\nThe reviewer suggests improving the presentation of the method and emphasizing the difference to the existing models with concise and concrete facts. It's possible that the reviewer misunderstand the contribution of this work due to the presentation quality."
            },
            "questions": {
                "value": "1. Which part of the experiment evaluates the NLEP's performance on the instruction following? \n\n2. What do numbers in parenthesis mean in Table 6 header?\n\n3. What is the foundation model for multi-class prompting in Table 6?\n\n4. it is quite unclear that whether the NLEP is a prompting strategy or a refined decoding space. In Figure 1, it seems the only input to the LLM is a vanilla question. In appendix C, the contents are titled \"prompt for task-general CoT/NLEP\", but then described as generated results by LLM. In addition, if these results are referred to as \"intermediate program\", a description of full process should be available. Is the program generated then executed on a python interpreter for the NLEP and PoT while the CoT just directly predict the results? If so, it's an important difference that should be emphasized."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2022/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698106351365,
        "cdate": 1698106351365,
        "tmdate": 1699636133709,
        "mdate": 1699636133709,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "xX5MkzROp5",
        "forum": "5zNJQV60Wm",
        "replyto": "5zNJQV60Wm",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_2MWH"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_2MWH"
        ],
        "content": {
            "summary": {
                "value": "The paper proposes using natural language embedded programs (NLEPs) as a unified framework for combining language-based reasoning with symbolic computations to solve tasks requiring both capabilities. NLEPs are generated by prompting large language models (LLMs) with general demonstrations as prompts. The generated NLEP code is then executed and the output is captured as the response.\nTasks Evaluated including Math and symbolic reasoning, Question answering and instruction following, Text classification, shows the improvement over strong baselines across the diverse tasks."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "1 poor"
            },
            "strengths": {
                "value": "1. The proposed natural language embedded programs (NLEP) framework integrates the strengths of both natural language reasoning and symbolic computation. It bridges the gap between symbolic and linguistic representations but also offers a more comprehensive approach to problem-solving.\n2. One of the standout features of the NLEP approach is its adaptability. With just a task-general prompt, the framework can tackle a diverse set of tasks, from math and symbolic reasoning to text classification and question answering. This adaptability suggests that the framework is not overly specialized and can be applied to a wide range of NLU challenges.\n3. In an era where the interpretability of machine learning models is of paramount importance, the NLEP framework shines by generating Python programs that are not only human-readable but also allow for a deeper understanding of the model's reasoning process. This transparency is crucial for applications where understanding the decision-making process is as important as the decision itself. Beyond just interpretability, the generated programs offer a tangible advantage in terms of verification. By being able to inspect and execute the generated code, researchers and practitioners can verify the intermediate steps of reasoning. This is a significant step forward in ensuring the reliability and trustworthiness of AI-driven solutions.\n4. The paper demonstrates that the NLEP approach can outperform strong baselines across various tasks. This not only validates the efficacy of the proposed method but also reveals its potential as a leading approach in the domain of natural language understanding."
            },
            "weaknesses": {
                "value": "My main concern lies in the incremental advancement Over Prior Work. While the NLEP framework undeniably brings advancements in enhancing the reasoning capabilities of large language models, its novelty in relation to prior work raises questions. The authors acknowledge in the paper regarding to the similarities with existing methods such as the program-of-thought (PoT; Chen et al., 2022) and program aided language models (PAL; Gao et al., 2023). Although NLEPs introduce additional programming elements like packages, data types/structures, and functions, the core contribution appears to be more of an engineering-style extension rather than a groundbreaking conceptual leap. It would be beneficial to see a more in-depth discussion on the unique contributions of NLEP beyond these incremental enhancements."
            },
            "questions": {
                "value": "N/A"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2022/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698697874225,
        "cdate": 1698697874225,
        "tmdate": 1699636133613,
        "mdate": 1699636133613,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "AF0Hy1G4vy",
        "forum": "5zNJQV60Wm",
        "replyto": "5zNJQV60Wm",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_pxPW"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_pxPW"
        ],
        "content": {
            "summary": {
                "value": "This work proposes natural language embedded programs (NLEP) as a unified framework to perform math/symbolic reasoning. This approach prompts a language model in a four-step form, tool-using, knowledge extraction, function definition, and answer printing, to generate a runnable Python program. This method can improve upon strong baselines over a range of tasks."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "Originality: 2/5\n\nThere are a few related works in the neural symbolic works of literature that instead of using the GPT-4 model to generate Python code with prompting, extract necessary facts and perform reasoning over these facts.\n\nQuality: 3.5/5\n\nThis work has been sufficiently evaluated on a few benchmarks with three baselines. \n\nClarity: 2.5/5 \n\nThe presentation of the paper is somewhat hard to follow. A flowchart diagram would be nice to represent which part of the framework is up to changes and which part is not. \n\nSignificance: 3.5/5\nCombining neural models with symbolic programs is an important task to solve realistic problems which requires both perception and reasoning capabilities."
            },
            "weaknesses": {
                "value": "In the related work, the neural symbolic works are not discussed and compared sufficiently. For example, Scallop [1] is a language for combining perceptual and reasoning capabilities; Logic-LM [2] also utilizes a logic solver for LLM-extracted knowledge. \n\n[1] Li, Ziyang, Jiani Huang, and Mayur Naik. \"Scallop: A Language for Neurosymbolic Programming.\" Proceedings of the ACM on Programming Languages 7.PLDI (2023): 1463-1487.\n\n[2] Pan, Liangming, et al. \"Logic-lm: Empowering large language models with symbolic solvers for faithful logical reasoning.\" arXiv preprint arXiv:2305.12295 (2023)."
            },
            "questions": {
                "value": "What is the advantage and disadvantages comparing your work against the neural symbolic approaches?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2022/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698828259279,
        "cdate": 1698828259279,
        "tmdate": 1699636133527,
        "mdate": 1699636133527,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "52FOG9IcWW",
        "forum": "5zNJQV60Wm",
        "replyto": "5zNJQV60Wm",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_T68U"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2022/Reviewer_T68U"
        ],
        "content": {
            "summary": {
                "value": "This paper proposed natural language embedded programs (NLEP), which is a general method for several natural language reasoning and understanding tasks, such as math reasoning, question answering and text classification. NLEP first uses natural language comments as a step-by-step guide for program generation, by using programs as solutions, it prints out a natural language response simply as a string. Experiments are conducted on 16 language understanding tasks, and results show that NLEP is comparable with CoT and PoT methods using task-specific prompts, and outperforms such methods when only task-general prompts are considered."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "S1: Despite being simple, the proposed method is quite interesting and novel. It is also a good complement to the tool use of LLMs, which has been a popular domain lately;  \nS2: The evaluation is very comprehensive, 16 tasks from three domains are evaluated in this work, and the proposed method has been shown to be comparable to or better than previous methods (e.g., CoT, ToT) on a majority of the tasks;    \nS3: One of the key contributions of NLEP is task-general prompt, which could be very helpful in making LLMs less dependent or sensitive to specific prompts."
            },
            "weaknesses": {
                "value": "W1: Some ablation study for NLEP would have been nice to understand the key components that make it work. For example, a study on how important are those step-by-step natural language comments;  \nW2: It seems to me that such methods would probably be hard to extend to natural language generation tasks (e.g., summarization, storytelling, etc), but this is not to discredit this work as language reasoning itself is already an interesting and important domain. \n\nIn addition, it would be great if the authors can answer the questions in the \"questions\" section."
            },
            "questions": {
                "value": "Q1. For structured knowledge shown in Figure 1, did the model generate them or it is automatically generated via some external code (e.g., loading from a json file)?  \nQ2. Is it possible to also use task-specific prompts to further improve the performance of NLEP and surpass CoT, PoT, and ToT methods completely?   \nQ3. For the classification tasks, I like the idea of using decision trees to make things discrete and interpretable. Are there any other ways of using NLEP for classification besides decision tree?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2022/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1699140551027,
        "cdate": 1699140551027,
        "tmdate": 1699636133468,
        "mdate": 1699636133468,
        "license": "CC BY 4.0",
        "version": 2
    }
]