[
    {
        "id": "FtHfAsgLjC",
        "forum": "PXXuLvIH5r",
        "replyto": "PXXuLvIH5r",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission7734/Reviewer_SBgK"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission7734/Reviewer_SBgK"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes a method for automatically generating SAT instances. Automatic generation of SAT instances is highly demanded since we need a large amount of SAT instances for estimating parameters of learning-based SAT solvers or tuning hyperparameters of traditional SAT solvers. While previous state-of-the-art learning-based SAT instance generation methods generate instances from a single reference, the proposed algorithm, MixSAT, generates SAT instances by interpolating two SAT instances. MixSAT first makes an assignment map of variables of two SAT instances. Then, it uses the map to select similar clauses and finally exchanges these similar clauses to make new SAT instances. On making an assignment map, the proposed method puts random noise for preserving difficulties. Experimental results show that MixSAT can preserve more graph structural properties than baseline methods, except for UNSAT instances. Moreover, MaxSAT preserves the difficulty of SAT instances, in hard satisfiable instances."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "**Important topic:**\nI agree with the motivation that we need more real-world SAT instances to improve the performance of Boolean SAT solvers. I agree that to generate SAT instances, preserving difficulty is a challenging task since SAT instances seem sensitive to small changes. \n\n**Clearly written paper:**\nThe paper is generally clearly written and easy to read. Figures 1-3 help us understand the complex procedure of MaxSAT.\n\n**The idea of using interpolation is interesting:**\nThe idea of using interpolation is interesting. It seems a reasonable way of data augmentation. Moreover, the proposed method seems\ncarefully designed to perform interpolation between two CNFs.\n\n**Experimental results show the superiority of the proposed method:**\nAlthough not always better than HardSATGEN, the proposed method outperforms other baseline methods."
            },
            "weaknesses": {
                "value": "**Experimental results are not strong:**\n1. Experimental results show that the proposed method is not always superior to HardSATGEN. Especially, the running time evaluation results in Tab.2 show that the proposed method fails to preserve the computational difficulties of hard instances. The results seem to contradict the claim of the paper.\n1. Li et al. (2023) reported that hyperparameter tuning with instances generated by HardSATGEN improves performance on real-world problems. Since a primal objective of generating SAT instances is to tune the parameters of solvers, the paper should report the results of using the instances generated by MixSAT to tune the parameters of existing solvers. \n1. Runtime evaluations were conducted with CaDiCaL. I think the paper should also report the performance of different solvers like Kissat since different solvers sometimes show completely different performances. In performance evaluation, Li et al. (2023) compared the performance of three different solvers. It seems a safer way to evaluate the running time of SAT solvers.\n\n\n\n**Some important details of experiments are missing:**\nSome important details of experiments are not reported in the paper:\n1. The proposed method generates instances by interpolating two instances. Therefore, the performance of the proposed method depends on how we make a pair. However, the details of making pairs are not reported in the paper.\n2. It is said that the dataset was taken from SATLIB and SAT Competition 2021. However, how the authors select easy and hard [a-h] instances from a large amount of instances seems not explained in the paper. The paper should show the reason behind selecting these instances to make the evaluation fair.\n\n\n\n**There are claims not supported by experimental results:**\nSome claims of the paper seem not supported by the experimental results:\n1. The paper says the proposed method is more efficient (page 2), but no experimental results support the claim.\n2. The paper says that MaxSAT introduces some randomness to maintain computational hardness. However, experimental results reported in Table 2 show that randomness does not help much in preserving hardness.\n\nThese points make me feel that the proposed approach is not well-motivated."
            },
            "questions": {
                "value": "I'd be happy if the authors addressed my concerns mentioned in the weakness section."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission7734/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission7734/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission7734/Reviewer_SBgK"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission7734/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698679980331,
        "cdate": 1698679980331,
        "tmdate": 1699636943728,
        "mdate": 1699636943728,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "SjYPUwOPZN",
        "forum": "PXXuLvIH5r",
        "replyto": "PXXuLvIH5r",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission7734/Reviewer_5Kyc"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission7734/Reviewer_5Kyc"
        ],
        "content": {
            "summary": {
                "value": "This paper is devoted to machine learning assisted generation of\nfamilies of benchmark formulas for propositional satisfiability (SAT)\nsolvers. The paper builds on the use of graph representations of\nformulas in conjunctive normal form (CNF) and utilizes a graph\ninterpolation approach, which modifies the graph structure by\nreplacing some of its substructures from other similar instances. The\npaper argues that the proposed approach is able to maintain the\noriginal hardness of the corresponding families of benchmarks, thanks\nto the use of Gumpel noise. The presented experimental results claim\nto demonstrate the advantage over the state of the art in SAT\nbenchmark generation from the perspective of (1) maintaining the\nstructure of the benchmark family and (2) its hardness."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "- The entire flow of the proposed approach are provided one after\n  another.\n- The overall presentation is nice, especially the figures look\n  beautiful and help a reader understand the ideas.\n- To the best of my understanding, the proposed approach is novel."
            },
            "weaknesses": {
                "value": "- Although all the steps of the approach are listed, they are not\n  augmented with clear arguments for why they are used. This seems to\n  be a standard issue with all the works on applying ML methods in/for\n  combinatorial problem solvers where the authors propose to apply\n  ~50-100 steps with no clear justification. This trend is clearly\n  detached from the mainstream SAT research where each idea has to be\n  clearly articulated and justified. Granted it may be just me getting\n  lost in matters that are straightforward to any ML expert.\n\n- Experimental results look rather weak to me as they seem to be a\n  mixed bag. At least, I don't see a clear advantage of the proposed\n  approach over the state of the art in terms of the hardness of the\n  generated formulas.\n\n- Minor: the authors say that SAT is a combinatorial optimization (CO)\n  problem while it isn't. There is no optimization in the original\n  decision formulation of SAT.\n\n- Minor: I would suggest rewording the sentence (in the introduction):\n  \"resemble the computational complexity\". Computational complexity of\n  SAT is well understood."
            },
            "questions": {
                "value": "- A key question is this line of research is whether the formulas\n  generated automatically exhibit the properties intrinsic to\n  \"industrial instances\". This is important given the widespread use\n  of modern SAT solvers in industrial settings. So I would like to ask\n  the authors whether the ability of their approach to capture this.\n\n- Can you comment on the rationale of (at least some of) the steps\n  your approach performs?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission7734/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698737452425,
        "cdate": 1698737452425,
        "tmdate": 1699636943565,
        "mdate": 1699636943565,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "7pagZd5VZv",
        "forum": "PXXuLvIH5r",
        "replyto": "PXXuLvIH5r",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission7734/Reviewer_KdVD"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission7734/Reviewer_KdVD"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes MixSAT, a ML-based generation approach for SAT instances. Instead of generating formulas ex novo, MixSAT interpolates exising pairs of formulas using:\n\n-    GNN-based representation learning for capturing structural properties in a latent representation\n-    Differentiable Gumbel-Sinkhorn stochastic matching between instances\n-    Graph interpolation via iterative clause replacement\n\nThe generated formulas statistically retain similar structural properties and preserve the hardness of the original instances."
            },
            "soundness": {
                "value": "4 excellent"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "-    Overall very clear presentation\n-    Well-motivated problem\n-    The proposed technique seems sound and novel\n-    Promising initial results"
            },
            "weaknesses": {
                "value": "-    Minor points related to the presentation and evaluation\n-    I would also discuss the limitations of MixSAT"
            },
            "questions": {
                "value": "1) Besides structural properties and hardness, does MixSAT preserve the SAT/UNSAT ratio of the original data?\n2) What are the limitations of your approach?\n3) Do you observe a degratation in performance when interpolating formulas generated by MixSAT?\n4) Is it possible to learn a binary classifier that accurately discriminates original vs. MixSAT instances?\n\nMinors:\n\n\"The Boolean satisfiability problem (SAT) stands as a canonical NP-complete combinatorial optimization (CO) problem\"\n\nSAT is a decision problem, not a CO. Max-SAT is the optimization counterpart.\n\n\"there exists an assignment of Boolean variables that satisfies a Boolean formula and in general is NP-hard.\"\n\nSAT is NP-complete. I understand that, in principle, the formulas that MixSAT generates could be used in non-decision settings too. I would then rephrase the sentences above, making it clear that you address generation of propositional logic instances for decision (SAT) and other problems (e.g. Max-SAT)\n\n\"e.g. in EDA.\"\n\nWhat EDA stands for?\n\nAdding the pseudocode of MixSAT would greatly help."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission7734/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698763476087,
        "cdate": 1698763476087,
        "tmdate": 1699636943448,
        "mdate": 1699636943448,
        "license": "CC BY 4.0",
        "version": 2
    }
]