[
    {
        "id": "0G8AKfi1X4",
        "forum": "fM1ETm3ssl",
        "replyto": "fM1ETm3ssl",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission7884/Reviewer_aCZg"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission7884/Reviewer_aCZg"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes to use meta-models to understand the internal properties of neural networks. The application includes backdoor detection and data distribution identification."
            },
            "soundness": {
                "value": "1 poor"
            },
            "presentation": {
                "value": "1 poor"
            },
            "contribution": {
                "value": "1 poor"
            },
            "strengths": {
                "value": "See weaknesses."
            },
            "weaknesses": {
                "value": "Though this paper focuses on an interesting topic, it is less than 9 pages and the amount of work is not enough."
            },
            "questions": {
                "value": "None"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "1: strong reject"
            },
            "confidence": {
                "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission7884/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698675125170,
        "cdate": 1698675125170,
        "tmdate": 1699636967193,
        "mdate": 1699636967193,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "sOPCrC9bUP",
        "forum": "fM1ETm3ssl",
        "replyto": "fM1ETm3ssl",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission7884/Reviewer_HFmY"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission7884/Reviewer_HFmY"
        ],
        "content": {
            "summary": {
                "value": "This research explores how meta-models can be used to interpret neural network models. The goal of the work is to improve the interpretability of complicated neural architectures by utilizing meta-models. By recovering RASP programs from model weights and using meta-models for backdoor identification in these basic models, they experiment to try and reverse-engineer neural networks. Amazingly, their solution outperforms numerous other approaches already in use, achieving over 99% accuracy in backdoor identification. The results signify a noteworthy advancement in the transparency and interpretability of neural networks."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "1.\tContribution to Open Source: The paper mentioned making datasets available for future work. Contributing to open-source ensures that the broader scientific community can benefit from, replicate, and build upon their work.\n2.\tImproved Interpretability: The research showcases a novel approach to recovering a program from transformer weights.\n3.\tHigh Accuracy: In their testing, the meta-model achieved impressive accuracy. Such high accuracy showcases the effectiveness and reliability of their approach."
            },
            "weaknesses": {
                "value": "1.\tDependence on Large Amounts of Training Data: Their method relies heavily on having a significant amount of training data, which might not always be feasible for every application.\n2.\tModel Size: As mentioned in this paper, the models they worked with are relatively small, with an average of only 3,000 parameters. This contrasts with much larger models often used in deep learning, which can have millions or even billions of parameters. It is much better to see the performance of larger models.\n3.\tScope of Tasks: The tasks they tested are simpler compared to the full problem of reverse-engineering a large neural network."
            },
            "questions": {
                "value": "1.\tThe baseline in this paper is not enough to show the performance of their methods, adding more baselines will be better. \n2.\tI hope this method can be tested on a larger model and prove to be effective."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission7884/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698814009822,
        "cdate": 1698814009822,
        "tmdate": 1699636967042,
        "mdate": 1699636967042,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "VceNnin7jN",
        "forum": "fM1ETm3ssl",
        "replyto": "fM1ETm3ssl",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission7884/Reviewer_2Mjn"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission7884/Reviewer_2Mjn"
        ],
        "content": {
            "summary": {
                "value": "This paper presents what it terms a meta-model approach to mechanistic interpretability. Specifically, the approach is to create a model that takes in the weights (or other properties) of a model (a transformer), and then get the transformer to either 1) generate a human interpretable program (rasp) that corresponds or 2) detect backdoors. Stated differently, the goal of this work is to use a model to explain certain aspects of another model. The authors demonstrate the approach on a backdoor prediction task, and show that a meta-model can invert transformer weights that have been compiled by the tracr program."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "- **Interesting solution to an important problem**: several of the demonstrations of the mechanistic interpretability paradigm have mostly been bespoke and tailored to single architecture-settings. Here the use of a model to predict the properties of a function that we seek to explain/interpret is interesting. The use of the tracr library as well is also very nice since that library was essentially design for the kind of tasks that it is used for in this work. \n\n- **Variety in tasks**: The authors show a variety in the kind of tasks that the approach can be used for. For example, one use it to reverse-engineer tracr programs. Another use is back-door detection. I particularly liked the next-token prediction framing, which is then used generate tracr programs of a model's weights. This kind of approach, if generalization, can be applied more extensively."
            },
            "weaknesses": {
                "value": "I should state upfront, that I am fundamentally skeptical of the approach that this work pursues, but I am willing to rethink/update my review given feedback from the authors. \n\n- **Black-box model to explain a black-box model**: I think this approach is fundamentally limited because you are now using one model you don't understand to try to explain another model that you don't understand. What happens if the training data of the meta-model has backdoors in it for example? That is, you make it so that the back-door model gives interpretations that are benign for a model that is actually problematic. This might seem far-fetched, but I think one of the key limitations of this approach is that we are left to just 'trust' the output of the meta-model. But as we know, transformer-based models can easily learn spurious signals, and other problematic behavior, so it is unclear how this approach fundamentally solves the interpretability-problem at hand. Perhaps if we could always convert trained models to their tracr equivalent then we would have more confidence in this approach. However, to me, it is a non-starter that one cannot ascertain the reliability of the results of the meta-model.\n\n- **What does a mechanistic interpretation mean in this setting**: For the tracr program reconstruction, I think I get it. Here it seems like the tracr program itself constitute the explanation of the model weights. In the backdoor setting it is less clear. How does the backdoor classification task demonstrate interpretability? Specifically, how do I know how the meta-model is able to detect which model has a backdoor? Here I think you would actually want to make it input specific. Specifically, I think only a certain subsets of inputs trigger the wrong outputs for models with backdoors. It is the model's behavior on these inputs that we are most interested in. I don't quite see how the current setup helps us to do this."
            },
            "questions": {
                "value": "I mixed in questions with the discussion on weaknesses above.\n\nIn addition to the points above, I have some questions about the tracr-program inversions section. \n- Can you show examples in the appendix of settings where you compile a program with tracr, and then reverse-engineer it with the meta-model. It would be helpful to compare the output of the meta-model and the original tracr program. \n- Are you not worried that that transformers that you get from tracr programs have much more sparse weights compared to SGD/ADAM trained models? Essentially, I am worried whether the demonstration here is too easy for the meta-model. \n- How do you envision that this meta-modeling approach will actually be used in practice, on real models, in the future? I struggle to see how one could ever train a meta model for a realistic setting, e.g., a vision transformer trained on ImageNet. Would I need to train thousands of imagenet models first to fit the metamodel?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "details_of_ethics_concerns": {
                "value": "N/A"
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission7884/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1699316507512,
        "cdate": 1699316507512,
        "tmdate": 1699636966945,
        "mdate": 1699636966945,
        "license": "CC BY 4.0",
        "version": 2
    }
]