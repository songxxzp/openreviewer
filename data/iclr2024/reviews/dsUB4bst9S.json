[
    {
        "id": "4HI4xfBi0E",
        "forum": "dsUB4bst9S",
        "replyto": "dsUB4bst9S",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_twgj"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_twgj"
        ],
        "content": {
            "summary": {
                "value": "This paper investigates why arithmetic capabilities emerge from next-word prediction. The authors do several experiments with Transformer models between 10.6M and 124M parameters trained from scratch, and GPT-3 fine-tuned. The findings for the models trained from scratch is that for arithmetic they can generalise from relatively few examples (~6k), but generalise better when the output is reversed because this allows learning a simpler algorithm for arithmetic. The authors also find that holding out entire numbers from training doesn't decrease performance. Using scratchpads during training makes the models more sample efficient (even when accounting for the extra tokens this costs). The findings are similar for arithmetic with up to 10 digits and for different functions like subtraction. The authors also mix in text during training, and the produced model gets 100% arithmetic performance with few-shot prompting. In the third part the authors fine-tune GPT-3 and find further improved performance and sample-efficiency."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "1 poor"
            },
            "strengths": {
                "value": "The paper is written well, a lot of experiments are done with some interesting findings (e.g. scratchpad training from scratch is more efficient even when accounting for extra tokens, holding out digits doesn't degrade performance)."
            },
            "weaknesses": {
                "value": "The introduction says that the novelty of this work over prior work is to pinpoint the factors that contribute to the fast emergence of arithmetic capabilities through careful ablations, but I'm not sure how well the findings from this study would transfer to LLMs at scale. Additionally, I feel like some of the findings are not properly backed by the experiments:\n\n- The Transformers in this work are almost exclusively trained on arithmetic data, and it's unclear whether the findings would transfer to models trained primarily on language with some arithmetic data weaved in. Indeed, you show that arithmetic can be learned from next-digit prediction, but that is unsurprising since the setup is simply a cross-entropy loss on the next \"token\"(=digit).\n\n- The finding that reversing the output helps also most likely doesn't explain emergent abilities in LLMs, as this doesn't happen in natural text.\n\n- You show that few-shot prompting can be used to improve performance when text is mixed in, but you don't try few-shot prompting when text is not mixed in, so it's unclear whether the increase in performance is due to text being mixed in, or simply because of few-shot prompting. Few-shot prompting should also work when you train the model without text, or am I missing something?\n\n- The finding that sampling strategy is important is interesting, but on its own it's again unclear whether that transfers to emergent capabilities of larger models. For example, does the distribution of numbers in pretraining dataset follow a similar one as the one produced by your sampling strategy?\n\n- You claim you try to disentangle the factor of pretraining, but compare NanoGPT and GPT-2 from scratch to a fine-tuned GPT-3, which doesn't disentangle pretraining from scale. Why not compare to GPT-2 fine-tuned?\n\nIn summary, I feel like the motivation of the study (to explain emergent arithmetic abilities of LLMs) does not match with the experiments."
            },
            "questions": {
                "value": "- I don't understand why you would call the learning curve between 1k and 4k examples a phase transition? You're learning a task with a deterministic output, and 100% accuracy is possible and this model happens to learn it between 1 and 4k examples. This doesn't seem to be a fast phase transition when the model is anyway only trained for 6k examples.\n\n- It seems like the main reason for the model to learn arithmetic in this setup is because every example it sees is an entirely new one (new pair of operands), so the only strategy to achieve low training loss is actual arithmetic. It would be interesting to learn whether the generalisation behaviour is different when you train on the same set of examples for multiple epochs, which in turn could in fact explain some of the emergence of arithmetic in LLMs who are often trained for only a single epoch\n\n- I'm not sure I understand the exclusion experiments; For example for 1st (LSD) digit exclusion, do you just exclude 5 in the 1st digit? meaning that something like 543 cannot occur, but 453 can? If yes, how is that exclusion? The numbers are represented as a sequence over absolute embeddings, so 5 is not excluded at all but simply held-out at a particular position in the number no?\n\n- Typo end of page 8 (textand should be text and)"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Reviewer_twgj"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4078/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698256763353,
        "cdate": 1698256763353,
        "tmdate": 1700734207836,
        "mdate": 1700734207836,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "t9S9W60kuA",
        "forum": "dsUB4bst9S",
        "replyto": "dsUB4bst9S",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_sewW"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_sewW"
        ],
        "content": {
            "summary": {
                "value": "This paper focuses on an important problem of trying to understand how emergent capabilities like being able to solve arithmetic tasks arise while training transformer-based language models. Since it is difficult to decouple the various factors like compute, data, and model size to understand emergent capabilities, this paper conducts extensive experiments focusing on arithmetic tasks like addition, subtraction, multiplication, and unary operations like sine/sqrt on small models like GPT-2/nanoGPT. The paper presents various key findings:\n\n1. Training data format and sampling is important to make the decoder models learn arithmetic tasks properly. Models can learn addition in reverse better compared to the standard addition (with most significant digit being predicted first auto-regressively). The training data should have a good distribution over the number of carry operations (for addition/subtraction) as random sampling leads to an imbalance and reduced performance.\n2. Chain-of-thought style prompting / scratchpad based training leads to improved performance. Although there's a tradeoff, as the number of tokens to be generated to get the final answer have significantly increased.\n3. Mixing text data with arithmetic task data during training does not lead to performance degradation, just that the number of samples required to achieve emergence for addition becomes higher.\n4. Generalization beyond the digit lengths present during training is hard. If the model is not trained on a specific digit length, the model is not able to perform well even when it is trained on various digit lengths excluding this specific length."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "I really liked reading this paper and going over the various results and ablations presented in the paper. I believe the paper has various strengths as listed below:\n\n - The paper tackles an important problem of understanding emergence in language models wrt arithmetic operations. Data with arithmetic operations is not inherently present in the pre-training corpus, but still the models can do some rudimentary level of arithmetic tasks with few-shot prompting. The paper has some good ideas on adding arithmetic task data to the pre-training, or adapting pre-trained models with supervised fine-tuning on arithmetic data with some caveats (adding spaces to ensure better tokenization).\n- One of the important contributions of the paper is the structured data sampling for making models learn addition - ensuring good distribution over $n - 1$ digit operations for $n$ digit learning, and also ensuring equitable samples of the number of carry operations.\n- The section on the equivalence of learning addition and low-rank matrix completion is insightful, and how transformers have generalization capabilities beyond matrix completion.\n- The paper is well written and builds the story coherently, with lots and lots of ablation studies in the appendix and additional results."
            },
            "weaknesses": {
                "value": "- I was curious about the \\\\$ symbol bit present here and there in the paper, but it became clear after reading appendix B. In my opinion, the baseline used for making the strong claims of models being able to handle reverse addition better in the paper is wrong. The authors should have either done the reverse methodology without \\\\$ or used \\\\$ for the baseline too. This is a bit concerning as data formatting techniques highlighted in the paper are touted as one of the important contributions, and this finding makes that invalid.\n- Expanding on the previous point, Figure 9 specifically highlights that even plain addition is able to reach almost 100% test accuracy with the addition of the \\\\$ symbol, and reverse without \\\\$ is almost at 90% (only 2/3% difference with the baseline).\n- I believe some parts of the original manuscript is appendix material and some important bits in the appendix should be moved to the main paper. Specifically, the lemmas in section 4 seem a bit irrelevant given that difference of \\\\$ symbol in the baseline and reverse addition. Appendix section B.1 should be present in the main paper.\n- Not a weakness since the paper is fairly well written, but here are some typos in the paper:\n    1. I believe a latex shortcut is used to represent $A_{3}A_{2}A_{1} + B_{3}B_{2}B_{1} = C_{3}C_{2}C_{1}$ in the paper, because all occurrences of $B_{3}B_{2}B_{1}$ are represented as $B_{3}B_{1}B_{1}$.\n    2. Figure 1, in the detailed scratchpad solution, I think a carry ($C = 1$) has been missed after $[1, 2] + [3, 6], A = [5]$.\n    3. Figure 4b, it should be just Number of tokens on the x axis instead of Number of unique tokens?\n    4. Figure 8: Larger model scale instead of sacale.\n    5. No space between $\\textit{text}$ and $\\textit{and}$ in the last line on page 8."
            },
            "questions": {
                "value": "I have asked most of my questions in the weakness section, but here are a few more:\n\n- Figure 1, $A$ is built incrementally, like $A = [5]$, then $A = [9,5]$, and so on. What is the effect of starting with $A = []$ (empty set) in the prompt, as the first line just starts with a carry.\n- There's a slight confusion on the experiment setting in Figure 2. Is it plain addition with \\\\$ symbol and not the actual baseline? Also it seems that even with structured sampling, the overall performance on 2-digit addition is low when $n = 3$.\n- Do you have an equivalent diagram for Figure 9 for GPT-2 and GPT-3?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Reviewer_sewW"
                ]
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4078/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698714416028,
        "cdate": 1698714416028,
        "tmdate": 1699636372249,
        "mdate": 1699636372249,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "03bHoimYcA",
        "forum": "dsUB4bst9S",
        "replyto": "dsUB4bst9S",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_ofJx"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_ofJx"
        ],
        "content": {
            "summary": {
                "value": "The authors present an analysis of the performance of a small decoder-only transformer (NanoGPT), trained from scratch on arithmetic tasks (2 or 3-digit positive integer addition, mainly). They show that 3 digit addition can be learned to very high accuracy, from less than 5000 training examples, if the output digits are represented in \"reverse order\" (i.e. representing 256 as the sequence [6, 5, 2]), and less than 2000 if the model is provided chain of thought information (intermediary steps in the calculation) during training.\n\nOn two-digit addition, the authors observe that learning addition from a small training set amounts to completion of a low rank matrix (the addition table). They show that NanoGPT has the same data efficiency as classical completion algorithms, both needing about 2000 examples to \"fill the table\", but that NanoGPT overcomes one of the main limitations of classical algorithms: the need to have at least one example on every line and column.\n\nThe authors also present extensions of their approach to longer operands, and other mathematical operations (on integers and decimals). Finally, they present experiments with larger models (pre-trained or not), showing that whereas larger models, like GPT-3, achieve better performance with few-shot learning, their observations on the role of reversed digits in the output, and chain-of-thought prompting, remain valid."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "1 poor"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The paper demonstrates that a basic arithmetic operation, like integer addition, can be learned by small transformers from a limited number of examples. They also show that techniques like chain-of-thought prompting, introduced as a method for finetuning pre-trained models on arithmetic tasks, also benefit small transformers, trained from scratch. This is an important result."
            },
            "weaknesses": {
                "value": "The submission is a compressed version of a very long paper. As a result, some of the claims in the introduction, e.g. those relative to length generalization and compositionality, are not discussed in the main paper. The results on other operators, and the impact of pre-training on text, are very hard to assess, because the paper provides almost no description of the experimental setting. Finally, some of the figures (e.g. fig. 5) are compressed beyond legibility. This makes the main paper difficult to read, especially starting with section 7 (unless one is ready to read 25 additional pages). \n\nI would recommend that the authors either submit the full version of their paper to a journal, or limit it to their results on addition, which are significant enough, and deserve a longer discussion."
            },
            "questions": {
                "value": "* To which extent is your finding on reversing digit order in the output specific to the decoder-only architecture you use? I believe output order would be irrelevant in an encoder-only setting (possible here because the output sequence is guaranteed to be shorter than the input sequence), what about an encoder-decoder architecture?\n* In the paragraph on balancing digit, you say : \"For instance, in the case of 3-digit addition, random sampling results in a meager 0.01% probability of selecting a 1-digit number.\" The probability of selecting a 1-digit operand should be 1%, right? \n* What are the performances of the model when operands have different lengths (e.g. 2 + 312, or 546 + 7)?\n* Does the model learn the properties of addition, e.g. commutativity? This could be done by testing whether model predictions for A+B and B+A are the same, even early during training.\n* Can those results generalize to decimal numbers (e.g. 1.21+13.12)? \n* Can those results generalize to signed numbers, by adding a sign token to all three integers?\n* There is a tension between your results from section 3 and 4, which suggest that models are learning the same algorithm as us (quickly memorizing the 10x10 table, then adding successive digits and propagating carries), and the results from section 5, which frame addition as a memorization+interpolation problem (learning to interpolate a large but low rank matrix). Is there a way to decide what algorithm the model is actually learning? \n * Is there a chain-of-thought approach suitable to low-rank matrix completion? If so, it would greatly improve its data efficiency, and perhaps allow it to scale to larger operands."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Reviewer_ofJx"
                ]
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4078/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698778910518,
        "cdate": 1698778910518,
        "tmdate": 1700667439614,
        "mdate": 1700667439614,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "zQ3wvr8Ve4",
        "forum": "dsUB4bst9S",
        "replyto": "dsUB4bst9S",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_UmA7"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_UmA7"
        ],
        "content": {
            "summary": {
                "value": "In this study, the researchers explore the ability of small transformers, to grasp basic arithmetic tasks using the next-token prediction objective. The research reveals that simple alterations in the format of the training data, such as inverting the results or incorporating step-by-step breakdowns, can markedly enhance model accuracy. Furthermore, the paper delves into the intricate relationship between arithmetic and text data in training, as well as the length generalization challenges encountered by these models. This research underscores the significance of refined and targeted data, keeping in mind the unique traits of the next-token prediction objective, in swiftly fostering arithmetic capabilities."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "Well-written, technically sound paper"
            },
            "weaknesses": {
                "value": "The study's main shortcoming in terms of novelty stems from its reliance on previously established methods and datasets, particularly the use of reasoning-augmented data, which has been prevalent in enhancing model performance. The authors explicitly acknowledge that their work doesn't break new ground in terms of the types of training data or in achieving peak performance with minimal model parameters. However, the research sets itself apart through its meticulous ablation studies and in-depth exploration of various sampling techniques, training data formats, data source mixing ratios, and model scales. Additionally, while they provide certain novel theoretical explanations for observed phenomena, their primary emphasis on arithmetic isn't for its intrinsic importance but as an easily testable emergent skill to better understand emergent phenomena in models."
            },
            "questions": {
                "value": "How do the authors envision scaling their methodology beyond GPT-3? Additionally, do they believe their approach is compatible with subquadratic transformer variants?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4078/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698785786941,
        "cdate": 1698785786941,
        "tmdate": 1699636372038,
        "mdate": 1699636372038,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "t3rZizGiAd",
        "forum": "dsUB4bst9S",
        "replyto": "dsUB4bst9S",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_9wwh"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4078/Reviewer_9wwh"
        ],
        "content": {
            "summary": {
                "value": "The paper investigates the performance of Transformers (small scale) on a set of arithmetic tasks when trained from scratch with next token prediction objective. The study is motivated by the emergent ability of LLMs in solving arithmetic problems even though they are not directly trained on these tasks. The main task is multi digit arithmetic (-,+,*), most of the paper is focused on setting where the task is only multi digit addition. \n\nIn the paper,\n1. They study the impact of input representation (reversing the output digits helps the models learn the task faster).\n   - In the setting where they reverse the output digits, the model learns the task but there is a sharp phase transition as they increase the number of training samples. They try to explain this by the argument that learning a map on `n` digits from random samples is equivalent to completing a low-rank matrix (but they mention that this doesn't explain the generalisation behaviour of the models). \n  - For the multiplication operation, reversing the output does not have a positive effect.\n2. They study the impact of data distribution (balanced vs non-balanced)\n3. They show that using chain of thought during training helps (the more detailed the better).\n  - In this context, they compare the models in terms of sample efficiency and token efficiency, and show that models trained with CoT are more sample efficient but in total they require more number of tokens.\n  - They show that a detailed scratch-pad doesn't help with operations like sine and square-root.\n4. They show that the techniques of reversing and using CoT during training, stay as sample efficient when the complexity of the task grows in terms of the number of digits, where is training the models on the plain format of the task becomes harder (requires more samples) as the number of digits increases.\n5. They investigate the effect of training the model on a mixture of text and arithmetic data. \n6. They investigate the effect of models size (comparing nano-gpt and gpt-2, and pre-trained/fine-tuned GPT-3)."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "- Lot's of interesting analysis. \n- Maybe a difference with some of the previous work on this topic is that here the objective, similar to language models, is the next token prediction, as opposed to modelling the task as a classification task. This is basically training language models on arithmetic data. The paper aims to reveal the factors that lead to emergence of arithmetic capabilities in a minimal setting."
            },
            "weaknesses": {
                "value": "While it is very interesting to understand if, how and under which settings language models learn simple arithmatics, It's not clear to me how the findings in the paper can be generalised. \n- For example, even in case of the ability of models to learn arithmetics, as mentioned in the paper, these results are based on using character level tokeniser which simplifies things a lot when it comes to such tasks and is potentially one of the biggest challenges for LLMs to perform well on these tasks. (A parallel work that looks into this: https://openreview.net/forum?id=OinvjdvPjp).\n- Methods like reversing the output seem a bit tacky. I agree it is interesting to see that these types of modification to the input/output impacts the results, making it easier for the model to learn the task, but I am not sure if they can have any value beyond analysis/understanding purposes. \n- While some of the experiments presented in the paper are conceptually very interesting they seem to be exploring the space a bit sparsely which makes it harder to make any firm conclusions."
            },
            "questions": {
                "value": "1. When chain of thought is applied during training, does the model also generate the chain of thought during inference? Is there any correlation between the validity of the chain of thought (during inference) and the correctness of the answer? \n2. Could the reason for better performance of the detailed chain of thought model simply be its length? \n3. In Table 1, could you report a confidence interval? In the caption, you say in some cases it improves (when some numbers are excluded from the training data)? If the difference here is significant (it actually is a an improvement), what is the intuitive explanation? You mention a regularisation effect, could you elaborate on that?\n4. In Figure 4, are the models with scratch pad also with reversed output?\n5. The paper argues that the sudden jump in accuracy can be explained if addition is formulated as 2-rank matrix completion, but the generalization behaviour of the model can not be explained by this. Could you elaborate how this explanation holds even though it is not fully consistent with the behaviour of the model?\n6. When comparing models with different sizes, is the smaller model trained for longer?\n7. Is there a reason why the number of digits for experiments in Figure 6 are different for different operations?\n8. What is the number of digits for experiments presented in Figures 7 and 8 and Table 2.\n9. Do you have any experiments where the different operations are not split into different tasks (where the task contains the mixture of operation)?\n10. Is there a failure point as you increase the number of digits?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4078/Reviewer_9wwh"
                ]
            }
        },
        "number": 5,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4078/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698904057881,
        "cdate": 1698904057881,
        "tmdate": 1700682848436,
        "mdate": 1700682848436,
        "license": "CC BY 4.0",
        "version": 2
    }
]