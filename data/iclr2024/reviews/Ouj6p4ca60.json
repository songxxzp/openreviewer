[
    {
        "id": "qpeZLq7zrA",
        "forum": "Ouj6p4ca60",
        "replyto": "Ouj6p4ca60",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_7WZA"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_7WZA"
        ],
        "content": {
            "summary": {
                "value": "LLMs are good at auto-regressive sampling, as that is how they are defined and trained.  However, there are many types of inference queries can make LLMs more useful by allowing involved reasoning.  There are multiple examples where this involves sampling from intractable posterior distributions.  \n\nGFlownets (GFN) provide a way to fine-tune LLMs for more specific inference queries as it can tune the generative distribution to a non-next-token reward function.  This is particularly relevant as many current reasoning methods (e.g., chain of thoughts), can instead be thought of as alternative inference queries in a probabilistic model.  \n\nTo motivate the method, the paper illustrates that GFN, in contrast to PPO, can match a posterior distribution over random numbers, while PPO can only ensure that all the samples are valid, without ensuring that the distribution can match.  Supervised fine-turning also works here, but not when there are no samples available to match with, which is not always the case.  \n\nThe paper then goes over a variety of interesting intractable distributions that can now be sampled from with GFNs, allowing tasks like non-local low temperature sampling, infilling and constrained generation.  Note that each of these tasks requires separate and inference specific fine-tuning.  So while GFNs can sample high quality and diverse low temperature sentences by fine tuning for a given temperature, diverse beam search requires 5x more compute at inference time, but also doesn\u2019t require retraining.\n\nThe paper also shows how to use variational EM to optimize the chain of thought reasoning to get the correct reasoning without providing additional training data for the reasoning.\n\nThe paper then demonstrates the empirical benefits of their approach in 4 experiments, low temperature sampling, infilling, subjectivity classification and solving arithmetic problems, in each case demonstrating their superior performance to good baselines."
            },
            "soundness": {
                "value": "4 excellent"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "4 excellent"
            },
            "strengths": {
                "value": "## Originality:\nThe paper seems to be a useful and novel contribution to the literature, namely the using GFNs to fine tune LLMs to solve formley intractable inference problems inside LLMs.  While the learning objective itself has been suggested before for LLMs, there does not appear to be any follow up work in applications like the low temperature sampling, infilling and learning chains of reasoning as in the current work.  It also appears to be a novel method for training chain of thought reasoning to arrive at a specific outcome.  \n\n## Quality:\nThe authors clearly reference the contemporary literature and they compare against suitable baselines in their experiments.  Overall, they have clearly demonstrated a variety of strong results against suitable baselines.\n\n## Clarity:\nThe paper is clearly written and structured in an easy to follow manner.  The descriptions of the methods and experimental setups are complete enough that the results can easily be reproduced by other interested parties.\n \n## Significance:\nLLMs are intrinsically highly significant at the moment and contain a huge amount of relevant information about the world which can't always reliably be extract out, so better methods to run interesting queries on them will have a practical effect. After all, they demonstrate that by this fine-tuning approach they can extract more valuable information from the same LLM, requiring only (presumably) extra inference time work not more data.   On the more theoretical level they demonstrate that GFNs can useful scale to large models, motivating further explorations of such methods in the current era of large models.\n\nAlso, in particular, learning better chains of reasoning could in particular have many interesting planning and reasoning applications, which could be unlocked with future research."
            },
            "weaknesses": {
                "value": "The datasets are small, and the inference only involved fine-tuning vs. training from scratch, which may unlock entirely different and interesting new global solutions.  This is an understandable limitation, but a more full exploration (which can be tackled as future work) might extend the power and reach of their method.  \n\nOne of the central pieces, the learning objective, has already been derived in a different soft-RL Q learning context, as pointed out by the authors.  There doesn\u2019t appear to have been further explorations of downstream applications as performed in the current work however.  \n\nTheir method requires fine-tuning for different queries/inference problems.  It would be interesting to see if instead it would be possible to have a single network (as they suggest in future work) that can answer many different types of queries."
            },
            "questions": {
                "value": "What do the reference in-fills look like for the other distributions?  It only shows the GFlowNet examples in Table B.3.\n\nWhat\u2019s the speed of learning/convergence relative to, e.g. supervised fine tuning?  Is the inference unstable/need many restarts, etc?  How about compared to PPO training?\n\nDid the authors fine-tune separately for every temperature, or was this done in the style of an amortized sampler where you can dynamically specify the target temperature at run time?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission1391/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698699162236,
        "cdate": 1698699162236,
        "tmdate": 1699636066852,
        "mdate": 1699636066852,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "qLYtirtCmU",
        "forum": "Ouj6p4ca60",
        "replyto": "Ouj6p4ca60",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_Vqdw"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_Vqdw"
        ],
        "content": {
            "summary": {
                "value": "This paper investigates the challenge of sampling latent variables from a posterior distribution in large language models (LLMs), where the latent variables might take the form of prompts, reasoning chains, etc. However, sampling from a posterior distribution is typically intractable. To address it, the paper proposes to use generative flow networks (GFlowNets), which sample a composite object (a sequence of tokens) via a sequence of constructive steps, with a probability proportional to a reward function (the product of the likelihood and the prior, leading to the joint distribution). This is different from MLE-based fine-tuning and reward-maximization-based fine-tuning, which tend to make the learned distribution more concentrated on one or few modes, potentially leading to incorrect outputs. In contrast, Bayesian inference aims to learn a distribution that encompasses all possible outputs, thus promoting diversity and preventing from overfitting to a wrong target. The authors used a modifed version of the SubTB training objective for fine-tuning and their experimental results demonstrate the effectiveness of GFlowNets-based fine-tuning in improving text generation and reasoning tasks."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "### Motivation:\n\nOne limitation of existing fine-tuning techniques, i.e., MLE and reward maximization - the learned distribution will end up focusing around one or very few outputs, due to the nature of maximization. If the wrong one was picked up, the consequence could be catastrophic. This is where the Bayesian posterior comes in - it can contain all the information over the potential outputs. However, sampling from a posterior distribution is typically intractable. GFlowNets have recently been shown to approximate a complicated multimodal distribution well. To this end, GFlowNets are used to sample composite latent variables via a sequence of steps, with a probability proportional to $p_{LM}(XZY)$ or $p_{LM}(XZ)$.\n\n\n### Originality:\n\nThe proposed GFlowNet fine-tuning builds on GFlowNets and Bayesian posteriors. The authors utilize GFlowNets as an amortized inference machine, to sample composite latent variables from an intractable posterior distribution in LLMs. This is different from MLE-based and reward-maximization-based fine-tuning techniques. The resulting GFlowNet fine-tuning shows good performance on various tasks. The originality is good.\n\n\n### Clarity:\n\nThe paper is well-organized."
            },
            "weaknesses": {
                "value": "Please see the following questions."
            },
            "questions": {
                "value": "## Amortized inference with GFlowNet Objectives\n\n- GFlowNets start with an empty string and add one token at a time in a left-to-right manner. Depending on different tasks, $Z$ should be generated conditional on $X$ or $X, Y$? Here, $X$ or $X, Y$ is omitted?\n\n### Learning objective\n\n- Besides that 1) the ability to avoid to estimate the flow function $F$; 2) SubTB can have a better bias-variance trade-off in GFlowNet training, are there any other benefits to use a modified version? Also, did you try the conventional SubTB objective with the flow function considered?\n\n- Did you consider the hyper-parameter $\\lambda^{j-i}$ over incomplete trajectories with variable lengths $0 \\leq i < j \\leq n+1$, like SubTB($\\lambda$)?\n\n- Given that the generation order is fixed (i.e., left-to-right), it results in $P_{B} = 1$. For readers who might be unfamiliar with GFlowNets, it might be helpful to include an explanation or mention $P_B=1$ somewhere in the paper to ensure accessibility for all readers?\n\n### Parameterization, amortization, and generalization\n\n- $R(Z) = p_{LM}(XZY) \\propto p_{LM}(Z | X, Y)$ --> should be $p_{LM}(Z | X, Y) \\propto R(Z) = p_{LM}(XZY)$?\n\n\n## Empirical results\n\n- How to understand GFlowNet fine-tuning and supervised fine-tuning solely? The former is to train the LM with Eq.3, while the later is to train the LM by maximizing $\\log p_{LM}(XZY)$ with $Z$. Supervised fine-tuning corresponds to the variational EM - first update GFlowNet polices and then LM pamemters with $Z$? Thus, supervised fine-tuning should already include GFlowNet fine-tuning?\n\n- In Table 3, GFlowNet fine-tuning + supervised fine-tuning was considered. Then why not to consider it as well in Table 2 & 4?\n\n### 4.1 Sentence continuation - task description\n\n- $R(Z) = p_{LM}(Z | X)^{\\frac{1}{T}}$ --> should be $R(Z) = p_{LM}(XZ)^{\\frac{1}{T}}$?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission1391/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698837095195,
        "cdate": 1698837095195,
        "tmdate": 1699636066789,
        "mdate": 1699636066789,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "H7Xo9kzIBm",
        "forum": "Ouj6p4ca60",
        "replyto": "Ouj6p4ca60",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_H3x9"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_H3x9"
        ],
        "content": {
            "summary": {
                "value": "This paper presents a new technique for fine-tuning LLMs, to perform amortized inference in probabilistic models (also defined using LLMs). This enables tuning LLMs for more interesting objectives than traditional RL or supervised fine-tuning techniques. The authors present several examples of such objectives: optimizing chain-of-thought reasoning so that it more often leads to the correct answer, optimizing for useful tool use, infilling plausible middles of stories with beginnings and ends, and whole-sentence temperature sampling for higher-quality sentence completion. In each, the proposed method is shown to outperform baselines."
            },
            "soundness": {
                "value": "4 excellent"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "4 excellent"
            },
            "strengths": {
                "value": "This is a very strong paper. Some of its key strengths are:\n\n* There is a very nice, pedagogical discussion of why it may be desirable to sample intractable distributions, which provides great motivation for the proposed approach. The random-number example in Section 2 also nicely illustrates the limitations of reinforcement learning.\n\n* Several researchers have proposed using \"online\" (i.e., test-time) inference methods to sample LLM posteriors, but those methods are only appropriate in settings where the increased cost of exploring multiple samples at test time is not prohibitive. This paper's technique enables offline training, and produces a network that can generate approximate posterior samples directly at test time. What's more, even in settings where test-time inference *is* feasible, Monte Carlo algorithms could use the amortized networks introduced by this paper as proposals, to rapidly speed convergence in cases the amortized networks handle well, and more gracefully handle cases where the amortized networks do not generalize.\n\n* Unlike some formulations of amortized inference, which require exact posterior samples to fine-tune on (e.g., https://arxiv.org/abs/1610.05735), this paper requires only the ability to evaluate the unnormalized posterior (the reward $R$). \n\n* The experiments suggest that this technique is applicable to a compellingly broad range of tasks. The experiments showing that the technique can help train LLMs to perform better reasoning over latent variables (the thoughts in chain-of-thought, or the tool invocations in tool-use applications) are particularly nice.\n\n* The writing is clear (if somewhat terse) throughout."
            },
            "weaknesses": {
                "value": "Overall, I really like the paper, but I do think there are a few places it could be improved:\n\n1. **Limited discussion of the training objective and its relationship to possible alternatives.** The training objective is introduced very briefly and without much intuition. I realize that there is an extensive literature on training GFlowNets and there is not space to go into full detail here. But are there reasons that this objective (among many other GFlowNet objectives) was particularly well-suited to the language modeling case? Why GFlowNets at all instead of e.g. reweighted wake sleep (a common method for amortizing intractable posterior inference)? How sensitive is performance to the distribution you use to generate training trajectories? How important is the replay buffer, and how is it populated? In fairness, I am not sure how many of these questions need to be addressed in a short conference paper.\n\n2. **Limited discussion of the limitations of the proposed technique.** Ultimately, the training method given here is a mostly-on-policy reinforcement learning method. A key challenge for such methods is exploration -- finding high-reward samples to reinforce. I would have appreciated more discussion of the sorts of posterior inference tasks that are and aren't likely solvable with the proposed techniques (at least without further innovations), possibly along with potential mitigations for these weaknesses.\n\n3. **Metrics for infilling.** I had reservations about some of the metrics used to evaluate the proposed approach, in particular for the story infilling task. It is unclear that measuring similarity to a single reference sentence is very meaningful--especially since a purported strength of the method is sampling the full posterior. It would be nice if (randomly selected) qualitative examples were presented for all baselines. It may also be worth considering an automated evaluation of the coherence of the resulting story (e.g., by asking GPT-4 to rate coherence). Despite the many (valid) critiques of such LLM-powered evaluations, I do think they are at least a better fit for creative coherent generation tasks like this one than metrics like BLEU."
            },
            "questions": {
                "value": "# Questions\n\n* Around how long (in wall-clock time) does it take to LoRA fine-tune a GFlowNet on your tasks, e.g. for a 6B-parameter model?\n\n* In Table 3, how were Test Accuracy numbers in the final row (\"+ Supervised Fine-Tuning\") generated? Were 10 samples of Z taken from the fine-tuned model, and aggregated via voting? Or are the Z samples still generated from q_{GFN} but now completed with Y drawn from the fine-tuned LM? Or is there no longer a voting procedure?\n\n* In principle, for tasks like story infilling, supervised fine-tuning (SFT) should be optimizing the same architecture as the GFN for an objective that has the same optimum (i.e., SFT is also a distribution-matching objective, where the optimum is the intractable posterior). Qualitatively, how do the samples from the SFT baseline look? (I think it would be nice to add them to Table B3 if possible!) If they are noticeably worse than the GFN samples, what would you attribute that to? Also: for SFT and for the \"just prompt the model to infill\" baseline, do you start with the base language model, or the reward language model that you fine-tuned with stories?\n\n* What is \"reward temperature horizon\"? What are the P_F min and max temperatures? (I saw that reward temperature was annealed during training, but did not see a reference to annealing the QFN's own temperature.)\n\n* You write on p23 that the reward model could often not distinguish between good and bad rationales. Does this mean that, given a prompt (e.g.) Z=\"..., 1 + 4 = 5. The answer is:\", the reward model assigns roughly equal probability to (a) the known correct answer Y from the training data (e.g., Y=14) and (b) the most-recently computed number (in this case, 5)? That's somewhat surprising to me!\n\n* For sentence continuation, do you see interesting pathologies at lower reward-model temperatures (e.g., bias toward very short completions, or very repetitive completions)?\n\n# Minor Comments\n\n* There are a couple points that I found confusing when first reading the paper, even though they are clarified later. \n\n  (1) The clause \"finding the most likely sequence continuation\" in the first paragraph was confusing. \"Finding likely sequence continuations\" is precisely what LLMs are trained to do, and would not seem to require intractable inference; I considered briefly that you might mean finding the literal maximum-probability sequence, but that also seemed wrong because I was expecting a list of posterior sampling tasks, not optimization tasks. Later I realized that you meant long-range (i.e., not per-token) reduced-temperature sampling, but this wasn't obvious from the intro.\n\n  (2) At multiple points you discuss chain-of-thought reasoning as an instance of intractable inference, with the formula P(Z | X, Y). But at test time, in chain-of-thought reasoning tasks, we do not *see* the answer Y, so it's not really a posterior sampling task. (If I give you only a single instance of a 'problem' in the chain-of-thought reasoning task, there is no clear MCMC target distribution you could specify over \"good chains of thought\" without already having access to the final answer Y. This is in contrast to the other tasks, like long-range temperature sampling, infilling, etc. where the reward $R$ can be evaluated at test time.)  After reading the whole paper, I have a clearer understanding of what it is you're doing in these (very neat) chain-of-thought examples. But their inclusion at the beginning of the paper, without sufficient explanation of how they work, makes it trickier to understand the proposed framework. Even later in the paper, there are two separate resolutions to the question of \"what to do without Y\" -- one is to use the (X, Y) pairs you have in order to generate Z's for fine-tuning (the \"EM\" idea), and the other is to train the GFN without access to Y, which could perhaps be interpreted as training it to do posterior inference conditioned on the event that the final answer is correct, rather than on a particular final answer.\n\n* The idea that fine-tuning to do better chain-of-thought reasoning might be viewed as a kind of EM was previously proposed by Dohan et al. (although not implemented).\n\n* At the bottom of p1, one of your citations is to a method that uses SMC, not MCMC, for which the notion of \"mixing between modes\" is not quite appropriate."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "10: strong accept, should be highlighted at the conference"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission1391/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission1391/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission1391/Reviewer_H3x9"
                ]
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission1391/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698889480346,
        "cdate": 1698889480346,
        "tmdate": 1699636066718,
        "mdate": 1699636066718,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "7T1yZ54H62",
        "forum": "Ouj6p4ca60",
        "replyto": "Ouj6p4ca60",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_ZdVU"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission1391/Reviewer_ZdVU"
        ],
        "content": {
            "summary": {
                "value": "Many applications of LLMs like text infilling and constrained generation requires probabilistic inference that is intractable for LLMs. E.g., for the task of text infilling we need to be able to compute the conditional probability p(text | prefix, suffix). The paper proposes to use tackle this problem by fine-tuning LMs with GFlowNet. Specifically, the author proposes to fine-tune LMs to approximate the desired conditional distribution, e.g., p(text | prefix, suffix) by mat. This paper conducted empirical evaluations on various benchmarks including text infilling and numerical reasoning."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "Empirical results on synthetic arithmetic reasoning benchmarks seem to be very strong."
            },
            "weaknesses": {
                "value": "Overall the paper is hard to follow: the authors provide little background on reinforcement learning and GFlowNet training. In particular, the authors use many terminologies without/before defining them clearly, examples include \u201cpolicy\u201d, \u201creward\u201d, \u201cmatching\u201d a target distribution, \u201crewarding all valid integers equally leads to an expected gradient of zero for policy gradient methods.\u201d\n\nIn section 2, by looking at the problem of using LLMs to generate random numbers between 0 - 100, the authors try to motivate the use of GFlowNet instead of PPO training. PPO training does not resolve the distribution skew because the reward function only considers whether the number lies between 0 - 100. One correct way to do it could be asking the LLM to generate a **sequence** of numbers sampled from 0 - 100 uniformly and assign a positive reward only if the frequency of the numbers are close to uniform. A major part of the introduction focuses on intractable posterior inference/conditional probabilities and the fact that Section 2 mentions nothing about them makes it hard to follow.\n\nIn section 3 the authors introduced some related problems in NLP that could potentially be solved by GFlowNet and in section 3.3 on page 5 that the authors finally describes GFlowNet and their training objective. What is the original subtrajectory balance objective? How do you modify it? What is the semantics of your objective function? Answer to these questions can help distinguish GFlowNet from other approaches from the methodology perspective.\n\nBesides, some important related works of the field are missing from Section 3:\n-for temperature scaling: \n[1] leverages importance sampling to fine-tune LM p(x) such that it approximates the desired distribution p(x)^{1/T}. Their approach suffer from various problems such that the variance of loss is high due to the exponent 1/T. Given that the authors study this empirically, does the GFlowNet objective also suffer from this issue? If so, how is it resolved?\n\n-for text infilling:\n[2] and [3] both studies the problem of text infilling where [2] adopted a fine-tuning based approach. [6] and [7] tackles this problem by training insertion-based language models.\n\n-for constrained generation:\n\n`Current approaches to the problem use tokenwise approximations (Liu et al., 2021) or various problem-specific beam search and local search techniques`\n\nOther than search-based approaches, frameworks like FUDGE [4] and NADO [5] trains auxiliary models (classifiers) and combine it with LMs to approximate the desired conditional distribution. \n\nTo summarize, GFlowNet seems to be a very very general framework that allows you to fine-tune an LM to approximate any distribution that is proportional to an arbitrary reward function r(x). Despite the experiment results showing advantages against vanilla baselines, the authors did not make a strong argument showing why GFlowNet would work better on these downstream tasks against existing approaches, including the ones mentioned above.\n\nThe main argument may be stronger/clearer if the authors focus more on the chain-of-thought reasoning part other than trying to provide a generic solution to all intractable inference for LMs.\n\n\n\n[1] Shih, Andy, Dorsa Sadigh, and Stefano Ermon. \"Long Horizon Temperature Scaling.\" arXiv preprint arXiv:2302.03686 (2023).\n\n[2] Donahue, Chris, Mina Lee, and Percy Liang. \"Enabling Language Models to Fill in the Blanks.\" Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics. 2020.\n\n[3] Zhu, Wanrong, Zhiting Hu, and Eric Xing. \"Text infilling.\" arXiv preprint arXiv:1901.00158 (2019).\n\n[4] Yang, Kevin, and Dan Klein. \"FUDGE: Controlled Text Generation With Future Discriminators.\" Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies. 2021.\n\n[5] Meng, Tao, et al. \"Controllable text generation with neurally-decomposed oracle.\" Advances in Neural Information Processing Systems 35 (2022): 28125-28139.\n\n[6] Lu, Sidi, Tao Meng, and Nanyun Peng. \"Insnet: An efficient, flexible, and performant insertion-based text generation model.\" Advances in Neural Information Processing Systems 35 (2022): 7011-7023.\n\n[7] Susanto, R. H., Chollampatt, S., and Tan, L. Lexically constrained neural machine translation with levenshtein transformer. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics (ACL), 2020."
            },
            "questions": {
                "value": "See above."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission1391/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission1391/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission1391/Reviewer_ZdVU"
                ]
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission1391/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1699149806197,
        "cdate": 1699149806197,
        "tmdate": 1700690413264,
        "mdate": 1700690413264,
        "license": "CC BY 4.0",
        "version": 2
    }
]