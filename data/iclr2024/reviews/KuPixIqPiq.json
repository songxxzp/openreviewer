[
    {
        "id": "PmWIUwC6XY",
        "forum": "KuPixIqPiq",
        "replyto": "KuPixIqPiq",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_AdYB"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_AdYB"
        ],
        "content": {
            "summary": {
                "value": "This paper presents a few-shot prompting based approach to help LLM's to self-correct errors made in code generation tasks. The approach works as follows:\n\nGiven a code task prompt, when LLM produces an output code, the system would first test the code on test input/output to decide if the code is correct or not. If the code is incorrect, the system call the LLM again to perform self-repair of the code, and produce a revised code as the output.\n\nThe paper various multiple ways to generate self-repair feedback: Simple (binary feedback), UT (when unit tests are available as part of task prompt), Expl (self-generated explanation of error) and Trace (execution trace when UT is available). The paper shows that different versions of feedback information have their own strength in different models and tasks; but in general, Expl shows most promising results, especially in Spider dataset.\n\nThe contribution of the paper is clear: it provides a comprehensive approach for leveraging self-repair to fix errors of code generation models, and perform ablation studies to compare their effectiveness in different tasks and different models."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "* systematic study of the effectiveness of self-repair\n* thorough evaluation on most recent models, tasks and variations of repair methods."
            },
            "weaknesses": {
                "value": "The paper right now has quite a big flaw in my opinion: the unfair comparison with existing techniques and baseline due to different access to test input/output pairs to decide correctness of code; thus, the reported improvement number on top of baseline or existing work is meaningless.\n\nMore concretely: the paper relies on an oracle to decide whether the code is correct or not to proceed into repair round. And this information is not part of the input from reranking / LEVER / Baseline / Reviewer (note: these baselines used test correctness at training time, but not in the evaluation inference time). As such, the self-repair framework has additional information gain to improve its performance (e.g., even if self repair only correct 1/100 case, it will be a straight improvement over the baseline). This different setup from existing work should be clearly mentioned, especially in the evaluation session; other readers could be confused on the reported \"accuracy up to 12%\" as claimed in the abstract.\n\nBecause I agree this paper is valuable to our community, I would like to propose two solutions to address this issue:\n1. In self-repair, instead of using test I/O to decide if the code would be feed into the self-repair process, the authors can let the model to decide correctness of the code itself with only unit tests (for MBPP and transcoder) and task prompt. In this case, the model may make mistakes in classifying correct program as incorrect program, but it does not use the external power of test oracle. This approach would make the technique directly comparable with existing approaches and baseline no-repair model, because all of these approaches have same access of information when running evaluation.\n\n2. Alternatively, modify the baseline to be able to access to the test oracle: when the baseline generate code that fails on test oracle, simply resample a solution. In this case, the baseline would also benefit from oracle, and the resample will be guaranteed to improve the test accuracy (but probably not as much as self-repair approach). This will also be a fair comparison and the numbers would be meaningful to the readers.\n\nAs of now, I don't think it is appropriate to accept the paper because the experiments are comparing apples to pineapples. But I would vote for an acceptance if this issue can be addressed given the paper is well written and innovative."
            },
            "questions": {
                "value": "Please address my concern on \"comparison with baseline\" clearly."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Reviewer_AdYB"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4261/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698451353518,
        "cdate": 1698451353518,
        "tmdate": 1700606555710,
        "mdate": 1700606555710,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "nAtrCKkwJH",
        "forum": "KuPixIqPiq",
        "replyto": "KuPixIqPiq",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_UhXy"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_UhXy"
        ],
        "content": {
            "summary": {
                "value": "This paper propose a method called self-debugging, which teaches a large language model to debug its predicted program via few-shot demonstrations.The intuition is that human programmers also write programs in an iterative way where they modify the code through debugging. Their method achieves state-of-the-art performance on several code generation benchmark."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The intuition and introduction of this paper is quite clear. The proposed method is simple, effective, and can be applied to any LLM model. Their method achieves promising performance improvement in code generation tasks."
            },
            "weaknesses": {
                "value": "1. Although the introduction of this paper is clear, the methodology part is not the case. There are many components in the proposed approach: code execution, code explanation, inferring code correctness, etc. Figure 1 is helpful but still not clear enough. It would be better if there is a diagram with concrete example in the main text.\n2. Although the paper claims that they improve sample efficiency, I am still doubtful about this as the self-debugging approach does require generating much more tokens for debugging. I think comparing different approaches by the average the number of tokens generated for solving each problem is more fair."
            },
            "questions": {
                "value": "1. How do you compare your approach to Reflexion [1]?\n2. The paper has shown that self-debugging is effective in fixing grammar and semantic error. Is it effective in fixing logic error?  For example, the original implementation is correct but does not actually solve the problem. Will self-debugging be able to identify and fix such type of error?\n\n[1] Noah Shinn, Beck Labash, and Ashwin Gopinath. Reflexion: an autonomous agent with dynamic memory and self-reflection. arXiv preprint arXiv:2303.11366, 2023."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4261/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698568312815,
        "cdate": 1698568312815,
        "tmdate": 1699636393504,
        "mdate": 1699636393504,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "n3hMAyMgy3",
        "forum": "KuPixIqPiq",
        "replyto": "KuPixIqPiq",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_hHB2"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_hHB2"
        ],
        "content": {
            "summary": {
                "value": "Authors propose Self-Debugging approach in which LLMs identify code generation mistakes by investigating the execution results and explaining the generated code. This approach can improve code generation quality. Authors have performed experiments on several code generation benchmarks."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "- Proposed Self-Debugging approach based on code self-explanation ( rubber duck debugging ) and test execution result investigation.\n- Some improvement over baseline results."
            },
            "weaknesses": {
                "value": "- Improvement over baseline for Spider benchmark is only 2-3% which is not shown to be statistically significant. It could be accidental result of prompt change.\n- Same issue with code explanation without debugging for TransCoder and MBPP. \n- It seems that Self-Debugging without unit tests executions has very limited and possibly statistically insignificant improvements. \n\nThe following weaknesses have been fixed in the paper update by the authors:\n- Section 4 is very hard to read. It constantly refers to Appendixes. Even with limited space, it is possible to present material much better so that paper would be self-contained and would not require readers to read appendixes to follow a whole section 4. In my opinion, if this is not fixed, this is a very serious issue with the paper.\n- There are presentation issues with result tables. See Questions.\n\nI have increased my rating from 3 to 5.\nBased on further responses from the authors, I increased my rating to 6."
            },
            "questions": {
                "value": "- In table 1, what does line \"Codex\" represent? It is in the section \"Self-Debugging (this work)\", but the result is different from other lines in Self-Debugging section. Your paper does not explain what this line shows. Is this baseline without Self-Debugging techniques? If so, why is it presented in Self-Debugging section?\n\n- In table 2, Codex results for Spider correspond to Codex results for Spider in Table 1. However, Codex results for MBPP do not correspond to Codex results for MBPP in Table 1. Why?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Reviewer_hHB2"
                ]
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4261/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698727259105,
        "cdate": 1698727259105,
        "tmdate": 1700700938818,
        "mdate": 1700700938818,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "rrPe5x9VYv",
        "forum": "KuPixIqPiq",
        "replyto": "KuPixIqPiq",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_urzn"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4261/Reviewer_urzn"
        ],
        "content": {
            "summary": {
                "value": "This work proposes a novel approach called SELF-DEBUGGING that enables a large language model to debug its own predicted program via few-shot demonstrations. The approach achieves state-of-the-art performance on several code generation benchmarks, including the Spider dataset for text-to-SQL generation, TransCoder for C++-to-Python translation, and MBPP for text-to-Python generation. The paper also discusses the possibilities of leveraging feedback messages and reusing failed predictions to improve the sample efficiency."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "1. Proposing a novel approach called SELF-DEBUGGING that enables a large language model to debug its own predicted program via few-shot demonstrations.\n2. Demonstrating that SELF-DEBUGGING can teach the large language model to perform rubber duck debugging, i.e., identifying its mistakes by investigating the execution results and explaining the generated code in natural language.\n3. Achieving state-of-the-art performance on several code generation benchmarks, including the Spider dataset for text-to-SQL generation, TransCoder for C++-to-Python translation, and MBPP for text-to-Python generation.\n4. Discuss the ethics of using large language models for automated code generation and the importance of analyzing their capabilities and limitations before deploying them for real-world programming applications."
            },
            "weaknesses": {
                "value": "I do not find obvious weaknesses in this work. I only have a concern about the proposed approach. Since I'm not an expert in the code generation field, please correct me if I have some misunderstandings. This kind of \"self-debug\" or \"self-refine\" requires LLMs to inspect their own outputs based on the unit test results and generate some explanation in an autoregressive manner. So a concern is the additional latency in the inference time, especially for extremely large language models. This extra computational time is not reported or discussed in this paper."
            },
            "questions": {
                "value": "None"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission4261/Reviewer_urzn"
                ]
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4261/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698808875189,
        "cdate": 1698808875189,
        "tmdate": 1699636393323,
        "mdate": 1699636393323,
        "license": "CC BY 4.0",
        "version": 2
    }
]