[
    {
        "id": "duqgzxDyd9",
        "forum": "1gkePTsAWf",
        "replyto": "1gkePTsAWf",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission284/Reviewer_UnQ9"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission284/Reviewer_UnQ9"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes using GPT models for self-improving an improver code that improves the solution code for five different problems, given a utility function for each problem. The aggregated utilities measure the performance of the solutions of each problem and serve as the signal for the improver to improve itself. The improver code improves itself a few times and is used to improve the solution codes. The results demonstrate that GPT-4 proposes and implements self-improvement strategies such as beam/tree search, genetic algorithm, and simulated annealing. Results using GPT-4 demonstrate a diminishing increase in aggregated (meta) utility within four iterations, whereas results using GPT-3.5 demonstrate decreasing aggregated utility."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The paper is well-written, and the problem formulation and method are precise.\nAt a high level, the formulation is elegant, functional, and novel in the context of GPT's.\nThe paper clearly distinguishes between improving a solution and improving an improver (scaffolding) that improves a solution.\nThe work addresses safety, adding sandbox safety measures."
            },
            "weaknesses": {
                "value": "The improver's signal for improvement is a real value, which is the aggregation of utilities of solutions to different problems.\nMoreover, the utilities of the solution of each problem may be on different scales, and they are linearly combined.\n\n1. Different tasks have utilities with different values and scales.\n2. Aggregating utilities of different tasks to a single number is a minimal input to the improver and may be an insufficient signal for improvement (just one number in each iteration and previous improver code).\n3. Tasks may not be representative, and their selection is unclear.\n4. Each utilities instantiates data for the problem, for example maxcut instantiates 3 random graphs with 300 nodes each. \nIt's unclear how the data and instances are selected.\n3 and 4 together: how many tasks, data instances, and their types are required?\n5. Figure 4a is missing iterations beyond T=4.\n6. The approach assumes many solution variants are generated for each task, and it's unclear how much of the \"improvement\" is due to increasing the number of variants. \n7. It's unclear how much of the \"improvement\" is due to GPT-4 being a generic language model that may improve each selected task rather than generic recursive self-improvement.\n8. The paper is well written, and the presented formulation is elegant at a high-level, however, it is missing key details of self-improvement."
            },
            "questions": {
                "value": "1. How sensitive are the results to changes in the prompts?\n2. How does going wider (range of tasks and data) effect going deeper (iterations of recursive self improvement)?\n3. Will the link to the repo become available?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission284/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1697645237416,
        "cdate": 1697645237416,
        "tmdate": 1699635953952,
        "mdate": 1699635953952,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "YWLma5aNLI",
        "forum": "1gkePTsAWf",
        "replyto": "1gkePTsAWf",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission284/Reviewer_VZPP"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission284/Reviewer_VZPP"
        ],
        "content": {
            "summary": {
                "value": "The paper proposes a method that iteratively (meta-)optimises a program. At the beginning this program implements a simple optimisation heuristic through access to an LLM via an API and prompting the LLM for changes to the program that yield higher utility. The utility measures the performance of the program on some downstream optimisation task like 3SAT or Maxcut. The program is replaced with the output after running the program with its own code as input. The proposed method is tested with GPT-4 and GPT-3.5-turbo. Some of the programs that are found through this procedure mimic well known optimisation algorithms like genetic algorithms or simulated annealing."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "Prompting the LLM for better methods to prompt an LLM is a promising direction given the success of handcrafted prompt strategies like chain-of-thought."
            },
            "weaknesses": {
                "value": "It is unclear what the connection between the input program (initial_solution) and the output program (best_solution) is. Is the seed program more helpful than compared to prompting the LLM for a program that maximizes some utility (possibly with example programs that demonstrate the task, similar to the few-shot setting for LLMs)? I understand that the goal here is to design a method that can recursively improve itself, but the significance of the results seem questionable to me if it is possible to attain the same results with a conceptually simple prompt.\n\nThe experimental results are limited to GPT-4 and GPT-3.5-turbo, which are both closed source and AFAIK can change over time. This means that the results will likely not be reproducible. I'd suggest running some additional experiments with open source models that offer the possibility of reproducing the results.\n\nThe experiments are restricted to simple problem settings (albeit hard optimization problems) like LPN, 3SAT, or Maxcut. This is quite a restricted scope when comparing to claims such as \"... a method in which code that applies a language model to improve arbitrary solutions is applied recursively to improve itself.\" from the introduction. I would suggest to tone down the writing, especially in the introduction, as it currently to suggest a level of generality that is not support by experiments.\n\nConsidering that the STOP method manages to find well-known optimization algorithms like genetic algorithms or simulated annealing, I get the impression that all that is really happening here is that the LLM is prompted to return some known optimisation heuristic and adapt it to use LLMs. The recursive nature of STOP does not appear to be important here. Can the authors provide suitable ablations or baselines to show that recurrence is indeed important? This is also related to my first point."
            },
            "questions": {
                "value": "Why is it important to choose a less-well-known task as the meta optimization objective? Is the expectation here that GPT-4 has seen less training data on this topic?\n\nHow were the qualitative examples chosen? Always the final solution? Did the authors go through all generated programs manually and pick the ones that recognisably correspond to a known optimisation algorithm?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "2: You are willing to defend your assessment, but it is quite likely that you did not understand the central parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission284/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission284/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission284/Reviewer_VZPP"
                ]
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission284/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698844502404,
        "cdate": 1698844502404,
        "tmdate": 1700732344174,
        "mdate": 1700732344174,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "Thjn9tRh9F",
        "forum": "1gkePTsAWf",
        "replyto": "1gkePTsAWf",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission284/Reviewer_X5AY"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission284/Reviewer_X5AY"
        ],
        "content": {
            "summary": {
                "value": "The paper introduces the Self-Taught Optimizer (STOP), a framework that uses a language model to recursively improve code scaffolding  generation in a meta-learning paradigm. This paper demonstrates, across a variety of algorithmic tasks, STOP generates better code scaffolding in more iterations that brings better performance of downstream code. Moreover, several meta heuristics are discovered during the meta-optimization process. This paper further Investigates the potential of misuse of language models about how it circumvents safety measures and reward hacking."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "+ originality: this paper is the first to propose a meta-learning framework for optimizing code scaffolding, aiming at better performance of downstream tasks. \n\n+ significance: this paper takes a new and important perspective into revealing the power and potential misuse of large language model by querying the model to optimize the meta-heuristic of solving code tasks. though their current framework is not general to cover all tasks, their observation about reward hacking and sandbox circumvention is of great interest to the AI alignment community.\n\n+ clarity: their paper is easy to follow, with a high level schematic."
            },
            "weaknesses": {
                "value": "- missing comparison with two types of baselines, the one is human designed prompt structure such as Chain-of-Though, and Program of Thoughts. which one is better, the prompt structure found in their meta-learning paradigm or these human crafted ones? the other is heuristics for coding such as genetic algorithm. My question is given a downstream task, if STOP can find better meta-heuristics than the common ones?"
            },
            "questions": {
                "value": "- is there any creativity in the meta-heuristics found by the language model? such as the combination of genetic algorithm and beam search? It should be of great interest to the community if the language model can find the new or more task-specific meta-heuristics, which brings better performance than human crafting."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission284/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698921909965,
        "cdate": 1698921909965,
        "tmdate": 1699635953812,
        "mdate": 1699635953812,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "H3odXorbuJ",
        "forum": "1gkePTsAWf",
        "replyto": "1gkePTsAWf",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission284/Reviewer_yFD6"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission284/Reviewer_yFD6"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes a meta-learning algorithm in the context of code generation with large language models (LLM). The algorithm has two components: an outer algorithm/ meta-algorithm (the self-improver algorithm) and \nan inner algorithm (the improver algorithm). The inner algorithm (or improver algorithm) optimizes code for downstream tasks by prompting an LLM. The proposed meta-algorithm maintains a single inner algorithm    \nat each iteration instead of a population. In each iteration, the meta-algorithm (the self-improver algorithm) \npasses the optimization goal, and constraints such as limits on runtime and model queries. The meta-algorithm measures the performance of each improver on the downstream task and returns the best solution (improver) based on a meta-utility function."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "4 excellent"
            },
            "strengths": {
                "value": "The key strengths of this research are, first and foremost, the demonstration of a proof-of-concept for using LLMs for self-improvement and meta-learning. \n\nSecond, the strength of the paper is that LLMs can optimize code which includes the model itself. This approach demonstrated by LLM is similar to evolutionary algorithms without any exposure in \nthe training data.\n\nThird, the impact of this research is profound, because it demonstrates that LLMs are able to self-improve themselves in contrast to Reinforcement learning from the Human Feedback approach. This research has the potential to have a significant influence in areas where the input data is continually changing, such as education and health. \n\nFourth, the self-improving behavior can be attributed to emerging capabilities in LLM [1], where \"...these tasks are not explicitly included in pre-training\" (See Section 5 of Reference [1]) and can be observed only on sufficiently large models.\nFuture researchers can explore more in this direction.\n\nReferences\n1. Wei J, Tay Y, Bommasani R, Raffel C, Zoph B, Borgeaud S, Yogatama D, Bosma M, Zhou D, Metzler D, Chi EH. Emergent abilities of large language models. arXiv preprint arXiv:2206.07682. 2022 Jun 15."
            },
            "weaknesses": {
                "value": "The base LLM has a huge importance on STOP's performance (Section 5.3)"
            },
            "questions": {
                "value": "Do the authors have thoughts how their proposed solutions can be used in meta-learning applications where the utility function may not be describle in natural language?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission284/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission284/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission284/Reviewer_yFD6"
                ]
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission284/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698956642657,
        "cdate": 1698956642657,
        "tmdate": 1699635953752,
        "mdate": 1699635953752,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "SCgnwUu2mw",
        "forum": "1gkePTsAWf",
        "replyto": "1gkePTsAWf",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission284/Reviewer_443q"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission284/Reviewer_443q"
        ],
        "content": {
            "summary": {
                "value": "This paper proposed self-taught optimizer (STOP), which is a nested-iterative method that uses a language model to improve itself, which is an \"improver\" that attempts to improve program solutions to certain tasks (e.g., learning parity w/ noise, 3-SAT). Experiments are conducted with GPT-4 and GPT-3.5 models, and the results show that GPT-4 is able to come up with methods such as beam search and genetic algorithms for the improver. On 5 different algorithmic tasks, STOP was shown effective in improving the original solutions."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "S1: The proposed method is interesting and the idea of having a formulation where the improver can improve over itself given a utility function is very cool.  \nS2: A clear discussion of the limitations and concerns for STOP is presented, which is very helpful.  \nS3: A number of (i.e., five) tasks are considered in the experiments, and the proposed methods yield non-trivial improvements on all of them."
            },
            "weaknesses": {
                "value": "W1: My main concern about this work is missing some of the important results for us to understand how well the proposed method works. More concretely, \n* How much of improvements each iteration made. For example, it was mentioned that the improvements may not be monotonic, (which implies non-greedy, global optimization), while such improvement curves will be very interesting to look at, only one example of such is shown in Fig 4.\n* Quantitatively, the differences between the results with GPT-4 and GPT-3.5. It was only briefly mentioned in 5.3 about some of the pitfalls of GPT-3.5 that are not observed for GPT-4, but some concrete comparison would be helpful in understanding how applicable is STOP on other models.  \n\nW2: The writing of the paper could be improved. While I appreciate the authors explaining many of the design choices and giving alternative solutions that are not eventually part of the proposed framework (e.g., all those \"one can/may ...\"), it inadvertently breaks the flow of the paper, making it quite hard to follow sometimes.  \nW3: I am not entirely convinced about the \"novelty\" of the improver program generated by GPT-4. Though the authors attempt to compare the proposed methods to some recent research that happened after the knowledge cutoff time, the ideas behind those improver programs (e.g., beam search, genetic algorithm, etc) are not new at all.  \nW4: Missing related work. A couple of more related works for (self-)improving code generation with LLMs could have been mentioned, for example [1] and [2]  \n\n[1] https://arxiv.org/abs/2302.07867  \n[2] https://arxiv.org/abs/2304.05128"
            },
            "questions": {
                "value": "Q1: Is the Maximizer formulation used in the final proposed pipeline? If so, is the notation consistent with the $M$ used in section 5.1?  \nQ2: Are there any baseline methods (even heuristics) that you can compare the proposed method to? For example, iterative prompting without using a program as an improver?  \nQ3: Can you comment on how difficult is it for the model to generalize to the improver solutions, given that it must have seen things like beam search, genetic algorithms, etc during training?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 5,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission284/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1699130411656,
        "cdate": 1699130411656,
        "tmdate": 1699635953686,
        "mdate": 1699635953686,
        "license": "CC BY 4.0",
        "version": 2
    }
]