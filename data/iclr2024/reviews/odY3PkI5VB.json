[
    {
        "id": "D4kHczmbOQ",
        "forum": "odY3PkI5VB",
        "replyto": "odY3PkI5VB",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission6144/Reviewer_awpo"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission6144/Reviewer_awpo"
        ],
        "content": {
            "summary": {
                "value": "The paper introduces STAR, a hierarchical reinforcement learning algorithm. The main components of STAR are: the Navigator that selects high-level abstract subgoals, the Manager that chooses single-state subgoals that lead towards the Navigator's abstraction, and the Controller that executes low-level actions. During training, the representations are refined to better relate to the environment dynamics and agent capabilities. The authors test the performance of STAR in AntMazes."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "The high-level idea of the algorithm is presented clearly, which makes the paper easier to follow. The theoretical results are coupled with their intuitive description, which despite the complex notation makes them easier to understand."
            },
            "weaknesses": {
                "value": "I doubt that the presented results are practical. My main concern is that the _Approximating the reachability property_ step seems very costly. It's a pity that the authors didn't describe this essential part in more detail, leaving only the reference to other papers (are they published anyway?). Furthermore, how do you estimate the reachability for _all states_, provided that the state space is continuous? And I think that the reachability approximation model should be analyzed as well.\n\nThe practicality issues could be addressed by adding a wall-time comparison between the presented methods. An additional discussion on the compute utilization would do as well.\n\nI acknowledge the theoretical results, although I think that Section 4 can be restructured to be more interesting to the reader. The crucial element of this analysis is clearly Theorem 2. I suggest giving it more space and discussion. I suggest moving Theorem 1 and Lemma 1 to the appendix, as they serve only as a tool for proving Theorem 2 (as long as they are not referenced in the experiments). I would like to read here a discussion of the importance of Theorem 2, including: why does it make your method sound (recalling that you prove there exist _some refinements_, not necessarily the one you actually do in the algorithm, right?) and why it is not trivial to construct such an abstraction (e.g. by partitioning the space into any $\\varepsilon$-diameter sets).\n\nOverall, the paper lacks quite a few details, which makes it hard to understand the contribution. Since the full algorithm consists of many parts, it should be described much more clearly, not only the high-level idea. I suppose that addressing my concerns and questions should help.\n\nI am willing to increase my rating if my concerns are addressed."
            },
            "questions": {
                "value": "How do you estimate the reachability for _all states_, provided that the state space is continuous?\n\nWhat is the computational cost of refining the abstractions?\n\nHow are the abstractions represented? I bet the sets are not represented explicitly.\n\nWhy is the Navigator useful? Why not just leave the Manager and Controller? What are the theoretical and practical advantages of introducing the Navigator? Especially, given that in the end there are only several abstractions, as you show in the experiments.\n\nWhy does Theorem 2 make your method sound (recalling that you prove there exist _some refinements_, not necessarily the one you actually do in the algorithm, right?), and why it is not trivial to construct such an abstraction (e.g. by partitioning the space into any $\\varepsilon$-diameter sets)?\n\nIt's a pity that by introducing the Manager you lose the abstraction of the Navigator. Can you instead of sampling a single subgoal, sample a few subgoals and somehow aggregate the low-level policy predictions to reach any of them?\n\nWhy are the proposed rewards sound? Without any justification, they look quite arbitrary.\n\nAre there any implicit properties of the abstractions that you learn? In the experiments, they seem to be always box-shaped and disjoint, is it always the case?\n\nIs the splitting operation the only way to refine the abstraction? Can you also incorporate the join operation if the abstractions are too fine? Is being too fine a problem in any case? Is $\\mathcal N=(x\\mapsto \\\\\\{x\\\\\\})$ always a good abstraction?\n\nHow do you handle the initial stage, when hardly any subgoal is reachable (because the agent can barely move)? Is there a danger that it will shatter the goal space arbitrarily before becoming capable of acting?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission6144/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission6144/Reviewer_awpo",
                    "ICLR.cc/2024/Conference/Submission6144/Senior_Area_Chairs"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission6144/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698696833155,
        "cdate": 1698696833155,
        "tmdate": 1700566163972,
        "mdate": 1700566163972,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "ginifn37M2",
        "forum": "odY3PkI5VB",
        "replyto": "odY3PkI5VB",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission6144/Reviewer_ep9K"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission6144/Reviewer_ep9K"
        ],
        "content": {
            "summary": {
                "value": "In this paper, the authors introduce a groundbreaking three-layer Hierarchical Reinforcement Learning (HRL) algorithm known as STAR, designed to tackle complex tasks by combining spatial and temporal abstractions in goal representation. Goal-conditioned HRL has proven effective in breaking down challenging tasks into simpler subtasks, but previous methods encountered limitations when dealing with environments characterized by intricate state reachability relations. STAR, on the other hand, addresses these challenges by introducing both temporal and spatial abstractions, presenting a novel approach that bridges the gap between these two essential aspects of HRL.\n\nAdditionally, they provide theoretical insights into the regret bounds of learned policies. Furthermore, the authors empirically demonstrate the power of STAR in complex continuous control tasks, showing its ability to scale to environments with intricate dynamics. This work is said to contribute three elements to the field of HRL: the novel STAR algorithm with its three-layer hierarchy, the theoretical justification for reachability-aware goal representations, and empirical evidence of STAR's effectiveness in combining temporal and spatial abstractions to handle complex tasks. These contributions position STAR as a solution for addressing the challenges posed by complex, high-dimensional environments in reinforcement learning."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "- STAR performs online learning of both policies and representations. \n- Using reachability provides meaningful goal representations by exploiting the dynamics of the environment, and allows scaling up to complex continuous state space control problems.\n- Theoretical contributions: The authors attempted to define a bound on the sub-optimality of policies trained with reachability-aware abstractions, reinforcing their approach's theoretical basis, and providing support for the progressive refinement of these abstractions during the learning process. (Question 3)\n- Reasonable choices of environment settings and baselines to evaluate the proposed approach.\n\nWriting skills: \n- In addition to explaining the intuition behind the proposed solution, the authors have nicely put it into a mathematical description that is also easy to follow and understand."
            },
            "weaknesses": {
                "value": "Majors:\n- The results have been plotted only for 5 runs. Usually, this is not enough number of runs. Especially, in AntMaze and AntMazeCam where the results of HIRO and HRAC are close to STAR. \n\n- It is not clear what a \"Complex\" continuous control task means. How to measure the complexity? Is it only related to scaling up the dimensionality, or is it also affected by distribution changes or even complications in the environment? \n\n- It seems important to have a deterministic environment. The paper mentions that STAR is able to perform online. I assume it might be able to adjust to the stochasticity of the environment with some tricks.\n\n- I suspect this approach might suffer from high variance during learning due to the high non-stationarity between multiple layers of hierarchical agents. However, I believe there exist some tricks to alleviate the problem. For example, define the reachability for a backward model, so that it starts from the Goal set that the task goal $g*$ belongs to, and find all groups of states that FROM them, $g*$ group is reachable. This way, we might not need to go over all G_0 to G_n subset of abstract goal sets visited in an episode, but just visit the ones that lead to the G* set.\n\n- I think there are two types of policies based on the way you are using them in this paper. One type of policy maps state to state (maybe a policy-conditioned transition probability?), and goals can be sampled from them; the other type is the common concept of policy in RL, where maps state to actions. See Q1 and Q6, please. \n\n\nMinors:\n- imprecise usage of motifs: see questions 1 for example\n- And some minor typos like: e.g., in Conclusion, ln 2: 'spactial' instead of 'spatial*', in 5.3: 'In Fig.4 we we',\n\nAll in all, I have doubts about the soundness of the conclusions and proofs in the paper. I would be happy to change my rating if I learn more about my questions. I see the value of the core idea of this work."
            },
            "questions": {
                "value": "1- In section 3-1, at the end of manager and navigator definitions, what do you exactly mean by $Gt+k \u223c \\pi_{Nav}(s_t, g\u2217)$ and $g_{t+l} \u223c \\pi_{Man}(st, G_{t+k})$? Is not '~' used to show sampling from a distribution everywhere else in the paper? I assume it is only meant to say the abstract goal set and subgoals are conditioned on $\\pi_{Nav}$ and $\\pi_{Man}$, respectively.\n\n2- How is the composition of $\\pi_{Man}$ and $\\pi_{Cont}$ to generate $\\pi_{low}$? \n\n3- How do you initialize $N$ and a state set $G$ of interest to solve the task? Is there a measurement for that or is it randomly chosen based on $pi_{nav}$? If it is based on $pi+{nav}$ behavior, how do you deal with the high variance during training? Especially when the dimensionality of the environment increases, variance exponentially grows. \n\n4- The Manager's reward can help in simple cases to learn how to sample subgoals that help the agent reach Gt+k. But if there are fixed randomly shaped barriers in an environment, is this still working? Planning might help with such cases. I think it is important to design the Manager's reward carefully based on the environment's dynamics. \n\n5- Are all the proofs in section 4 novel, or did they exist in previous work (e.g. in GARA or Liu 2021)?\n\n6- \"....  $g \u223c \\pi^\u2217_{high}(s, g^\u2217)$ that samples $g \\in S$, and a low-level policy $a \u223c \u03c0^\u2217_low(s, g)$ that samples actions $a \\in A$\", how come that both actions and goals are sampled from policies?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission6144/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission6144/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission6144/Reviewer_ep9K"
                ]
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission6144/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698806775922,
        "cdate": 1698806775922,
        "tmdate": 1700843534863,
        "mdate": 1700843534863,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "HRQDbZorve",
        "forum": "odY3PkI5VB",
        "replyto": "odY3PkI5VB",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission6144/Reviewer_L6eb"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission6144/Reviewer_L6eb"
        ],
        "content": {
            "summary": {
                "value": "The paper addresses reachability-aware abstraction with temporal abstraction in goal representation for Hierarchical Reinforcement Learning. The proposed model, building from ideas described in GARA(Zadem et al., 2023), tries to overcome the limitations of SOTA methods suffering from scalability when dealing with complex goals or high-dimensional environments. \\\nSTAR introduces a three-agent architecture where every agent acts on distinct timescales with separate reward functions. The three layers feed different goal abstractions, subject to a reachability condition that refines them. Under the assumption that the environment is deterministic and the reward signal is bound in the environment, the authors show that the newly refined abstraction leads to a bound on the sub-optimality of the hierarchical policy.\\\nThe experiments are three of increasing dimensionality, namely bi-dimensional Ant Maze, tri-dimensional Ant Maze Fall, and five-dimensional Ant Maze Cam. Results show that the method proposed achieves a higher success rate in fewer time steps w.r.t. three recent HRL methods.\\\n In the appendices, the authors report proofs of the theorems appearing in the main text, details of the architecture, specifications of the experiments, and STAR pseudo-code."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "Originality:\\\nThe idea is original, as far as the reviewer knows, though limited to 'an extension of HIRO with the addition of a reachability component', as the authors note. The idea of abstraction based on a recursive splitting states partition to refine the agents' dynamics is new, and it ensures reachability for each agent at different levels of abstraction.\n\n\nQuality:\\\nAs far as the reviewer could check, the paper provides sound statements that support the implementation and the results. There are a few misprints that can be easily checked. \n  \nClarity:\\\nThe paper has a good structure; it is quite straightforward, and it explains nicely the problem and its collocation in the literature. The proofs in the appendix are reasonably clear, and the STAR pseudo code supports a good procedural understanding of the proposed method.\n\n\nSignificance:\\ \nThe experiments improve the results over the chosen HRL competitors.   The paper provides a contribution to HRL with a simple yet effective idea."
            },
            "weaknesses": {
                "value": "The goal space {\\mathcal G} and the state space S need to be more clearly stated. By definition, {\\mathcal G} is a partition of S, initially a coarse one. In B.1. of the Appendix, it is written that \"both the state and action spaces of the Navigator correspond to {\\mathcal G}\". \n\n What does not seem clear is:\\\n1. What are initially {\\mathcal G} and G_t.  Namely, if {\\mathcal G} initially contain the whole set S and not just some subset of S, then it is clear that the next partition is chosen from {\\mathcal G} or from the current G_t, otherwise, some clarification on the initial {\\mathcal G} might be needed, also for actions.\n2. The action space is said to be in {\\mathcal G}, and it needs to be explained if it is in {\\mathcal G} regarding the history or possible actions. Thus, it would be better to clarify R_{max}.\n\nMaybe I missed something, but I do not see how just assuming \n{\\mathcal N}(g_m), with the required conditions of Definition 3, cannot happen at a splitting point of a chosen  G_i that no state satisfies the reachability property. In particular, what is M in the last but one line on page 6? \n\nThe sentence on page 4, after the Navigator reward, \"The max in this reward is computed over observed exploration data\", is not entirely clear, \"observed\" in which sense? \n\nIn Definition 2,  after removing G_i from {\\mathcal G}_{\\mathcal  N} and adding G_1' and G_2', why is it necessary to specify that G_i is the union of the two after G_i has been removed and since only G_1' is chosen.\n\nIt seems that to do the exploration for checking the reachability property (page 5), the complete partition of the states is required, but how the exploration scales with the dimension of S is not discussed.  \nAppendix B.2 discusses the growing state space, but there is no discussion about the computational cost of the exploration given the state space partition.  \n\nFigure 4 is not so exciting; I do not see that \"progressively, the ant explores trajectories leading to the goal of the task.\" \nI found the representation of the exploration of the Ant Maze environment given in Nachum et Al. ICLR 2019 quite appealing. The pictures could be improved."
            },
            "questions": {
                "value": "1. Have STAR been experimented on different tasks than the maze?\n2. What network is used to train {\\mathcal F}_K?\n3. Why not compare with Nachum et Al. ICLR 2019?\n4. Have STAR been experimented with larger scale space than the example given?\n5. Can you estimate the trade-off between results and resources (e.g. memory usage, algorithm time cost, etc.) for STAR compared to the other methods?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission6144/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698870123369,
        "cdate": 1698870123369,
        "tmdate": 1699636665684,
        "mdate": 1699636665684,
        "license": "CC BY 4.0",
        "version": 2
    }
]