[
    {
        "id": "hrGHIwEN14",
        "forum": "tS3gexmfeT",
        "replyto": "tS3gexmfeT",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_dMCg"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_dMCg"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes FusionToken as an approach to improve the standard bpe tokenization and shows this approach improve tokenization efficiency: adding 1k additional vocabulary over 50K original vocabulary can achieve better tokenization efficiency (i.e., shorter sequence) than using 1M BPE vocabulary. The shorter sequences owing to the efficient tokenization can make inference faster, making language modeling efficient."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "The strengths of this paper are two-fold:\n\n- It shows promising results that adding 1k additional vocabulary can achieve better tokenization efficiency than 1M bpe tokenization in code data, demonstrating a potentially useful tokenization method for code language processing.\n\n- The evaluation on code generation benchmarks show that the tokenization can also improve language modeling performance in addition to inference efficiency."
            },
            "weaknesses": {
                "value": "Firstly, the details of the tokenization process are not entirely clear to me. For standard subword tokenization methods such as BPE or SentencePiece, these methods will not merge tokens that are separated by whitespace. For instance, in a sentence like \"I go to the park every day.\", these standard tokenization methods would not merge \"go to\" into a single token, nor would they merge \"every day\" into a single token, even if these phrases co-occur very frequently. I'm unsure if the method proposed in this paper follows the same principle as standard tokenization, refraining from merging tokens separated by whitespace. If this is the case, I have serious doubts about the claim that adding 1k vocabulary can outperform 1M vocabulary, as this seems unlikely from my understanding. I suspect that the method proposed in this paper might merge tokens separated by spaces, such as \"go_to\" or \"every_day\". If this is true, the comparison with the original BPE method seems unfair as they operate under different settings. Although I acknowledge that this approach may be more reasonable for code data, standard tokenization can also be easily applied to this setting. If so, the authors should provide more details and evaluations to demonstrate the superiority of their method.\n\nSecondly, this method seems to be only applicable to code data, as code data contains many very frequent patterns (e.g., \"int cnt = 0;\". If we allow merging tokens beyond spaces, we can have \"int_cnt_=_0;\" as 1 token). This is why it makes sense to do so in code data. However, in the Natural Language (NL) domain, this approach would likely result in a significant reduction in performance improvement and could cause semantic confusion due to the tokenization. Therefore, I question the universality of this method and wonder if the authors have conducted experiments on natural language datasets to validate this method.\n\nThirdly, the improvement of this tokenization method on the code dataset is not substantial, with only about a 10% increase. Recent works have used neural methods for context compression, achieving a compression ratio of 2-4 times. The authors should discuss and compare their method with these techniques to demonstrate the value of FuseToken."
            },
            "questions": {
                "value": "See weakness"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission8062/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8062/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8062/Reviewer_dMCg"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8062/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698530947289,
        "cdate": 1698530947289,
        "tmdate": 1699636997150,
        "mdate": 1699636997150,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "09m5wCXl4u",
        "forum": "tS3gexmfeT",
        "replyto": "tS3gexmfeT",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_z6Wp"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_z6Wp"
        ],
        "content": {
            "summary": {
                "value": "The paper introduces Fusion Token, a method that enhances the conventional Byte Pair Encoding (BPE) technique for data encoding in language models. Fusion Token utilizes a more aggressive computational strategy by expanding token groups from bi-grams to 10-grams. This approach results in a higher compression rate compared to regular BPE tokenization with a vocabulary of one million. The method demonstrates noticeable performance improvements and faster inference times, as it increases the data scope per compute unit and reduces the number of tokens per string. By dedicating more computational resources to the tokenizer building process, Fusion Token maximizes the efficiency and effectiveness of code language models as data compression engines."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "The paper exhibits strong motivation and is easy to follow. In the pursuit of achieving the highest data compression ratio, it is justified to expand token groups from bi-grams to 10-grams. Although the method is relatively simple, I believe it should outperform the naive BPE model in practical scenarios. However, the observed performance gap in the experiments is not as significant as described. Grouping frequent n-grams together in a straightforward manner can indeed increase the data compression ratio, even without complex theories or networks behind it."
            },
            "weaknesses": {
                "value": "1. My main concern with this paper is the performance of token fusion on natural language (NL) corpora. The authors have only conducted experiments using a code corpus, which is significantly different from NL. Code language typically consists of similar patterns, better structure, and limited vocabulary size, making token fusion more likely to be effective. However, NL content is more complex, with greater variability in content. Therefore, it is essential for the authors to conduct experiments on an NL corpus to demonstrate the effectiveness of their method. In my opinion, token fusion should have a greater impact on code than on language.\n\n2. The paper would benefit from conducting additional ablation studies in the experiments. I am particularly curious about the rationale behind selecting only 1K tokens in the paper. It would be interesting to explore the outcomes by varying the number of tokens, such as selecting 500 tokens, 2K tokens, or 4K tokens. This would provide valuable insights into how the performance changes with different token selections."
            },
            "questions": {
                "value": "1 How to decide the fusion token for different corpus? Why you choose 1K in your paper?\n2 Does token fusion cross whitespace?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "2: You are willing to defend your assessment, but it is quite likely that you did not understand the central parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8062/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698805972023,
        "cdate": 1698805972023,
        "tmdate": 1699636997036,
        "mdate": 1699636997036,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "NRdalUiUDS",
        "forum": "tS3gexmfeT",
        "replyto": "tS3gexmfeT",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_6zo7"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_6zo7"
        ],
        "content": {
            "summary": {
                "value": "This paper presents a fusion token method. Given a dataset, the proposed method integrates the newly constructed n-gram tokens derived from that dataset into the existing BPE vocabulary. These newly added tokens are treated as special tokens, taking precedence over existing tokens during inference. Experimental results demonstrate that these added tokens enhance the compression rate of the dataset and achieve higher scores on code generation benchmarks."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The paper underscores the significance of optimizing tokenization by analyzing the relationship between bits per word and bits per byte. The proposed method is articulated as an algorithm, facilitating comprehension."
            },
            "weaknesses": {
                "value": "The main concerns regarding this paper are:\n\n- A significant issue is the bias in the experimental setup. The existing BPE tokens are formed from data comprising multiple ``text\u2019\u2019s. However, the added tokens from Fusion token method become contingent upon the additional training data. Essentially, they hinge on $D$ provided as input in Algorithm 1. If the distribution of the training data and the data being evaluated are similar, the newly added tokens will notably influence the evaluation. In section 4.2, the training data was obtained from code written in various programming languages, with subsequent evaluations conducted on code benchmarks. Since both the dataset for building the additional tokens and the dataset for evaluation are similar, an enhanced performance over the conventional BPE is anticipated.\n\n- The aforementioned bias is also observed in Table 1 and Figures 2(a) and 2(c). Tokens introduced via Fusion Token show a remarkable performance improvement in code part relative to text. Since the tokens were derived from code data, their impact in the experiments is profound.\n\n- To validate the robustness of the tokenization, evaluations using a variety of benchmarks other than code generation are essential.\n\n- Assessing the efficacy of the 1K tokens added by the proposed method necessitates a comparison against a tokenization with 1K tokens appended solely through bi-gram merging (existing BPE approach).\n\n- Based on the data in Table 4, it's premature to infer that \"BPE for large models with Fusion Token is superior to standard BPE\" from tests on just two models."
            },
            "questions": {
                "value": "Q1: Of what are the actually added 1K tokens comprised?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8062/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698832641015,
        "cdate": 1698832641015,
        "tmdate": 1699636996913,
        "mdate": 1699636996913,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "xA6Cpw7BL0",
        "forum": "tS3gexmfeT",
        "replyto": "tS3gexmfeT",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_oudB"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8062/Reviewer_oudB"
        ],
        "content": {
            "summary": {
                "value": "This paper present a Fusion Token method for tokenization, by expanding the token groups in BPE from bi-grams to 10-grams.\nBy adding extra 1024 10-grams tokens to  a 51K BPE vocabulary, this paper claims the compression rate surpasses that of a regular BPE tokenizer with a vocabulary of one million.\n\nIn experiments, this paper trains 125M LM and 650LM respectively, and shows the new vocabulary (51K + 1K) trained model is better than the 51K one for code generation task."
            },
            "soundness": {
                "value": "1 poor"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "1. The proposed tokenization method show a faster inference time thanks to the shorter tokenized sequence length.\n\n2. The proposed method brings improvement for code generation task."
            },
            "weaknesses": {
                "value": "Experiments and results alone are insufficient to support the claim. I believe this paper fails to demonstrate that the proposed method can enhance the performance of a language model.\n\n\n- 1. Introducing an additional 1024 10-gram tokens can indeed result in a higher bytes-per-token value compared to vanilla BPE tokenization, which is an expected outcome and not surprising. The contribution of this higher compression rate is not clear, as the language model's performance does not appear to improve, as shown in Table 4.\n\n- 2. The paper falls short in establishing connections between the results and existing language models, particularly in terms of data, model architecture, and downstream tasks. This paper trains two language models, one with 125 million parameters and another with 650 million parameters, using a subset of the Pile dataset, and evaluates them with two code generation tasks. There is a lack of discussion about the rationale behind this specific experimental setup, which makes it challenging to comprehend and verify the results since they cannot be directly compared to other papers. I have a question: Why not use widely recognized language model benchmarks such as PG-19 and WikiText103 for training and evaluation, or follow the setup described in the official Pile dataset paper to train GPT2 models of varying sizes (small, medium, large)?\n\n- 3. Only the code generation downstream task is evaluated."
            },
            "questions": {
                "value": "How is \"Bytes per token\" in Table 1 calculated? Is it the average length E[l]?\n\nIt appears that the proposed method is not specifically designed for programming languages but rather for general language modeling. If that's the case, why was a programming language chosen for testing?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8062/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1699245733752,
        "cdate": 1699245733752,
        "tmdate": 1699636996809,
        "mdate": 1699636996809,
        "license": "CC BY 4.0",
        "version": 2
    }
]