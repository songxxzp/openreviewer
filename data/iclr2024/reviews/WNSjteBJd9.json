[
    {
        "id": "8T7jpZwPHM",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission6495/Reviewer_MDWZ"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission6495/Reviewer_MDWZ"
        ],
        "forum": "WNSjteBJd9",
        "replyto": "WNSjteBJd9",
        "content": {
            "summary": {
                "value": "The authors present a watermarking scheme for FL that allows to clearly and reliably identify which client leaked the global model. The so-called DUW scheme follows a backdoor-based approach where, after each aggregation round, the global model is backdoored to produce a client-specific target label when using a special decoder instead of the classification head. The authors also propose an optimization that aims to preserve the utility of the actual model and works by limiting the distance between original and backdoored model. The evaluation on standard image classification tasks shows that the proposed method is incredibly reliable, robust against several watermarking removal methods, and still preserves a high accuracy compared to training without watermarking."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The paper is well written and accessible even for non-experts. Prior and related works are clearly described and important research gaps identified. The resulting scheme seems to be a practically viable solution without any obvious drawbacks that fulfils all desired properties. The evaluation is extensive and all questions I had in mind were answered with meaningful experiments, e.g., the robustness is properly checked against multiple watermarking removal approaches."
            },
            "weaknesses": {
                "value": "I cannot find serious weaknesses in this paper. A few suggestions to improve the presentations are made below.\n\nThe discussion of related work primarily mentions FedTracker as relevant prior work. However, there also exist further works such as Merkle-Sign by Li et al. (arXiv:2105.03167 / ICMEW'22) and FedCIP by Liang and Wang (arXiv:2306.01356).\n\nThe generation of the trigger sets based on the pre-trained encoder of Li et al is not really explained. It would be great to get some more details how the encoding of client keys into the dataset works.\n\nAlgorithm 1, instead of simply referring to Equations 6 and 1, should make it more explicit where some of the defined values such as the set D_T are being used.\n\nInstead of providing only the final benchmark results after all rounds in Table 1, plots showing the evolvement over rounds would be interesting."
            },
            "questions": {
                "value": "- How does DUW compare to the above mentioned works?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission6495/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission6495/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission6495/Reviewer_MDWZ"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission6495/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1697312184726,
        "cdate": 1697312184726,
        "tmdate": 1699636728346,
        "mdate": 1699636728346,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "YCNd3JvAiF",
        "forum": "WNSjteBJd9",
        "replyto": "WNSjteBJd9",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission6495/Reviewer_qn5H"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission6495/Reviewer_qn5H"
        ],
        "content": {
            "summary": {
                "value": "The goal of this paper is to create a watermarking schema for federated learning. The watermark should not only be able to help us identify the stolen model but also indicate which client leaked the model. The essential requirements for the watermark are: (1) accurate IP tracking - identify the client who leaked the collaboratively trained model, (2) provide the confident output of the ownership verification and the identification of the client who leaked the model, (3) the injected watermark should not lower the quality of the model, (4) the watermark should not be easy to remove, e.g., by fine-tuning. The main method assumes that the central server watermarks the shared model before sending it to the clients by assigning to each client a separate dataset. The method is expensive on the server side when we consider millions or more clients."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "1. The problem is valid. We want to find out who leaked the collaboratively trained model.\n2. The usage of the encoder-decoder from Li et al. (2021b) to generate unique trigger sets for each client is an interesting solution to lower the burden put on the server (step 1 on page 4)."
            },
            "weaknesses": {
                "value": "1.  Verification: \"To achieve this goal, we first use our decoder D to replace the classifier h_s in the suspect model $M_s$, then the suspect model can be restructured as $M_s = (f_s , D)$\" - this is the biggest flaw in the paper. It was claimed on page 3 that: \"Shao et al. (2022) proposed a parameter-based watermarking method for FL called FedTracker. It inserts a unique parameter-based watermark into the models of each client to verify the ownership. However, all parameter-based watermarking requires an **inspection of the parameters of the suspect models, which is not applicable enough for many re-sale models**\". However, this method also requires access to the parameters of the suspect model to replace h_s with D during the verification process. If this is not the case, then the authors should explain clearly how to decode the keys from the suspect model.\n1. The method is impractical for FL across devices where we can deal with millions or more clients. It assumes that \"During each communication round, the server watermarks the aggregated global model using the client-wise trigger sets before dispatching the model.\" and it aims at a \"traceable IP verification for accountable FL that can accurately identify the infringers among a **scalable** number of clients\". It was remarked that the early training rounds can be skipped but only the first 20 out of a total 300 for CIFAR10 (beginning of page 7). Furthermore: \" in order to avoid this pitfall, we have to ensure the uniqueness of both the triggers and target labels between different clients\".  Overall, this method is excessively expensive for the server!\n2. There can be a false positive if the client has some additional data from the data used for the watermarking and the potential watermark collisions between different clients.\n3. The watermark is broken at the very core - if we test the ownership by sending the trigger sets produced for each client, then this requires a lot of queries.\n4. If there are many Sybils or colluding parties, they could use the same encoder from Li et al. (2021b) to embed the watermark. The method would detect the same watermark for many models, which would make the verification of the client that leaked the model impossible since it is not a single client that leaks the shared model.\n5. The authors did not release the source code so it is not possible to check the details of the method.\n\n\nMinor comments:\n- On page 5, Subsection 3.4 $M_s$ is used for both $(f_s , h_s )$ and $(f_s, D)$. \n- Figure 1 is too complex and difficult to understand here - what is the decoder?\n- page 2 - method description - what is the pre-trained encoder?\n- at the end of page 2: \"our work can be summarized in four folds\" - but you have only 3 contributions enumerated\n- from the initial description on page 2 - it should be already explained how the watermark despite being produced per client by the server affects the aggregation of the model updates/parameters\n- \"distributed learning framework that enables massive and remote clients\"  page 3 - what are the massive clients?\n- page 2 or 3 - I would like to learn how big have to be the separate dataset/trigger sets $D_T$ for each client. How much additional data does the server have to prepare? How much different the datasets have to be for each client?\n- \"the server will inject a unique watermark for each client\" - again, this exerts the whole work on the server - which is too big of an overhead. \n-"
            },
            "questions": {
                "value": "1. What is the exact setup for CIFAR10 and CIFAR100? How many clients? How many data points per client? What exact models / encoders / decoders are used?\n2. How is the decoder used for the verification process?\n3. Do you need to replace the classifier with the decoder for the verification?\n4. Would you improve the notation? On page 5, Subsection 3.4 $M_s$ is used for both $(f_s , h_s )$ and $(f_s, D)$. \n5. Would you improve Figure 1? It it too complex but still does not explain how the method works. How does the decoder work?\n6. Would you add the ablation study for the size of the key pool?\n7. Why does fine-tuning increase the accuracy in Table 2 for Digits and CIFAR10? Why does accuracy drop for CIFAR100?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "3: reject, not good enough"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission6495/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698773868762,
        "cdate": 1698773868762,
        "tmdate": 1699636728232,
        "mdate": 1699636728232,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "XnUbfKmuay",
        "forum": "WNSjteBJd9",
        "replyto": "WNSjteBJd9",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission6495/Reviewer_Khiu"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission6495/Reviewer_Khiu"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes a novel method to inject backdoor-based watermark to track IP infringers in the FL setting. Using an encoder-decoder framework, this paper encodes the client unique IDs into the federated model. Experimental results demonstrate the effectiveness of the approach."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "1. This work addresses an important and timely problem, which is to not only inject watermarks to protect model IPs but also track the IP leakages in FL settings. \n2. The paper is well-written and easy to follow in general.\n\n3. Experimental evaluations are comprehensive, covering a broad number of aspects and ablation studies."
            },
            "weaknesses": {
                "value": "1. The idea of using encoder-decoder framework to embed an identifiable string such as Labels is not new[1], therefore using encoder-decoder to identify client IDs, which is the main idea of this work, appears to be an straightforward extension and not very challenging. Experimental results in Table 1 also show perfect track score and high WSR_gap for all datasets, which seems to indicate that the underlining problem is not very challenging.  It is suggested that the authors provide more discussions on the unique challenges on identifying clients as compared to other identification problems. \n\n2. The proposed method is based on the assumption that the client set is known and therefore an ID string can be assigned. In reality client sets are dynamic, especially in cross-device FL settings. How will the proposed algorithm deal with dynamic increase or decrease of the client set? Also since the decoder's dimension is higher than the number of clients, will this create scalability problems when the number of clients grow very large (e.g. millions) ?\n\n3. The experimental results do not compare with other baseline methods. Are there any other backdoor watermarking approaches that worth comparing with?\n\n\n[1] Li et al, Invisible backdoor attack with sample-specific triggers. In Proceedings of the IEEE/CVF International Conference on\nComputer Vision, 2021."
            },
            "questions": {
                "value": "In Eq 6 and algorithm 1, \\theta_k^f appears from nowhere without clear explanations. I suppose it is the feature exactor of \\theta_k, is it correct?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission6495/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698829352204,
        "cdate": 1698829352204,
        "tmdate": 1699636728120,
        "mdate": 1699636728120,
        "license": "CC BY 4.0",
        "version": 2
    }
]