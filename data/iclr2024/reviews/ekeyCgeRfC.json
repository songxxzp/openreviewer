[
    {
        "id": "nWOt1XGCFc",
        "forum": "ekeyCgeRfC",
        "replyto": "ekeyCgeRfC",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_9RLW"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_9RLW"
        ],
        "content": {
            "summary": {
                "value": "This paper investigated the in-context learnability of Transformers on discrete Boolean functions. They showed that when trained in an in-context way, the Transformers can in-context learn some Boolean functions like conjunctions, disjunctions, DNFs and CNFs, while they can struggle on more difficult tasks such as parities. They showed that when presented the teaching sequences, the Transformers show better in-context learnability and they can learn tasks like parities in this case. \n\nThey also showed that besides TFs, many other architectures show in-context learnability competitive to TFs on learning Boolean functions. They hypothesized that TFs learn two distinct algorithms on some tasks, which I feel not that convincing (I will explain it later). They also did some experiments on LLM and showed that the GPT2 architecture with fixed parameter, and many other LLMs can in-context learn Boolean functions and are competitive to Nearest Neighbour.\n\nIn general, this paper showed in experiments that the trained TFs can in-context learn some Boolean functions. The experiments with teaching sequence is particularly interesting. It's possible for me to update the score.\n\nThanks for the response from the authors. I raised my score to eight."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "1. The  experiments are sufficient and interesting, showing the in-context learnability of trained TFs on discrete Boolean functions. Previous papers mostly focused on the IC learnability of linear functions, sparse linear functions or NNs. The consideration of Boolean functions is particularly creative.\n\n2. The experiments about teaching sequence is particularly interesting, and also for the experiments on LLMs. The fact that LLMs can implement the kNN algorithm in-context is amazing, and I also like the narratives of the algorithm learning perspective of in-context learning.\n\n3. The writing is great and easy to follow."
            },
            "weaknesses": {
                "value": "1. The author claimed that TFs can learn two distinct algorithms on tasks such as conjunctions, which is not that convincing to me. \n\nLet's take figure 3 as an example and let's call the four sub-figure a to d from the left to the right. The way that authors compared these four figures and draw conclusions is that: they compare a and b, and the compare c with d, then they drew conclusion that the trained TFs can learn two distinct algorithms. This is not a good way for comparison. This is because one can easily give a counter-example to show that a single algorithm can simultaneously achieve a and b. For example, suppose the algorithm that TFs learn is: randomly pick one decision rule (or Boolean function) which is in the conjunction function class and agrees with all examples in the test context (the x_i, y_i pairs at test time). Then, when tested on teach conjunction (fig a), since there is only one conjunction function matching all test context, it will achieve a perfect accuracy. When tested with random sequence of examples from a conjunction task, there can be many functions in the conjunction function class that satisfying all test examples, so it can achieve a imperfect performance. Similar logic applies on the comparison between c and d.\n\nAt a high level, if you want to show the trained TFs can learn two distinct algorithms, it is not a good idea to show that they achieve different performance on different test examples but trained on same data distribution, It is better to show that they achieve different performance when trained on different data distribution, but tested on the same examples. In this case, you should compare figure b and c to draw your conclusion, instead of comparing a and b. The reason behind this is that the in-context learning is specific to the pre-training distribution, and it s very natural that they learn different algorithms on different pre-training distributions."
            },
            "questions": {
                "value": "Below are my suggestions, which I think can help make your paper stronger.\n\n1. Your definition and narratives of in-context learning and the algorithm learning perspective (the last two paragraphs in 'in-context learning' paragraph in section 2) seems to follow closely with the formulation in [1] and the formal definition in [2]. Does your definition of in-context learning similar to their definitions? Or do you have any differences? IMO maybe you can discuss more about your definition of ICL and how it relates to algorithm learning process.\n\n2. I am not sure how you sampled the random conjunction function for each task. I think it is more important to say how you sample the random functions than how you sample the random inputs. Do you sample the random conjunction functions by sampling k variables for a fixed k and then form the conjunction function as the intersection of these k variables (f = 1 iff all these k variables are 1)?\n\n3. Is it possible for you to show what algorithm the TFs actually implement on some simple tasks like conjunction or disjunction? For this, you can either look into the attention weight of attention matrix (maybe train a single-layer TF?) or maybe you can try to provide some constructions that can provably learn these tasks? These can be hard even an open problem, which is definitely not a requirement.\n\n4. For some tasks in your paper, there should be existing algorithms to learn it, such as conjunction or disjunction. I am also wondering how does trained TFs compare to them? Also, some existing paper shows that the TFs can approximate or possibly learn (in-context) the Bayesian optimal estimator over some function class [1,2,3]. I suppose under the task distribution in your paper, it is very likely that the Bayesian optimal estimator is analytically intractible, but I think it should be numerically computable under some simple tasks. So I am wondering how does trained TFs compare to the Bayesian optimal estimators (or some strong, computationally efficient baseline on specific task, if any).\n\n[1]. Transformers as Algorithms: Generalization and Stability in In-context Learning\n\n[2]. Trained Transformers Learn Linear Models In-Context\n\n[3]. Pretraining task diversity and the emergence of non-Bayesian in-context learning for regression."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Reviewer_9RLW",
                    "ICLR.cc/2024/Conference/Submission8569/Senior_Area_Chairs"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8569/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1697670570033,
        "cdate": 1697670570033,
        "tmdate": 1700946380345,
        "mdate": 1700946380345,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "Y3zDv2cXtI",
        "forum": "ekeyCgeRfC",
        "replyto": "ekeyCgeRfC",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_tbmK"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_tbmK"
        ],
        "content": {
            "summary": {
                "value": "This paper studies Transformer's abilities to learn boolean functions. The main results are three-folds:\n\n- **Transformer's performance** on the boolean functions can be grouped into 3 categories:\n  - Perfect: this include conjunctions, (sparse) disjunctions, CNFs and DNFs, and nearest neighbors.\n  - Above random but not perfect: this include majority, threshold, and integer halfspace.\n  - Random-level: (sparse) parity. In particular, for Parity-(10,2), the fully connected network can learn to be perfect while Transformers are at chance-level.\n\n  The paper also checks the performance of difference models, including LSTM, DSS (a state-space model), Hyena (a long convolutional model), RetNet (a hybrid model). These models are all worse than Transformers on the in-context learning of boolean functions, with Hyena being the closest.\n\n- **Ability of learning from teaching sequences**: Transformers are able to leverage these teaching sequences well and learn the task with significantly fewer samples.\n  -  Teaching sequences refer to sequences of samples that are sufficient to uniquely determine the function from a given function class.\n\n- **Ability of pretrained models**: the paper studies two variants, 1) GPT2 with trained embedding and decoding layers (i.e. treating each $\\{0,1\\}^n$ as a sample to be embedded), and 2) direct evaluation of LLMs (i.e. treating $\\{0,1\\}^n$ as a sequence of 0,1 tokens). Transformers perform reasonably well in both setups. For the GPT2 experiments, the authors identified attention heads that closely implement nearest neighbors, similar to induction heads."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "- The boolean evaluation setup is clean and controllable.\n- The paper presents a large set of experiments."
            },
            "weaknesses": {
                "value": "- The takeaway messages are a bit unclear to me. [_Update_: The authors have clarified in the rebuttal. I hope the changes could be reflected in the revised paper.]\n- Some results could be better presented and explained."
            },
            "questions": {
                "value": "- Parity-20: what if reporting the accuracy on every position, rather than the final position?\n  - i.e. whether the full-sequence accuracy is too harsh, and some more continuous progress measure might be more informative.\n- For OOD test results (Fig 10), how about the comparison to LSTM, especially under aggressive distribution shift where Transformers fail to preserve the in-distribution accuracy?\n\n- About teaching sequences: [_Update_: the questions have been addressed during the rebuttal. I hope the updated paper could include the clarifications in the discussions; for example, which specific aspects of the empirical results suggest \"two algorithms\", and that it's important for the teaching sequences to be at the beginning of the list of examples, rather than mixed in as an arbitrary order. ]\n    - Fig 2: what's the value of $k$? To better show the progression of performance, could you please start the x-axis from 1?\n    - I'm curious about the robustness of the teaching sequence results. For example, for different values of $k$ (with dimension fixed to 20), does Transformer always able to \n    - For the teaching sequence experiments, I wonder what would happen if during test time, we permute the $t$ teaching sequence samples, or permute all $m$ samples.\n    - Appendix F: why would this not work as a teaching sequence for the entire set of parity?\n        - Note that $k$ samples suffice only if the value of $k$ is known, and this would imply that the shortest teaching sequence for the full set of parity is of length 0.\n    - Relatedly, the point that \"FFN cannot learn from only the teaching sequences\" seems to be naturally true: the number of samples required in the teaching sequence is defined _given that the function class is known_. For example for sparse parity, $k$ samples suffice only if we know that the task is $k$-sparse parity and we know the value of $k$. However, the function class is not specified to the FFN, hence it's expected that $k$ samples alone are insufficient to learn the task.\n    - I'm not sure it's fair to say that Transformers learn \"two distinct algorithms\" for learning with and without teaching sequences, since this seems to me as simply a matter of distribution shift: if the Transformer has only seen sequences where the first $t$ samples are from a teaching sequence, then there is a drastic distribution shift in the test time when there's no such samples. What am I missing here?\n\nMisc comments\n- Section 5: the paper says real-value functions are not straightforward to evaluate \"since LLMs receive and produce discrete values\": I'm not sure how much this distinction is true or relevant, since LLMs do have embeddings which are vectors of real values.\n- Table 1: for better readability, perhaps consider highlighting the numbers with colors (e.g. set the text background according to some colormap) would make it easier to read."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Reviewer_tbmK"
                ]
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8569/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698807310442,
        "cdate": 1698807310442,
        "tmdate": 1700763878147,
        "mdate": 1700763878147,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "cEasYQk3TJ",
        "forum": "ekeyCgeRfC",
        "replyto": "ekeyCgeRfC",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_fGea"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_fGea"
        ],
        "content": {
            "summary": {
                "value": "This paper studies the ability of transformer models to perform various boolean functions. More specifically, the authors train from scratch transformers on Boolean functions and they observe that  the models can achieve very high accuracy for some of them, but for some other (parities) they correspond to a  random guess; then they add in the training process a prompt that uniquely identifies the function that the model is trying to learn and train in the same way. In this case the models are able to perform well given that the identifying sequence is given at test time in the first tokens of the prompt. Finally, they train in the same tasks with and without the identifier;  in this setting they observe that the transformer performs well when given the identifier and close to the random guess when is not. The paper also includes similar observations for pretrained transformer models. They either train the embedding layers of pretrained models like GPT2 and then prompt them, or they simply prompt GPT4."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The paper is in general well written and the authors have performed multiple experiments with different models and baselines. The setting examined has some benefits, as it is discrete and it can be transferred to prompting models by changing the embedding layers. The experiments are consistent with what other authors have observed."
            },
            "weaknesses": {
                "value": "I am not sure which is the message of this paper compared to previous work. It has already been observed that transformers can \"choose\" between algorithms in [1], while we already knew that there are some tasks that transformers perform well and some others that they don't. \nI think that all the observations in this paper have been observed in different settings in other papers, thus I consider the contribution marginal. \n\n[1]: Bai, Yu, et al. \"Transformers as Statisticians: Provable In-Context Learning with In-Context Algorithm Selection.\" arXiv preprint arXiv:2306.04637 (2023)."
            },
            "questions": {
                "value": "1. When the authors create the datasets, it seems like they always sample a function and $m$ Boolean inputs. At test time, is the prompt used also generated in the same way? Sampling one function an $m$ Boolean inputs?\nMy question is related to whether the authors observe that these models can ``generalize'' to the case that the sequence length is not the one that the models were trained on.\n\n2. How exactly the authors prompted GPT4? Is it just a sequence of examples? It seems that in the supplemental material there is a folder prompts that contains some algorithms. \n\n3. Could the authors specify, which are the insights that this paper provides compared to previous work?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8569/Reviewer_fGea"
                ]
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8569/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698902248290,
        "cdate": 1698902248290,
        "tmdate": 1700715965692,
        "mdate": 1700715965692,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "m1fpGYur8v",
        "forum": "ekeyCgeRfC",
        "replyto": "ekeyCgeRfC",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_bf3N"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8569/Reviewer_bf3N"
        ],
        "content": {
            "summary": {
                "value": "The paper investigates the task of training models to learn various boolean function classes in-context. While the prior work in this theme has mainly focussed on the Transformer architectures and real-valued functions (e.g. linear functions), this paper studies the performance of various architectures (LSTM, Hyena, a state space model etc.) and mainly focuses on boolean functions. Some notable results include:\n\n1) On all function classes where Transformers can learn in-context, other architectures considered also work. However, the performance of other architectures can be worse. For instance, for the nearest neighbor function class, Transformers achieve 100% accuracy whereas other architectures achieve an accuracy of around 90% or less. The Hyena architecture particularly stands out and matches the performance of Transformers for all function classes considered except the nearest neighbors function class.\n\n2) No architecture is able to perform better than chance on the task of in-context learning parities and sparse parities. This happens even in the setting where a feedforward neural network (trained on the in-context examples using gradient descent) is able to learn perfectly.\n\n3) The paper also tests existing LLMs like Llama and GPT-4 (that are not trained explicitly for in-context learning) on in-context learning tasks in small dimensions which are guaranteed to not be in the training set, and shows that these models perform at par with a nearest-neighbors baseline."
            },
            "soundness": {
                "value": "4 excellent"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "4 excellent"
            },
            "strengths": {
                "value": "I enjoyed reading this paper. There are two results that I mentioned in the summary that stand out for me:\n\n1) No architecture considered is able to in-context learn parity. The problem instances considered can be solved perfectly with Gaussian elimination. This suggests that these models struggle to learn Gaussian elimination. This is the first interesting negative result that I know of in the in-context learning ability of these models (when explicitly trained for in-context learning), and deserves more investigation.\n\n2) The comparison between different architectures and their in-context learning performance on various function classes also seems interesting. Why do all architectures except Transformers struggle to some extent on Nearest Neighbors? Why do RetNets and state space models perform worse on 0-1 Threshold functions? Trying to find answers to such questions can shed light on the role of different architecture components.\n\nIn general, the paper is full of nicely executed experiments and many of them would be interesting to the community."
            },
            "weaknesses": {
                "value": "I don't see any major weakness."
            },
            "questions": {
                "value": "Some questions/suggestions:\n\n1) It seems all the architectures considered (except LSTMs) have the number of hidden layers and latent dimensions in the same range. It would be good to include details of the number of parameters or compute used for each architecture so as to ensure that there is some normalizing factor among the architectures considered. This is to make sure that architectures like LSTMs and RetNets are not performing worse due to having a substantially smaller parameter count.\n\n2) It would be good to clarify in the Results section that the negative results only hold for the particular hyperparameter choices. In particular, these experiments don't rule out the possibility of substantially bigger models or models trained for much longer being able to perform better in certain cases. \n\n3) In the abstract, it is mentioned that Transformers can learn gradient-based learning algorithms. The prior works that I know of either claim that Transformers can represent such algorithms or that their performance matches gradient-based algorithms - none of these imply that the trained Transformers actually encode gradient-based learning algorithms. This line should be rephrased to avoid confusion.\n\n4) Here is a blog post that might be worth mentioning in the context of in-context learning abilities of real LLMs: https://www.alignmentforum.org/posts/c2RzFadrxkzyRAFXa/who-models-the-models-that-model-models-an-exploration-of\n\n5) Did you explore using a curriculum for training model to in-context learn parities (similar to Garg et. al.)?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8569/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1699403335966,
        "cdate": 1699403335966,
        "tmdate": 1699637071713,
        "mdate": 1699637071713,
        "license": "CC BY 4.0",
        "version": 2
    }
]