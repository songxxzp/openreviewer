[
    {
        "id": "zyndXqyulW",
        "forum": "PR6RMsxuW7",
        "replyto": "PR6RMsxuW7",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_n4PR"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_n4PR"
        ],
        "content": {
            "summary": {
                "value": "In this paper, the authors seek to speed up deep reinforcement learning by inferring a classical planning model from expert demonstrations. Specifically, they infer PDDL-style preconditions and effects of \"critical actions\" (actions that are crucial for success and must be executed in a particular order) via genetic programming. Later, when training an RL agent to perform the granular actions required to complete the task, they use backward-chaining to infer the next critical action that should be taken, and provide an intrinsic reward to the RL for completing that action. Experiments in three gridworld domains show that this approach learns faster than several competing methods (vanilla RL, behavioural cloning, and an alternative intrinsic reward approach), and further show that the inferred knowledge can be readily applied to new task instances."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "RL algorithms would have far more practical value if they could solve sparse-reward, goal-directed tasks quickly, since it's generally easier to specify tasks in these terms, especially for non-experts. Humans clearly do use some form of planning to solve such tasks, and intuitively we do learn high-level rules akin to action schemas, so this line of work is natural and well-motivated.\n\nI'm familiar with much of the related work on hierarchical task learning, and while I'm not 100% sure about the authors' claim that \"induc(ing) the required subtasks has not been addressed\" (for example, Icarte et al., 2019 arguably do this to some degree), their approach to the problem is novel. I certainly haven't seen genetic programming applied in this context before, and it's an interesting idea!"
            },
            "weaknesses": {
                "value": "The main issue I have with the paper is that the limitations/assumptions aren't sufficiently discussed. In particular:\n- Deep reinforcement learning applications often involve learning from high dimensional input (e.g., pixels) or dealing with continuous controls (e.g., MuJoCo, real-word robotics). However, it's hard to see how the proposed approach would extend beyond discrete, gridworld-style tasks. At the top of page 6 it's claimed: \"This choice of function set is consistent with the numerical variable representation commonly employed in DRL tasks\", but seemingly the true assumption here is that the state can be encoded as a vector of *integers*. If true, this should be acknowledged, and either way I'd like to see a discussion of how the approach could be extended to more complex domains.\n- The assumptions around \"critical actions\" aren't clear. It seems that the approach requires a human expert to deem which state variables are important (e.g., those corresponding to the inventory in Minecraft) and which are non-critical (e.g., the player's position). Again, this ought to be discussed.\n\nA secondary concern is that there doesn't appear to be any source code included with the submission (correct me if I'm wrong) and the reinforcement learning setup isn't clear. For example:\n- How is the 8x8 gridworld represented to the agent? Do you use different channels to represent different types of object, or just a single channel with different numerical values?\n- Why is the agent paid a decaying reward based on the current step number (Appendix B.5)? Is this meant to be paid only at episode termination, or at every step? (The former would make more sense to me, but it's not expressed like this.)\n- The gridworld and the PDDL state are encoded via a convolutional neural net and a fully-connected network, respectively. Are these encoders trained or fixed? What are kernel sizes of the CNN?\n- I found the generalizability experiments quite confusing. Is the \"ours\" agent retrained in the variant domains after re-inducing the rules? (I can't see how it would generalize otherwise.) Are the original demonstrations for GAIL and BC-PPO discarded? Is BC-PPO retrained in the variant domain?"
            },
            "questions": {
                "value": "Have you considered extending the approach to work without expert demonstrations? It seems to me that the induction module should still work, although it probably wouldn't be able to infer as many rules at the start of training (because certain types of transition wouldn't have been seen yet). However, rather than backward chaining from the goal, you could potentially backward chain from novel states, so as to encourage the agent to explore."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Reviewer_n4PR",
                    "ICLR.cc/2024/Conference/Submission2272/Senior_Area_Chairs"
                ]
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2272/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698729589498,
        "cdate": 1698729589498,
        "tmdate": 1700729321297,
        "mdate": 1700729321297,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "rVk9wDTHMr",
        "forum": "PR6RMsxuW7",
        "replyto": "PR6RMsxuW7",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_9Jkh"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_9Jkh"
        ],
        "content": {
            "summary": {
                "value": "This paper introduces a framework that combines deep reinforcement learning with classical planning techniques to tackle sparse-reward, goal-directed tasks. The framework utilizes genetic programming to automatically induce task structures from expert demonstrations, enabling efficient and robust learning in various domains. Experimental results demonstrate the framework's superior performance in terms of sample efficiency, task performance, and generalization. The paper also discusses the potential for future enhancements, particularly in addressing stochastic or partially observable environments."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "2 fair"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The paper presents an innovative approach that integrates deep reinforcement learning with classical planning techniques, offering a unique solution to address sparse-reward, goal-directed tasks. This integration leverages the strengths of both paradigms. The paper provides empirical evidence through experiments in gridworld environments, demonstrating the superior performance of the proposed framework in terms of sample efficiency and task performance compared to other methods, including DRL and imitation learning. Finally, the paper offers a clear and comprehensive discussion of the proposed framework, including its components and the potential for future enhancements, such as handling probabilistic rules in uncertain environments."
            },
            "weaknesses": {
                "value": "- There is a plethora of works on integrating learning and planning, [1,2,3] to name a few. Missing them in the related work section devalues the overall presentation of the work. I strongly suggest having this line of work included and compared against.   \n- In section 3, the MDP tuple is not explained. By convention, one could understand what `S` , `A`, and others stand for, but it would be better if authors could include their formal definitions.   \n- How critical states and actions are recognized? I see that it is discussed in section 4, but there are no verifications for such assumptions in the paper.   \n- Most recent method used as a baseline was introduced in 2020, which would neglect the progress made in the literature since then. I would suggest to include more recent approaches as baselines as well.\n- With the use of genetic algorithms, since it is one the most important integral parts of the proposed method, how would it affect the scalability of the overall approach?\n    \n\n[1] Veloso, Manuela, et al. \"Integrating planning and learning: The PRODIGY architecture.\" Journal of Experimental & Theoretical Artificial Intelligence 7.1 (1995): 81-120.\n[2] Danesh, Mohamad Hosein, Panpan Cai, and David Hsu. \"LEADER: Learning Attention over Driving Behaviors for Planning under Uncertainty.\"\u00a0*Conference on Robot Learning*. PMLR, 2023.\n[3] Zhao, Luyang, et al. \"PLRC\\*: A piecewise linear regression complex for approximating optimal robot motion.\"\u00a0*2020 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)*. IEEE, 2020."
            },
            "questions": {
                "value": "See above."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Reviewer_9Jkh"
                ]
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2272/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698769416200,
        "cdate": 1698769416200,
        "tmdate": 1700660700264,
        "mdate": 1700660700264,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "UdILI0DyeX",
        "forum": "PR6RMsxuW7",
        "replyto": "PR6RMsxuW7",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_Yjtd"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_Yjtd"
        ],
        "content": {
            "summary": {
                "value": "- The proposed work automatically infers substructures from demonstrations that enable generalization to adapt to new environments. \n\n- Induction stage: The approach uses genetic programming to infer action schemata and extracts symbolic knowledge in the form of critical actions from it.\n\n- Training stage: The approach uses the inferred model of symbolic rules that represent task substructures to build a critical action network online from the goal by backward-chaining. Whenever critical actions are achieved instrinsic rewards are provided.\n\n- The work considers deterministic, fully observable but unknown environments."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "- The idea of using genetic programming to learn symbolic action schema and extracting the relevant substructures for a specific goal is interesting.\n\n- The paper is well-written and clear. The results are convincing."
            },
            "weaknesses": {
                "value": "- There is much work on learning action models from demonstrations or trajectories as also mentioned in the related work section. How is the induction stage different from that line of research?\n\n- In the experimental section, it will help to report the critical actions inferred by the approach for different domains. \n\n- How does the proposed approach favor in comparison with option discovery approaches that directly learn useful substructures? What are your thoughts on the comparison of their sample efficiency?"
            },
            "questions": {
                "value": "Included with the limitations."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission2272/Reviewer_Yjtd"
                ]
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2272/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698812399220,
        "cdate": 1698812399220,
        "tmdate": 1699636159991,
        "mdate": 1699636159991,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "LWecIX845B",
        "forum": "PR6RMsxuW7",
        "replyto": "PR6RMsxuW7",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_hQ37"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission2272/Reviewer_hQ37"
        ],
        "content": {
            "summary": {
                "value": "This paper presents a method that integrates automated planning and deep reinforcement learning for solving sequential decision-making problems, such as grid navigation problems. \nThis paper assumes that the state of an RL environment is annotated with symbolic representations, such that the agent can obtain a trace of symbolic states given an RL trajectory. \nThe main idea is that the agent first learns an action model, which is called critical action in this paper, that specifies how the state changes due to the application of the action, given human demonstrations. After obtaining an action model in which a symbolic action is associated with a single RL action, the agent performs planning with backward chaining to find a plan and use it to train an RL policy with PPO."
            },
            "soundness": {
                "value": "2 fair"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "* Originality: The originality of this work is the notion of action-effect linkage that finds effect variables for an action. For finding symbolic expression of action models, this paper proposes a method using genetic programming to find effects with numeric expressions.\n* Quality: The paper shows ideas in words and figures to help to understand the basic concepts.\n* Significance: This paper shows that the proposed method outperforms several baselines in grid-world environments."
            },
            "weaknesses": {
                "value": "Originality:\n\nRegarding action model acquisition from RL environments, there are related works, such as [1, 2]. Learning action models from symbolic traces is also a widely studied topic in automated planning [3, 4]. The papers such as [1, 2] have similar problem settings, so it is worth mentioning in the paper. \n\n[1] Jin, M., Ma, Z., Jin, K., Zhuo, H. H., Chen, C., & Yu, C. (2022, June). Creativity of ai: Automatic symbolic option discovery for facilitating deep reinforcement learning. In Proceedings of the AAAI Conference on Artificial Intelligence (Vol. 36, No. 6, pp. 7042-7050).\n\n[2] Lyu, D., Yang, F., Liu, B., & Gustafson, S. (2019). SDRL: Interpretable and Data-Efficient Deep Reinforcement Learning Leveraging Symbolic Planning.\n\n[3] Arora, A., Fiorino, H., Pellier, D., M\u00e9tivier, M., & Pesty, S. (2018). A review of learning planning action models. The Knowledge Engineering Review, 33, e20.\n\n[4] Yang, Q., Wu, K., & Jiang, Y. (2007). Learning action models from plan examples using weighted MAX-SAT. Artificial Intelligence, 171(2-3), 107-143.\n\nClarity: \n* There are very strong assumptions made in the paper that can be easily overlooked. \nFor example, action precondition is defined over all variables, one action impacts specific features, and critical action maps to exactly one MDP action. It needs clarification on why those assumptions are needed.\n\nSignificance: \n\nEnvironments tested in the experiment section are small-scale."
            },
            "questions": {
                "value": "### General questions\n\n1. In the experiments, can you show the number of action operators learned to solve each problem? What is the length of the plans? For generating demonstrations given a problem environment, what are the prior knowledge required for an expert?\n\n2. Do you assume that you have a symbolic state annotation for an RL state and grounded action operators in the environment?\n\n\n### Learning action models from traces\n3. In the action-effect linkages, is $a$ an RL action (for example, make1 in Figure 3(b))?  How do we know that make1 maps to make_stick ? For computing mutual information, how many cases need to be considered? Is it |A| * \\sum_{r=1^n} nCr for n being the number of variables? nCr is the number of selecting r variables from n variables. What is the typical number of variables considered in the experiment?\n\n4. Precondition is found by learning a decision tree. I think it will be meaningful to compare this approach of learning action model (effect and precondition) with papers mentioned above [1,2] or other methods in automated planning [3, 4].\n\n5. In the Minecraft example, make_stick fits well with the presented approach. make_stick only changes features to make a stick by consuming wood and stick in the inventory, and there is a unique MDP action make1 that corresponds to this action. Minecraft environment will generate a sequence of actions that transform objects to a particular object and it will be given by human demonstration. What aspect of this example can be generalized such that the agent doesn't need to see the demonstration?\n\n6. What are the critical actions in mini-grid environments?\n\n### Planning\n7. What if some of the critical actions had incorrect preconditions and effects learned? Figure 6 shows that the accuracy cannot reach 100% and it implies it may miss some effect variable. Or it may skip some states that some critical action is applicable due to incorrect precondition. Is there any guarantee that the presented approach solves the problem?\n\n8. What is the length of the plans for solving each problem?\n\n### Reinforcement Learning\n\n9. DoorKey or 4-Rooms environments are too small-scale. Did you try on larger scale problems in mini-grid or BabyAI? \n\n10. Did you train a single RL agent for low-level policy?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 4,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission2272/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698906317034,
        "cdate": 1698906317034,
        "tmdate": 1699636159918,
        "mdate": 1699636159918,
        "license": "CC BY 4.0",
        "version": 2
    }
]