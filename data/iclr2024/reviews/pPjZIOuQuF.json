[
    {
        "id": "nDANDlWgVz",
        "forum": "pPjZIOuQuF",
        "replyto": "pPjZIOuQuF",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8936/Reviewer_mVr1"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8936/Reviewer_mVr1"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes a new benchmark called RepoBench for evaluating repository-level code completion systems. RepoBench consists of three interconnected evaluation tasks: RepoBench-R for retrieving the most relevant code in the repository, RepoBench-C for code completion using both in-file and cross-file context, and RepoBench-P for the entire pipeline of both retrieval and code completion. The authors carry out a series of experiments on RepoBench, analyzing the efficacy of various retrieval methods and code completion models of different magnitudes."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "- A nice idea of benchmarking repository-level code completion\n - The paper is generally well-written and easy to follow"
            },
            "weaknesses": {
                "value": "To me, the novel research contributions of the paper are a bit limited, especially for an AI conference. The paper could better fit a software engineering/programming conference.  The significance of the work could be more clearly stated.\n\nTo evaluate RepoBench-R, the authors selected three baseline strategies for the retrieval task, namely, random retrieval, lexical retrieval, and semantic retrieval. The selection of baseline strategies for RepoBench-R, particularly the inclusion of random retrieval and lexical retrieval, are weak baselines, which may not effectively demonstrate the distinctive capabilities of the proposed benchmark. In that sense, the results presented in Section 4.1 are under expectation and I think that previous benchmarks may also demonstrate the ability of these strategies. A more competitive baseline selection including LLMs would enhance the work.\n\nThe paper lacks a comprehensive comparison with previous benchmarks about code completion. Although RepoBench is the first benchmark on repository-level code completion, it would still benefit from comparisons with prior benchmarks. Such comparisons could involve RepoBench-R versus existing code retrieval benchmarks and RepoBench-C versus traditional benchmarks for function-level code completion. \n\nThe metrics used for code completion, i.e., EM and Edit Similarity, are unusual. The authors could consider more widely used metrics such as pass@k and CodeBLEU? \n\nThe evaluation of RepoBench-C is conducted using only three Language Model Models (LLMs), specifically CodeGen, StarCoder, and Codex. As a benchmark paper, the inclusion of only three LLMs may not fully represent the diverse capabilities of available models. To enhance the benchmark's applicability, additional LLMs, including recently proposed ones, could be considered for comparison. For example: Shi et al., SoTaNa: The Open-Source Software Development Assistant, https://arxiv.org/abs/2308.13416"
            },
            "questions": {
                "value": "- Why not using widely used metrics such as pass@k and CodeBLEU? \n- How is the proposed benchmark compared to previous benchmarks for code completion?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "5: marginally below the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8936/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698674697171,
        "cdate": 1698674697171,
        "tmdate": 1699637125273,
        "mdate": 1699637125273,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "zlXqukCPca",
        "forum": "pPjZIOuQuF",
        "replyto": "pPjZIOuQuF",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8936/Reviewer_zCY2"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8936/Reviewer_zCY2"
        ],
        "content": {
            "summary": {
                "value": "The authors address a need for repository wide benchmarks for code-prediction and code-retrieval tasks. They do so by creating two datasets, in the test set, they recover repository information for the github-code dataset and create two variants, a 2K and an 8K variant. For the test set, they crawl permissively licensed Java and Python projects after the The Stack cut-off date. To better mimic real-world scenarios, the test set is not separated by prompt length. As for the benchmark itself, it focuses on three tasks that should exercise both cross-file and in-file context requirements. The tasks are code auto-completion, code-retrieval, and a join task where the relevant cross-file information should be retrieved before it is used for completion (pipeline)."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "(1) The paper addresses the need for a repository wide benchmark that better aligns with real-world usecases in software projects. (2) It addresses data leakage issues* by crawling new data for the test set and (3) provides fine-tuning data for models that may require it. \n(4) The StarCoder overfitting to file-level use-cases provides interesting additional insight."
            },
            "weaknesses": {
                "value": "The main concerns with the paper are two-fold. \n\nThe usefulness of the benchmark relies on a gentleman agreement to not use data from the collection dates during training or fine-tunning.\n\nAnother concern is the opt-out possibility. While not strictly necessary, a nice-to-have would be an opt-out mechanism similar to the The Stack one for authors that may want to remove their code from.the data."
            },
            "questions": {
                "value": "Is there an intention to make the bechmark a \"living\" benchmark where the test set is periodically refreshed to be past the training set horizon date?\n\nAlternatively, is there an intention to check and disqualify models that have trained on test set data?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "details_of_ethics_concerns": {
                "value": "The opt-out is more-so a nice-to-have rather than necessary since the authors have taken care to respect code licenses during crawling."
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "value": "Yes",
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission8936/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8936/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8936/Reviewer_zCY2"
                ]
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8936/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698718844057,
        "cdate": 1698718844057,
        "tmdate": 1699637125161,
        "mdate": 1699637125161,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "VqI35GzDZH",
        "forum": "pPjZIOuQuF",
        "replyto": "pPjZIOuQuF",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission8936/Reviewer_V3UP"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission8936/Reviewer_V3UP"
        ],
        "content": {
            "summary": {
                "value": "Authors propose RepoBench - a benchmark for repository level code auto-completion evaluation. They propose three evaluation tasks: retrieval, code completion, and pipeline. Authors perform experiments using RepoBench"
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "2 fair"
            },
            "strengths": {
                "value": "- Significant work on RepoBench construction.\n- Extensive experiments with RepoBench with existing models and retrieval techniques."
            },
            "weaknesses": {
                "value": "- It is not clear what new insights RepoBench and experiments on it contribute to the field. Were the results previously unknown or unexpected?\n\n- This might not be a weakness of the paper per se, but it concerns me a bit that random retrieval is close to or even outperforms some non-random retrieval methods.\n\n\nI increased the rating based on authors' answer to my questions."
            },
            "questions": {
                "value": "- What is exactly \"the first appearance of a cross-file line within a file\"? Is this the import line? Is this the first line that uses cross-file function?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            },
            "first_time_reviewer": {
                "readers": [
                    "ICLR.cc/2024/Conference/Program_Chairs",
                    "ICLR.cc/2024/Conference/Submission8936/Senior_Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8936/Area_Chairs",
                    "ICLR.cc/2024/Conference/Submission8936/Reviewer_V3UP"
                ]
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission8936/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698730575313,
        "cdate": 1698730575313,
        "tmdate": 1700700670421,
        "mdate": 1700700670421,
        "license": "CC BY 4.0",
        "version": 2
    }
]