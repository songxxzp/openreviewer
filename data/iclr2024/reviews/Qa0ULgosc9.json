[
    {
        "id": "RlGbsaJElo",
        "forum": "Qa0ULgosc9",
        "replyto": "Qa0ULgosc9",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4016/Reviewer_VJ1H"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4016/Reviewer_VJ1H"
        ],
        "content": {
            "summary": {
                "value": "The paper introduces OpenTab, an open-domain table reasoning framework powered by LLMs. Unlike most LLMs which rely on knowledge stored in their parameters or retrieved from documents, OpenTab is specifically designed to utilize the rich information contained in structured data. The framework consists of several key components: a retriever to collect relevant tables, a row selector to prune only the pertinent rows of records, a Coder to generate SQL queries, and finally, a Reader to verify the answers. Experiments conducted on Open-WikiTable, WikiTableQuestion, and Feverous demonstrate that OpenTab achieves superior performance compared to previous reader and parser-based methods on tables across both open and close domains."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "4 excellent"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "- The paper is clearly written and easy to follow.\n- Figures 1, 3, and 4 effectively illustrate the overall pipeline and modules.\n- The proposed pipeline is novel and generally reasonable for addressing the specific task at hand.\n- OpenTab outperforms the previously proposed table-reasoning methods."
            },
            "weaknesses": {
                "value": "- The proposed pipeline might be applicable only to open-domain wikipedia-based tables and not to tables with a large number of rows as in Spider or BIRD. For instance, the row selector, although I agree with the motivation, can result in incorrect candidate tables as some questions may require a large number of rows. Determining the appropriate number of rows to retrieve using a heuristic seems to assume that the pipeline is not suited for dealing with complex tables. One of the main benefits of using tables is their ability to store a large number of records (mostly in close-domain scenarios). I would like to hear the authors\u2019 thoughts on this aspect.\n- Minor typos in the manuscript (e.g., by by)"
            },
            "questions": {
                "value": "- In Figure 3, reader seems to appear after the SQL is selected, but in the explanation, the authors mention that the reader is used to select the SQL. Which is correct?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 1,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4016/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698828884857,
        "cdate": 1698828884857,
        "tmdate": 1699636363927,
        "mdate": 1699636363927,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "VeeaMzFrlX",
        "forum": "Qa0ULgosc9",
        "replyto": "Qa0ULgosc9",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4016/Reviewer_zsjW"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4016/Reviewer_zsjW"
        ],
        "content": {
            "summary": {
                "value": "This paper proposes a new method for open-domain table reasoning based on large language models. The method contains a table retriever, row selector, coder, and a reader. The table retriever is built on BM25. For the coder, the authors propose the simple-to-complex prompting strategy to generate SQL queries for three levels to resolve the complex input queries and infeasible queries by SQL itself. Then a reader module takes the context and the intermediate SQL execution results to produce the final answer to the query. \n\nTo resolve the hallucination problem of LLM when generating SQL queries, the authors also propose a generative reranking & sequential reasoning (GRSR) strategy by assessing the similarity of the generated SQL with the query so as to evade noisy tables. \n\nThe authors conduct comprehensive experiments to demonstrate the superiority of the proposed method as well as ablation studies to show the effectiveness of each proposed module."
            },
            "soundness": {
                "value": "4 excellent"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The proposed method is novel and effective, as demonstrated by experiments. Each proposed module is well-motivated and well-ablated."
            },
            "weaknesses": {
                "value": "Some technique details are not clear. \nWhen using BM2.5 for the retriever, are you using the full table? \nFor the proposed simple-to-complex strategy for Coder, how is it working with GRSR? \nFor the GRSR, how to deal with SQL queries grounded on multiple gold tables?"
            },
            "questions": {
                "value": "Are you going to release the code?"
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "8: accept, good paper"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 2,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4016/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1698987336604,
        "cdate": 1698987336604,
        "tmdate": 1699636363850,
        "mdate": 1699636363850,
        "license": "CC BY 4.0",
        "version": 2
    },
    {
        "id": "Va6jgjKaLQ",
        "forum": "Qa0ULgosc9",
        "replyto": "Qa0ULgosc9",
        "signatures": [
            "ICLR.cc/2024/Conference/Submission4016/Reviewer_9EJC"
        ],
        "nonreaders": [],
        "readers": [
            "everyone"
        ],
        "writers": [
            "ICLR.cc/2024/Conference",
            "ICLR.cc/2024/Conference/Submission4016/Reviewer_9EJC"
        ],
        "content": {
            "summary": {
                "value": "The paper proposes OpenTab, an open-domain table reasoning framework. The framework includes A) a \"retriever\" module to retrieve a subset of structured tables from a table corpus (using BM25), and B) a \"reasoner\" module that is composed of a \"coder\" module for generating SQL queries, a \"rowselector\" module to rerank rows, and a \"reader\" module to parse SQL execution and its accompanying context into a natural language response. The authors also propose a Generative Reranking & Sequential Reasoning (GRSR) strategy to rerank retrieved tables using SQL and query similarity, and a simple-to-complex (STC) prompting strategy for SQL generation. \n\nThe OpenTab framework contributes a method for open-domain table reasoning that has higher accuracy than existing baselines, and that is reliant only on few-shot prompting (no fine-tuning)."
            },
            "soundness": {
                "value": "3 good"
            },
            "presentation": {
                "value": "3 good"
            },
            "contribution": {
                "value": "3 good"
            },
            "strengths": {
                "value": "The paper is largely written clearly, and easy to follow. The OpenTab framework is a notable contribution to the table reasoning and semantic parsing community for its approach to open-domain reasoning. The paper's combination of several approaches into the OpenTab framework can be considered as an original application to the problem of open-domain reasoning."
            },
            "weaknesses": {
                "value": "- The paper claims to provide a new simple-to-complex prompting strategy for text-to-SQL generation using LLMs. However, the details of this prompting strategy are relegated to Appendix A.1, and it is not clear how the LLM is guided to increase the complexity of successive SQL generations. Moreover, for this claim of a new strategy to be sound, one would expect to see it applied to standard text-to-SQL benchmarks like Spider or the new BIRD-SQL.\n\n- The paper's framework for retrieval and generation for open-domain table reasoning is analogous to retrieval-augmented LLMs, but there is no mention of RAG (for e.g. [Lewis et al., 2020](https://arxiv.org/abs/2005.11401)). The paper is thus strangely not situated within the RAG literature (but the paper contains fair contributions to RAG, such as GRSR)."
            },
            "questions": {
                "value": "**Questions**:\n\n1. The ICL prompt for SQL generation includes this line: \"Generate 3 SQLite programs with respect to the question separated by [SQLSEP], the complexities of the SQLite programs generated ascend (basic, intermediate, advanced).\" to \"sequentially generate three SQL programs with ascending complexities\", SQL-basic, SQL-intermediate and SQL-advanced.\n\n    - a) This prompt seems intuitively underspecified in guiding the model to generate SQL that focuses on column selection in the first SQL, and column+row selection in the second SQL. In other words, the wording of the prompt doesn't specify what kind of SQL should be generated in each stage. How did the authors verify the SQL was actually of that specific functionality?\n\n    - b) How did the authors verify that the SQL written was actually of ascending complexity?\n\n2. SQL generation performance: In claiming the new simple-to-complex prompting strategy for SQL generation, how did the authors verify the performance of this method on text-to-sql benchmarks like Spider or BIRD-SQL?\n\n3. Lost in the middle phenomenon: Was there any prompt engineering done for the ICL prompts to counter the \"lost in the middle\" phenomenon, particularly for the reader module which incorporates substantial context?\n\n4. From Section 4.2, given that the baseline methods \"require full tables to be fed into LLM for reasoning, which may exceed the upper bound of the input token limit, rendering an invalid prediction.\", do the results for baseline methods include or exclude these invalid predictions? \n\n5. From Table 4, what explains the large gap in difference for BM25 and BM25* for the \"w/o Fine-tuning\" row? This seems surprising given that BM25 is just supposed to be the authors' replication of BM25* presented in Kweon et al., 2023.\n\n6. On the effectiveness of GRSR: how does the effectiveness of GRSR vary with different choices of top-k (where k is number of tables retreived)?\n\n\n**Suggestions**:\n- In Section 3.1, \"DPR\" is first used. Suggest to include the full name of Dense Passage Retrieval when it is first used, and use the acronym subsequently.\n- In Section 5, explain why using all three SQL difficulties leads to the best performance, as was done in Section 3.2.1\n- It is likely relevant for the authors to include a section on retrieval augmented generation in LLMs under Section 6."
            },
            "flag_for_ethics_review": {
                "value": [
                    "No ethics review needed."
                ]
            },
            "rating": {
                "value": "6: marginally above the acceptance threshold"
            },
            "confidence": {
                "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
            },
            "code_of_conduct": {
                "value": "Yes"
            }
        },
        "number": 3,
        "invitations": [
            "ICLR.cc/2024/Conference/Submission4016/-/Official_Review",
            "ICLR.cc/2024/Conference/-/Edit"
        ],
        "domain": "ICLR.cc/2024/Conference",
        "tcdate": 1699568790202,
        "cdate": 1699568790202,
        "tmdate": 1699636363780,
        "mdate": 1699636363780,
        "license": "CC BY 4.0",
        "version": 2
    }
]