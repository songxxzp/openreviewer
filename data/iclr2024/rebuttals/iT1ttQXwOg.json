[
    {
        "title": "Equivariant Deep Weight Space Alignment"
    },
    {
        "review": {
            "id": "KJUYaaW4JW",
            "forum": "iT1ttQXwOg",
            "replyto": "iT1ttQXwOg",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_ayDH"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_ayDH"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposes a learning-based framework that learns to predict the optimal weight alignment between two neural networks. The proposed architecture is equivariance to permutation symmetry of the input neural networks. The authors prove that the approach can approximate the Activation Matching algorithm and guarantees to produce the correct alignment when a perfect alignment exists. At inference time, the framework aligns unseen network pairs without additional optimization. Experiment results show that the proposed approach is faster and produces better alignment than optimization-based approaches. The predicted alignment can also be used as initialization for optimization-based approaches to improve their alignment quality."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "-\tThe idea of incorporating symmetries of the weight space is both natural and novel, and its effectiveness is clearly demonstrated in experiments.\n-\tAn efficient method for finding weight alignment is an important problem in model merging, with potential applications in real-time merging in federated learning and weight-space clustering. It also allows more efficient experimentations in understanding the loss landscape of deep networks.\n-\tThe paper is easy to follow. Writing is clear and concise."
                },
                "weaknesses": {
                    "value": "-\tThe proposed framework requires new training for every new input neural network architecture, even for minor changes such as adding or modifying the size of a layer. \n-\tIt is not clear how to choose the weights for the linear combination of the three loss functions in Section 4.2. Also, as shown in Appendix F, the two unsupervised loss functions are not always aligned, and it is not clear which loss to include before training. Finally, the evaluation metrics, barrier and AUC, are based on model merging tasks, but the supervised loss does not seem to help on these metrics directly.\n-\tThe practical contribution would be more convincing if the authors can demonstrate the framework\u2019s effectiveness in applications that require weight alignment.\n\n### Minor: \n-\t$\\rho_1$ and $\\rho_2$ in the first paragraph of Section 2 are not defined. Are they representations?\n-\tSection 4.1: might be better to state what $\\theta$ is somewhere.\n-\tFigure 5: The \u201cWeight Matching\u201d and \u201cDEEP ALIGN + Weight Matching\u201d have very similar colors."
                },
                "questions": {
                    "value": "-\tDoes the exactness property (proposition 5) apply to test data as well?\n-\tHow do the three losses interact with each other? Does the two unsupervised loss provably help improve the supervised loss? \n-\tFigure 3: Why does the loss decrease on the interpolation around $\\lambda=$ 0.1 or 0.9, especially in CIFAR10 CNNs?\n-\tWhy is incorporating equivariance beneficial to the model performance? It is intuitively clear that weight alignment methods should respect the symmetry of the neural networks, but there does not seem to be evidence of the link between incorporating equivariance and improved performance."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Reviewer_ayDH"
                    ]
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission3288/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1697821993069,
            "cdate": 1697821993069,
            "tmdate": 1699636277704,
            "mdate": 1699636277704,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "ND30z1fduG",
                "forum": "iT1ttQXwOg",
                "replyto": "KJUYaaW4JW",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to ayDH"
                    },
                    "comment": {
                        "value": "***The proposed framework requires new training for every new input neural network architecture.***\n\nDEEP-ALIGN is not restricted to a single input network architecture and can be used to align a variety of input network architectures *using the same DEEP-ALIGN model*. This can be done by replacing the DWSNet encoder, with an architecture-agnostic model like the concurrent submissions of https://openreview.net/forum?id=ijK5hyxs0n  and https://openreview.net/forum?id=oO6FsMyDBt. There, the input neural networks are modeled as weighted graphs, and the weight space encoder is implemented using a graph neural network (GNN). That type of GNN architecture can be trained and applied to a wide range of neural architectures, with early experiments showing very promising generalization abilities to OOD architectures (see subsection 5.1 here https://openreview.net/forum?id=ijK5hyxs0n).\n\n------------------\n\n***How to select the weights for the linear combination of the three loss functions?; How do the three losses interact with each other?***\n\nOur framework enables the practitioner to adapt the loss to the task at hand. \nIn our experiments, we observed that combining all losses with equal weighting works well for most learning setups, except in the INRs experiment where removing the L2 loss was beneficial. \n\n----------------\n\n***Demonstrate the framework\u2019s effectiveness in applications that require weight alignment.***\n\nAs the reviewer mentioned, one important application is Federated Learning (FL) where it was shown that alignment-based averaging, instead of the standard federated averaging, leads to better performance and reduced communication cost (see e.g., https://arxiv.org/pdf/2002.06440.pdf). Following the reviewers' comments and motivated by applications from FL, we added a new experiment in which we align models trained using disjoint datasets. To that end, we split the CIFAR10 dataset into two disjoint splits with different class distributions. We train our DEEP-ALIGN model to align CNN networks trained using the different datasets. The merged models achieve lower classification loss compared to the original models. The results are provided here and are added to the revised version of the paper (Subsection 6.1, page 9, \u201cAligning networks trained on disjoint datasets\u201d).\n\n[*Link to results*](https://github.com/DeepAlignPaper/deep-align-results/blob/main/cifar10_disjoint_datasets.png)\n\nOther possible applications are alignment-based mixup as data augmentation for learning in deep weight spaces (see, e.g., http://arxiv.org/abs/2311.08851) and weight-space clustering, for example for analyzing large INR collections.\n\n--------------------\n\n***Does the exactness property (proposition 5) apply to test data as well?***\n\nYes. The result is very general and holds for all weights and all input vectors aside from a set of measure zero (which implies zero probability for any continuous distribution).\n\n---------\n\n***Why does the loss decrease on the interpolation around lambda=0.1 or 0.9?***\n\nThis is a common phenomenon in model merging, as demonstrated in the git rebasin (https://arxiv.org/abs/2209.04836) and Sinkhorn matching (https://arxiv.org/abs/2212.12042) papers.\n\n-------\n\n***Why is incorporating equivariance beneficial to the model's performance?***\n\nEquivariance is well known to be beneficial for learning data with symmetries (see, for instance, the geometric Deep Learning proto book https://arxiv.org/abs/2104.13478). Among the main benefits of this approach is that the model does not have to \"memorize\" different equivalent input representations of the same object, resulting in better generalization. Moreover, many equivariant architectures, such as the architecture used in this paper, have significantly fewer parameters and are considerably more efficient than fully connected networks. This is a result of the inherent parameter-sharing schemes that these equivariant models employ.\nWe refer the reviewer to Figure 3 in the DWSNet paper, which compares equivariant and non-equivariant models. The performance gap as well as the improved sample complexity are substantial even for very simple tasks. We are happy to include a similar experiment for the weight alignment task if required.\n\n-----------\n\n***Missing definition of rho_1 and rho_2; Similar colors in Figure 5.***\n\nThank you. We fixed these issues in the revised version of the paper."
                    }
                },
                "number": 7,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3288/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700438127925,
                "cdate": 1700438127925,
                "tmdate": 1700438127925,
                "mdate": 1700438127925,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "RPf83IlbDy",
                "forum": "iT1ttQXwOg",
                "replyto": "ND30z1fduG",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3288/Reviewer_ayDH"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3288/Reviewer_ayDH"
                ],
                "content": {
                    "comment": {
                        "value": "Thank you for your response. Replacing the encoder with a graph neural network is a promising way to make the proposed framework architecture-agnostic, but more empirical result is needed to back up this idea. Nevertheless, the proposed approach is clearly effective in solving the optimal weight alignment problem, so I will keep my score."
                    }
                },
                "number": 13,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3288/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700718371324,
                "cdate": 1700718371324,
                "tmdate": 1700718371324,
                "mdate": 1700718371324,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "VJVit8FaX3",
            "forum": "iT1ttQXwOg",
            "replyto": "iT1ttQXwOg",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_VRRk"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_VRRk"
            ],
            "content": {
                "summary": {
                    "value": "The authors propose a data-driven method to perform weight matching between neural networks. It aims to solve the assignment problem by training a Siamese architecture to perform activation matching and produce permutation matrices. The architecture is trained on generated pairs of weight vectors, where one vector is a noisy, randomly permuted version of the other, as well as on unlabeled pairs.\n\nThe authors embed their method into a group theoretic framework and provide proofs for several properties of their architecture: it is equivariant to permutation and is exact, meaning that it, under mild assumptions, converges to an optimal solution if a zero error solution exists.\n\nThe method is evaluated on several weight matching benchmarks for image classification tasks and implicit neural field networks. It consistently outperforms previous work while being orders of magnitude faster."
                },
                "soundness": {
                    "value": "4 excellent"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "- The presented method is grounded in theory, the authors provide useful theorems and the framework is technically sound\n- The method applies existing concepts for data-driven assignment solvers to the weight matching problem, which is a novel contribution\n- The method is well evaluated and results clearly outperform previous methods while being much faster\n- The paper is mostly well-written and presented"
                },
                "weaknesses": {
                    "value": "- The network that maps from weight embedding to activation space and its connection to stage 1 is unclear (see below for questions). \n- The networks generalization capabilities are limited. In order to outperform previous methods, the architecture has to be trained on different weights of the same network architecture, solving the same task as during inference. It still performs reasonably well on slight OOD weights though."
                },
                "questions": {
                    "value": "- I don't fully understand the network mapping from weight embeddings to activation space. If the network just maps onto the bias vectors, the input weights do not have any influence on the estimated permutation anymore, would that be correct? This seems to be unintuitive to me and I would like the authors to clarify.\n- Also, if my interpretation is correct, what is the point of feeding the weights $w$ to the network at all and not just use the bias? What is the purpose of the first stage of the architecture?\n\n------------\nI thank the authors for the provided clarifications - the method is clear to me now. In total, my score remains as it is."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Reviewer_VRRk"
                    ]
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission3288/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698656325182,
            "cdate": 1698656325182,
            "tmdate": 1700756248047,
            "mdate": 1700756248047,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "RMekylAUtG",
                "forum": "iT1ttQXwOg",
                "replyto": "VJVit8FaX3",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to VRRk"
                    },
                    "comment": {
                        "value": "***The network's generalization capabilities are limited; The method has to be trained using the same network architecture, solving the same task as during inference.***\n\nAs a learning-based method, our approach indeed requires training on the task of interest given data from the targeted data distribution. The upside, however, is that at inference time our learning-based approach results in high-quality alignments at a fraction of the computation time compared to non-learning-based approaches. This opens up the ability to use alignment in applications that require solving many alignment problems in real-time, such as federated learning and weight space clustering.\nNevertheless, as the reviewer mentioned, our OOD performance is very reasonable and we believe it can be even further improved by incorporating recent GNN-based deep-weight space encoders that can process different architectures (such as these concurrent submissions: https://openreview.net/forum?id=ijK5hyxs0n  and https://openreview.net/forum?id=oO6FsMyDBt). That type of GNN architecture can be trained and applied to a wide range of neural architectures, with early experiments showing very promising generalization abilities to OOD architectures (see subsection 5.1 here https://openreview.net/forum?id=ijK5hyxs0n).\n\n-------------------\n\n***Provide more explanations on mapping from weight to activation space; Why feed the weights W to the network at all and not just use the bias?***\n\nThank you. We understand that this part was not adequately explained in the original paper. Following your comment and since weight space networks are new and relatively unknown, we expanded our previous work section to include more information about DWSNets in the revised version of the paper.\n\nIn a nutshell, weight space networks are composed of weight space layers that map weights and biases $(W_1, b_1,...,W_M,b_M)$ to new weights and biases $(W'_1,b\u2019_1,...,W'_M,b'_M)$.  Importantly, these layers combine information from both biases and weights to output the new set of weight and bias representations. Thus, the output biases, and consequently the predicted permutations are also a function of the input weights, and not only the input biases.\n\nThe reason that using the output bias representation makes sense is that activations and biases reside in the same space. In fact, we use the terms bias space and activation space interchangeably in the paper, which we believe is what caused the confusion."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3288/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700437754585,
                "cdate": 1700437754585,
                "tmdate": 1700437754585,
                "mdate": 1700437754585,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "voOewVCJUj",
            "forum": "iT1ttQXwOg",
            "replyto": "iT1ttQXwOg",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_ZcWa"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_ZcWa"
            ],
            "content": {
                "summary": {
                    "value": "This work presents a learned algorithm to find permutations that align the weights of two networks (e.g. for federated learning, continual learning, model merging). The key innovation of the algorithm is it uses a weight space network to turn input weight vectors into embeddings which can then be aligned as in previous works (via distance in a metric space and Hungarian algorithm). This weight space network is trained using the Sinkhorn method to make the process of finding permutations differentiable."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "This approach appears to improve upon and is complementary to existing approaches, in that it aims to give better permutations than weight matching and is faster than fully learned permutations (termed *Sinkhorn* in this work), but can also be combined with the *Sinkhorn* algorithm. Proofs of exactness and equivalence to activation matching guarantee that this method will be as similarly reliable as activation alignment, where the *Sinkhorn* algorithm does not have the same guarantees. The ability to change the objective function for training the deep weight network makes the algorithm more expressive, akin to *Sinkhorn* algorithm, e.g. so that it can directly optimize for linear connectivity rather than the $L_2$ norm between weights. Some of the results (e.g. table 2) look promising."
                },
                "weaknesses": {
                    "value": "The main limitation I see is that results are not given for sufficiently large/complex models/tasks. For the barrier results, it is known (e.g. in Ainsworth et al. or Jordan et al.) that deeper networks are harder to align so that they are linearly connected, whereas easier networks (e.g. 3-layer MNIST networks) are relatively trivial to align. Also, it's not clear if Deep-Align reliably beats activation matching (which is still relatively fast and scalable), or if Deep-Align + Sinkhorn can beat weight matching + Sinkhorn.\n\nThe major methodological innovations could use much more explanation. The DWSNet would benefit from a full detailed description, given that it is central to the presented approach and based on a very recent work that may not be well known. The Siamese structure and why it guarantees equivariance to transposition should in particular be fully described."
                },
                "questions": {
                    "value": "How does this method scale (re. accuracy and computation time) to larger networks (e.g. VGG models) and residual networks?\nHow does weight-matching + Sinkhorn compare with Deep-Align + Sinkhorn?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Reviewer_ZcWa",
                        "ICLR.cc/2024/Conference/Submission3288/Senior_Area_Chairs"
                    ]
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission3288/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698789432158,
            "cdate": 1698789432158,
            "tmdate": 1700698223704,
            "mdate": 1700698223704,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "cytyKPwAk1",
                "forum": "iT1ttQXwOg",
                "replyto": "voOewVCJUj",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to ZcWa 1/2"
                    },
                    "comment": {
                        "value": "***How does DEEP-ALIGN scale to larger networks (e.g. VGG models)?***\n\nThank you. Following this important comment, we added experiments with deeper architectures, VGG11 with 9M parameters and VGG16 with 15M parameters. We used the same amount of data, 4500 training examples, similar to the CNN experiments in the paper. The experiments show that: (1) DEEP-ALIGN scales well and can process large architectures; and (2) DEEP-ALIGN generalizes well when applied to larger networks without increasing the data size. This demonstrates that DEEP-ALIGN is suitable for processing standard deep architectures. The results are provided here and are added to the revised version of the paper (Appendix F, page 18, \u201cScaling to large networks\u201d).\n\n\n|                       | CIFAR10 (VGG11) |                | CIFAR10 (VGG16) |                |         |\n|:---------------------:|:---------------:|:--------------:|:---------------:|:--------------:|:----------------------:|\n|                       |    Barrier \u2193    |      AUC \u2193     |    Barrier \u2193    |      AUC \u2193     |       Runtime (Sec) \u2193                  |\n|         Naive         |    1.273\u00b10.04   |   0.738\u00b10.02   |    1.131\u00b10.04   |   0.777\u00b10.03   |           ---          |\n|        Sinkhorn       |    0.368\u00b10.00   |   0.041\u00b10.00   |    0.921\u00b10.05   |   0.212\u00b10.02   |         158.40         |\n|       DEEP-ALIGN      |    0.310\u00b10.00   |   0.059\u00b10.00   |    0.779\u00b10.01   |   0.356\u00b10.01   |          0.98          |\n| DEEP-ALIGN + Sinkhorn |  **0.099\u00b10.01** | **0.000\u00b10.00** |  **0.349\u00b10.01** | **0.027\u00b10.01** | 159.38 = 0.98 + 158.40 |\n\n[*Link to results*](https://github.com/DeepAlignPaper/deep-align-results/blob/main/cifar10_VGG.png)\n\n----------------\n\n***How does weight-matching + Sinkhorn compare with Deep-Align + Sinkhorn? Does Deep-Align reliably beats activation matching?***\n\n**Comparison to Weight matching + Sinkhorn**: Following your comment and feedback, we added comparisons to the weight-matching (WM) + Sinkhorn baseline in Tables 1 and 2, and Figure 3 in the revised version of the paper. *Both DEEP-ALIGN and DEEP-ALIGN+Sinkhorn constantly outperform the WM + Sinkhorn baseline in all datasets and model architectures*. We provide here the main results:\n\n|                       |    MNIST (MLP)   |                  |   CIFAR10 (MLP)  |                  |\n|:---------------------:|:----------------:|:----------------:|:----------------:|:----------------:|\n|                       |     Barrier \u2193    |       AUC \u2193      |     Barrier \u2193    |       AUC \u2193      |\n|        Sinkhorn       |   0.027 \u00b1 0.00   |   0.002 \u00b1 0.00   |   0.183 \u00b1 0.00   |   0.072 \u00b1 0.00   |\n|     WM + Sinkhorn     |   0.012 \u00b1 0.00   | **0.000 \u00b1 0.00** |   0.137 \u00b1 0.00   |   0.050 \u00b1 0.00   |\n|       DEEP-ALIGN      |   0.005 \u00b1 0.00   | **0.000 \u00b1 0.00** |   0.078 \u00b1 0.01   |   0.029 \u00b1 0.00   |\n| DEEP-ALIGN + Sinkhorn | **0.000 \u00b1 0.00** | **0.000 \u00b1 0.00** | **0.037 \u00b1 0.00** | **0.004 \u00b1 0.00** |\n|\n\nResults for CNNs:\n\n|                       |   CIFAR10 (CNN)  |                  |    STL10 (CNN)   |                  |                      |\n|:---------------------:|:----------------:|:----------------:|:----------------:|:----------------:|:--------------------:|\n|                       |     Barrier \u2193    |       AUC \u2193      |     Barrier \u2193    |       AUC \u2193      |    Runtime (Sec) \u2193   |\n|        Sinkhorn       |   0.313 \u00b1 0.01   | **0.000 \u00b1 0.00** |   0.366 \u00b1 0.00   |   0.163 \u00b1 0.000  |         79.81        |\n|     WM + Sinkhorn     |   0.333 \u00b1 0.01   | **0.000 \u00b1 0.00** |   0.371 \u00b1 0.00   |   0.165 \u00b1 0.00   | 80.02 = 0.21 + 79.81 |\n|       DEEP-ALIGN      |   0.237 \u00b1 0.01   | **0.000 \u00b1 0.00** |   0.382 \u00b1 0.01   |   0.182 \u00b1 0.00   |         0.44         |\n| DEEP-ALIGN + Sinkhorn | **0.081 \u00b1 0.00** | **0.000 \u00b1 0.00** | **0.232 \u00b1 0.00** | **0.097 \u00b1 0.00** | 80.25 = 0.44 + 79.81 |\n|\n\n**Discussion on results w.r.t. activation matching**: DEEP-ALIGN outperforms activation matching in $3/4$ of the datasets and performs comparably on the remaining dataset. This is achieved while being almost $\\times 20$ faster at inference time."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3288/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700436196421,
                "cdate": 1700436196421,
                "tmdate": 1700436196421,
                "mdate": 1700436196421,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "CfmcbAkCkE",
                "forum": "iT1ttQXwOg",
                "replyto": "cytyKPwAk1",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3288/Reviewer_ZcWa"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3288/Reviewer_ZcWa"
                ],
                "content": {
                    "comment": {
                        "value": "Thank you for the updated experiments which look promising. For a fair evaluation against the baseline methods, could you also include WM + Sinkhorn and activation matching in the evaluations on VGG-11 and VGG-16?"
                    }
                },
                "number": 8,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3288/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700502207535,
                "cdate": 1700502207535,
                "tmdate": 1700502207535,
                "mdate": 1700502207535,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "137h0POCAk",
                "forum": "iT1ttQXwOg",
                "replyto": "6POv4keoFj",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3288/Reviewer_ZcWa"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3288/Reviewer_ZcWa"
                ],
                "content": {
                    "comment": {
                        "value": "Hello, thank you for the quick experiment results. Given the positive comparisons I have raised my score. I do agree with the issues pointed out by other reviewers, such as how the method requires considerable training and how to scale the method to larger networks."
                    }
                },
                "number": 12,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3288/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700698210260,
                "cdate": 1700698210260,
                "tmdate": 1700698210260,
                "mdate": 1700698210260,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "QpJ4D9deeX",
            "forum": "iT1ttQXwOg",
            "replyto": "iT1ttQXwOg",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_qGCa"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission3288/Reviewer_qGCa"
            ],
            "content": {
                "summary": {
                    "value": "This paper attempts to solve the weight alignment problem by introducing a novel deep learning framework. The proposed DEEP-ALIGN method is fast and produce high quality alignment results after the pretrained process. DEEP-ALIGN does not require any labeled data but only depends on input network weight vectors. In addition to a theoretical analysis of the approach, experimental results support that a feed-forward pass with DEEP-ALIGN produces better or equivalent alignments compared to those produced by current optimization algorithms."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. DEEP-ALIGN approach does not require labeled data but only the trained weight vectors.\n2. DEEP-ALIGN performs on par or outperforms optimization-based approaches while significantly reducing the runtime or improving the quality of the alignments.\n3. DEEP-ALIGN maintains good performance as an extra initialization step for Sinkhorn method on OOD data.\n4. The theoretical analysis ensures the existence of the approximate solution that can be represented by DEEP-ALIGN architecture."
                },
                "weaknesses": {
                    "value": "1. This method has to be pre-trained in advance. For experiments conducted on MNIST and CIFAR10, 8000 shallow networks are used to train the model to achieve the claimed performance. For deeper networks that are more common in nowadays deep learning task, this number may grow fast and the training cost can be unacceptable. Also, this paper does not provide experimental results about the relationship between the complexity of weight vectors and the scale of needed training data.\n\n2. The real world applications for this method are unclear due to long the pre-train time. It seems that the traditional methods can compute the weight alignment much more effectively unless a ton of weight vectors need to be aligned so that the inference phase of DEEP-ALIGN dominates. What scenarios feature such characteristics?"
                },
                "questions": {
                    "value": "1. What is the definitions of $\\rho_1$ and $\\rho_2$ in the section 2 Preliminaries?\n2. Is the assumption that the minimizer $k$ in equation (2) is unique reasonable? Any argument that such cases would be rare in practice?\n3. I'm curious about the generalization capability of the model. As mentioned in the paper, the model will be first trained on a dataset of weight vectors and then applied to unseen weight vectors. Is there any possibility that one pertained DEEP-ALIGN model can work for networks of slightly different architectures? Due to the expensive cost of training phase, it can be helpful if one pertained model can work for more scenarios."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "2: You are willing to defend your assessment, but it is quite likely that you did not understand the central parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3288/Reviewer_qGCa"
                    ]
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission3288/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698825863511,
            "cdate": 1698825863511,
            "tmdate": 1700854628786,
            "mdate": 1700854628786,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "FQ69DeTfKs",
                "forum": "iT1ttQXwOg",
                "replyto": "QpJ4D9deeX",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3288/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to qGCa 1/2"
                    },
                    "comment": {
                        "value": "***Is there any possibility that one pertained DEEP-ALIGN model can work for networks of slightly different architectures?***\n\nYes. DEEP-ALIGN is not restricted to a single input network architecture and can be used to align a variety of input network architectures *using the same DEEP-ALIGN model*. This can be done by replacing the DWSNet encoder, with an architecture-agnostic model like the concurrent submissions of https://openreview.net/forum?id=ijK5hyxs0n  and https://openreview.net/forum?id=oO6FsMyDBt. There, the input neural networks are modeled as weighted graphs, and the weight space encoder is implemented using a graph neural network (GNN). That type of GNN architecture can be trained and applied to a wide range of neural architectures, with early experiments showing very promising generalization abilities to OOD architectures (see subsection 5.1 here https://openreview.net/forum?id=ijK5hyxs0n).\n\n-------------\n\n***Scaling to deeper networks and the effect on the required amount of training data.***\n\nThank you. Following this important comment, we added experiments with deeper architectures, VGG11 with 9M parameters and VGG16 with 15M parameters. We used the same amount of data, 4500 training examples, similar to the CNN experiments in the paper. The experiments show that: (1) DEEP-ALIGN scales well and can process large architectures; and (2) DEEP-ALIGN generalizes well when applied to larger networks without increasing the data size. This demonstrates that DEEP-ALIGN is suitable for processing standard deep architectures. The results are provided here and are added to the revised version of the paper (Appendix F, page 18, \u201cScaling to large networks\u201d).\n\n|                       | CIFAR10 (VGG11) |                | CIFAR10 (VGG16) |                |          |\n|:---------------------:|:---------------:|:--------------:|:---------------:|:--------------:|:----------------------:|\n|                       |    Barrier \u2193    |      AUC \u2193     |    Barrier \u2193    |      AUC \u2193     |      Runtime (Sec) \u2193                  |\n|         Naive         |    1.273\u00b10.04   |   0.738\u00b10.02   |    1.131\u00b10.04   |   0.777\u00b10.03   |           ---          |\n|        Sinkhorn       |    0.368\u00b10.00   |   0.041\u00b10.00   |    0.921\u00b10.05   |   0.212\u00b10.02   |         158.40         |\n|       DEEP-ALIGN      |    0.310\u00b10.00   |   0.059\u00b10.00   |    0.779\u00b10.01   |   0.356\u00b10.01   |          0.98          |\n| DEEP-ALIGN + Sinkhorn |  **0.099\u00b10.01** | **0.000\u00b10.00** |  **0.349\u00b10.01** | **0.027\u00b10.01** | 159.38 = 0.98 + 158.40 |\n\n[*Link to results*](https://github.com/DeepAlignPaper/deep-align-results/blob/main/cifar10_VGG.png)\n\n-------\n\n***The real-world applications for this method are unclear due to long pre-train time.***\n\nLike other learning-based methods for solving combinatorial optimization problems, our method is particularly well-suited to applications that require solving many problems repeatedly.\nOne key application is Federated Learning (FL). There, several models trained by clients need to be combined into a single model at the hub (model merging).\nThis is often achieved by FedAvg, which merges models by averaging their weights elementwise in each round of communication. It has been shown (e.g., https://arxiv.org/pdf/2002.06440.pdf) that averaging aligned versions of these weights improves the performance of FedAvg, reduces the number of communication rounds, and improves training convergence.\n\nMotivated by applications from FL, we added a new experiment in which we align models trained using disjoint datasets. To that end, we split the CIFAR10 dataset into two disjoint splits with different class distributions. We train our DEEP-ALIGN model to align CNN networks trained using the different datasets. The merged models achieve lower classification loss compared to the original models. The results are provided here and are added to the revised version of the paper (Subsection 6.1, page 9, \u201cAligning networks trained on disjoint datasets\u201d). \n\n[*Link to results*](https://github.com/DeepAlignPaper/deep-align-results/blob/main/cifar10_disjoint_datasets.png)\n\nOther possible applications are alignment-based mixup as data augmentation for learning in deep weight spaces (see, e.g., http://arxiv.org/abs/2311.08851) and weight-space clustering, for example for analyzing large INR collections.\n\n------------\n\n***What is the definition rho_1 and rho_2?***\n\nThanks for spotting this. $\\rho_1$ and $\\rho_2$ are representations. We fixed the issue in the revised version of the paper."
                    }
                },
                "number": 2,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3288/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700435603477,
                "cdate": 1700435603477,
                "tmdate": 1700435620015,
                "mdate": 1700435620015,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]