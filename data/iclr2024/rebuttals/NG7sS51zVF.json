[
    {
        "title": "Efficient Streaming Language Models with Attention Sinks"
    },
    {
        "review": {
            "id": "OgsYBaMhW6",
            "forum": "NG7sS51zVF",
            "replyto": "NG7sS51zVF",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_MUgn"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_MUgn"
            ],
            "content": {
                "summary": {
                    "value": "The paper introduces StreamingLLM, a framework that enables large language models (LLMs) to handle infinite sequence lengths without fine-tuning. The paper makes the following contributions:\n\n- It observes the attention sink phenomenon, which means that LLMs tend to allocate a lot of attention to the initial tokens, regardless of their semantic importance.\n- It proposes the StreamingLLM framework, which leverages the attention sink phenomenon to retain only the most recent tokens and a few attention sinks, discarding intermediate tokens. This allows LLMs to generate coherent text from recent tokens without a cache reset.\n- It suggests adding a placeholder token as a dedicated attention sink during pre-training, which can further improve the streaming performance of LLMs.\n- It demonstrates that StreamingLLM can enable models like Llama-2, MPT, Falcon, and Pythia to perform efficient language modeling with up to 4 million tokens."
                },
                "soundness": {
                    "value": "4 excellent"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "4 excellent"
                },
                "strengths": {
                    "value": "- This paper studies an important topic/setting on the long context of large language models, how to enhance LLMs to handle long/infinite sequence without fine-tuning.\n- Attention sink phenomenon is remarkably interesting. It was found that retaining the KV of initial tokens can significantly improve the performance of window attention. \n- This paper poses comprehensive experimental investigations on different large language models, and it also shows that StreamingLLM outperforms other baselines by up to 22.2\u00d7 speedup in streaming settings.\n- The paper is well written, clear to follow."
                },
                "weaknesses": {
                    "value": "See Questions Section"
                },
                "questions": {
                    "value": "- The authors focus on LLMs that are autoregressive, meaning that they generate text one token at a time, conditioned on the previous tokens. Dose the attention sink phenomenon exist in other types of models, such as bidirectional models (e.g., BERT) or non-transformers models?\n- Can attention sink be applied to the pre-training stage, retaining more placeholders from scratch to further improve the performance?\n- Does this phenomenon also exist in larger models like Falcon-40B, LLaMa2-70B?\n- Does the Group Query Attention structure have any impact?\n- If you combine proposed Attention Sink with Sliding Window w re-computation, I wonder whether it performs better than re-computation."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "8: accept, good paper"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission2631/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698767137585,
            "cdate": 1698767137585,
            "tmdate": 1699636202880,
            "mdate": 1699636202880,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "SyD6o7x5AN",
                "forum": "NG7sS51zVF",
                "replyto": "OgsYBaMhW6",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer MUgn"
                    },
                    "comment": {
                        "value": "**Q: Attention Sink Phenomenon in Non-Autoregressive Models**\n\nA: The attention sink phenomenon is not exclusive to autoregressive models, which we focused on in our study. Appendix Section H of our revised paper shows that encoder models, like BERT, also exhibit this phenomenon. Concurrent to our work, Darcet et al. observe similar attention concentration on random background patch tokens in Vision Transformers, termed \"registers.\" This suggests that the tendency to allocate significant attention to sink tokens might be a broader characteristic of transformer architectures, irrespective of whether they are autoregressive or bidirectional.\n\n---\n\n**Q: Using more Attention Sinks in the Pre-Training Stage**\n\nA: Thanks for your suggestion. We added an experiment where we pre-trained the 160M language model with two sink tokens, detailed in Appendix Section I. Our experiments indicated that adding more than one attention sink token does not significantly enhance performance. This finding suggests that a single dedicated attention sink during pre-training is sufficient to leverage the benefits of this phenomenon.\n\n---\n\n**Q: Attention Sink Phenomenon in Larger Models**\n\nA: Yes, this phenomenon persists in larger models like Falcon-40B and Llama2-70B. We conducted perplexity experiments in Figure 5 to confirm this and included visualizations in Appendix Section G of our manuscript. These results demonstrate that the attention sink phenomenon exists across different model sizes, and StreamingLLM is scalable to all of them.\n\n---\n\n**Q: Impact of Multi/Group Query Attention Structure**\n\nA: The attention sink phenomenon was still observable in our experiments, including models like Falcon-40B using multi-query attention and Llama-2-70B using group-query attention. This suggests that different attention structures, such as group query attention, do not negate the presence of attention sinks (Appendix G). StreamingLLM effectively addresses this issue despite the architecture differences (Figure 5), demonstrating its versatility across various model architectures.\n\n---\n\n**Q: Combining Attention Sink with Sliding Window with Re-computation**\n\nA: Combining attention sinks with sliding windows with re-computation does not provide additional benefits over re-computation alone. This is because the sliding window with re-computation inherently includes full attention on truncated text, meaning attention sinks are always present. This is why sliding windows with re-computation perform better than the window attention baseline. Our approach with StreamingLLM focuses on efficiency and speed, significantly reducing the computational complexity compared to this baseline.\n\n[1] Darcet, T., Oquab, M., Mairal, J., & Bojanowski, P. (2023). Vision Transformers Need Registers. *ArXiv*. /abs/2309.16588"
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission2631/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700538397487,
                "cdate": 1700538397487,
                "tmdate": 1700540443671,
                "mdate": 1700540443671,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "XyOtZijfsr",
            "forum": "NG7sS51zVF",
            "replyto": "NG7sS51zVF",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_STcB"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_STcB"
            ],
            "content": {
                "summary": {
                    "value": "This paper demonstrates that the first few token(s), called attention sink, take most of the attention scores in large language models and propose StreamingLLM by keeping them in the KV cache. StreamingLLM achieves significant speedup compared to the baseline of sliding window attention with recomputation while having reasonable language modeling perplexity and zero-shot accuracy on several NLP benchmarks. Additionally, the authors pre-trained a small language model with a single learnable sink token so that StreamingLLM can only use one token for attention sink."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "4 excellent"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "Improving the efficiency of language modeling with long text input is a practically important and very timely topic. The paper is well motivated and structured in that it first introduces problems, suggests an easy and effective solution, and validates it with experiments and required ablation studies."
                },
                "weaknesses": {
                    "value": "StreamingLLM is compared with only very basic baselines (i.e., (a) dense attention, (b) window attention, and (c) sliding window with re-computation) without alternative ways to use LLMs with longer inputs. The authors argue StreamingLLM\u2019s 22.2x speedup compared to (c), but it looks too extreme because there could be a sweet spot that could achieve reasonable ppl and inference speed by sliding window with appropriate strides (less frequent re-computation instead of every step).\n\nThe paper argues that StreamingLLM can handle infinite sequence length, but again the abovementioned basic baselines on PG-19 are used to show this. Experiments on benchmark datasets that truly require long context modeling are necessary. Also, providing numbers of SoTA models on PG-19 could be helpful in understanding how absolutely StreamingLLM performs well, though accuracy might not be the main interest of this paper. Particularly, using a small size cache (not beyond the training sequence length) makes it suspicious whether StreamingLLM is capturing long context information well. I guess it will have difficulty utilizing information from tokens that do not belong to the cache at the prediction step, and this can be easily checked with synthetic datasets (e.g., Little Retrieval Test).\n\nThere have been several previous works that observe position bias on attention patterns in transformers. Also, there are existing architectures, including LongFormer, BigBird, and ETC, that have global tokens for attention, though most of them are encoder-based language models. It is worth having a discussion on them."
                },
                "questions": {
                    "value": "Could you elaborate more on why (1) window attention blows up and (2) attention sink exists?\nI think current explanations are mostly empirical and not theoretically grounded. Specifically, I agree that attention scores could be skewed toward earlier tokens due to the autoregressive nature of language models. However, why very few (less than 4) tokens are enough to cover most attention scores?\n\nVisualization on a short sequence (length 16) in Figure 2 might not be enough. Does the same phenomenon occur for longer sequences, which is our main interest? I guess some important tokens with high attention scores might be shown up for each text (of course, it will not be shown if you average per position over different texts). Do you have any quantitative values on how much attention sink occupies the attention scores (especially for longer inputs)?\n\nIn Figure 3, MPT has different patterns from other LLMs. Is it because MPT uses ALiBi and others use RoPE? Any explanation?\n\nRegarding pre-training with a sink token, I think reducing 4 -> 1 is not important considering the large size of the cache. Am I missing? It could be marginal but why is a model with a sink token consistently better than the vanilla one? An LM with 160M parameters is used, and I understand this is because of the academic budget. I am just wondering if the same conclusion can be guaranteed for larger LMs. \n\nIn Figure 10,  why do two options have different memory usage for 4096 cache size?\n\nThis paper uses the attention sink for efficient streaming of LLMs. However, my one aspect is having attention sink is a kind of artifact of autoregressive LLMs not fully utilizing its representation power. Can we make/train LLMs not to have the attention sink for better performance?\n\nThere is almost similar concurrent work: LM-Infinite (https://arxiv.org/abs/2308.16137). It is not required, but how do you compare your work with this?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission2631/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698798731210,
            "cdate": 1698798731210,
            "tmdate": 1699636202799,
            "mdate": 1699636202799,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "arApzSMffS",
                "forum": "NG7sS51zVF",
                "replyto": "XyOtZijfsr",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer STcB (1/2)"
                    },
                    "comment": {
                        "value": "**Q: Comparison with Sliding Window with Re-computation**\n\nA: We appreciate your point about comparing StreamingLLM with sliding window approaches with varying strides. Our 22.2x speedup comparison was established under identical conditions to ensure a fair evaluation. StreamingLLM's linear $O(N)$ complexity contrasts sharply with the sliding window's quadratic $O(N^2)$ complexity. While adjusting stride lengths in sliding windows may offer some efficiency, it introduces context size and computational workload variability, resulting in inconsistent decoding times and greater computational demands during re-computation phases. This inconsistency is a significant drawback compared to StreamingLLM's consistent performance and computational efficiency.\n\n---\n\n**Q: Misunderstanding of Long-Context**\n\nA: It is crucial to highlight that StreamingLLM is not designed to extend the context window or enhance long-term memory capabilities. Instead, its primary aim is efficient text generation from recent tokens without frequent cache refreshes. We have included further clarification on this in Appendix Section A, to articulate StreamingLLM's intended application better and differentiate it from long-context models.\n\n---\n\n**Q: Missing Discussion with Related Works**\n\nA: Thank you for pointing out the need for a more detailed comparison with related works. We have added Appendix Section B to include a comprehensive discussion on architectures like LongFormer, BigBird, and ETC that employ global tokens for attention. This enhanced comparison delineates the unique aspects of our approach, emphasizing its simplicity and compatibility with existing transformer architectures while also recognizing the foundational concepts established by these earlier models.\n\n---\n\n**Q: Why Does Window Attention Blow Up?**\n\nA: The issue of window attention blowing up is linked to the dynamics of the SoftMax function used in attention mechanisms. As detailed in Appendix Section F, more than half of attention scores in most layers and heads are allocated to the first token. Over half of the SoftMax function's denominator is removed when these initial tokens are evicted. This significant alteration in the attention score distribution deviates from the model's pre-training conditions, leading to a drastic change in the SoftMax distribution. Consequently, this results in model performance degradation, as the attention mechanism no longer functions as it was trained to.\n\n---\n\n**Q: Why Does Attention Sink Exist? Why Are Few Tokens Enough?**\n\nA: The attention sink phenomenon primarily arises from the characteristics of the SoftMax function used in attention mechanisms. SoftMax necessitates that all attended tokens\u2019 attention scores add up to one, forcing the model to distribute some attention across contextual tokens even when the current token embedding already contains ample self-relevant information for prediction or lacks a strong correlation with many preceding keys. As a result, the model learns to allocate excessive attention scores to certain tokens.\n\nGiven the sequential nature of autoregressive language modeling, initial tokens are consistently visible to all subsequent tokens. In contrast, later tokens have visibility restricted to fewer subsequent tokens. This visibility pattern predisposes initial tokens to become attention sinks as they are capable of absorbing unnecessary attention from a wider range of tokens.\n\nWe empirically observe that the number of tokens required to function as effective attention sinks are relatively small. A few tokens are typically sufficient to absorb excess attention. The precise reason why this limited number of tokens is adequate remains an area for future theoretical research. \n\n---\n\n**Q: Attention Map Visualization on Long Sequences**\n\nA: The attention sink phenomenon persists across all sequence lengths. For clarity in visualization, we focused on shorter sequences in the paper\u2019s figure. In Appendix Section E of our updated manuscript, we include attention map visualizations for longer sequences, illustrating this phenomenon's consistency. Appendix Section F also includes quantitative results on the ratio of attention sinks\u2019 attention scores on long sequences with 4096 tokens."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission2631/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700538079403,
                "cdate": 1700538079403,
                "tmdate": 1700538079403,
                "mdate": 1700538079403,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "bcBW19xP2T",
                "forum": "NG7sS51zVF",
                "replyto": "XyOtZijfsr",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer STcB (2/2)"
                    },
                    "comment": {
                        "value": "**Q: Quantitative Results on Attention Sinks\u2019 Attention Scores**\n\nA: Thank you for your suggestion! We conducted experiments to quantify the attention sinks' score ratio in the Llama models in Appendix Section F. We plotted attention allocated by the 4096th token to the initial token in every layer. Notably, the attention scores for the first token are significantly high, often exceeding half of the total attention, except for the two bottom layers. This observation empirically substantiates the preferential focus on the first token by most layers and heads, irrespective of other tokens' distances within the sequence. Such a trend underscores the critical role of the initial tokens in a sequence, as their removal greatly impacts language model performance due to a large portion of the denominator in the SoftMax function being removed.\n\n---\n\n**Q: Explanation for MPT\u2019s Different Perplexity Curve Pattern**\n\nA: The general behavior of the MPT model aligns with that observed in RoPE models, particularly in how perplexity sharply rises when the input length surpasses the pre-training length in dense attention scenarios and similarly when it exceeds the cache size in window attention contexts.\n\nHowever, the specific perplexity curve pattern in MPT differs due to a combination of factors, including variations in pre-training approaches, model architecture, training datasets, positional encoding, and activation functions. A comprehensive analysis of these discrepancies and their underlying causes is complex and falls outside the scope of our current work. We acknowledge this as an area for future research to explore in more detail.\n\n---\n\n**Q: Purpose of Pre-training Experiments**\n\nA: Our pre-training experiments aimed to test whether introducing a globally visible sink token would direct excessive attention to this token, thus eliminating other attention sinks. This experiment validated our hypothesis, showing that a single token is enough to recover the streaming perplexity, and the model no longer relies on other initial tokens. While our study used 160M LM due to budget constraints, we expect our pre-training solution to generalize to larger models. Future research with more resources can test our findings in larger LLMs.\n\n---\n\n**Q: Different Memory Usage in StreamingLLM vs. Sliding Window with Re-computation**\n\nA: The slightly higher memory usage in sliding windows with recomputation is attributed to the need for intermediate variables for the full QxK quadratic attention computation. In contrast, StreamingLLM efficiently computes only the qxK attention, reducing overall memory requirements.\n\n---\n\n**Q: Possibility of LLMs Without Attention Sink**\n\nA: Your suggestion of potentially training LLMs without attention sinks to enhance performance is intriguing and warrants further exploration. The involvement of the SoftMax function in the formation of attention sinks is a critical aspect to consider. Investigating alternatives to SoftMax for attention computation could indeed be a promising avenue. Additionally, incorporating a trainable denominator within the SoftMax function presents another viable approach.\n\n---\n\n**Q: Comparison with Concurrent Work (LM-Infinite)**\n\nA: LM-Infinite (Han et al., 2023) offers valuable theoretical insights into LLM length generation failure, identifying three out-of-distribution factors. Inspired by this analysis, their approach involves employing a \"\"$\\Lambda$-shaped\" attention pattern and reconfiguring position encoding distances to enhance length generalization in LLMs. This approach bears a resemblance to our methodology. \n\nDistinctly, our work uncovers the \"attention sink\" phenomenon by looking into the attention maps of LLMs, wherein Transformer models assign high attention scores to initial tokens with minor semantics. This phenomenon extends beyond the scope of length generalization failure, indicating a more pervasive issue in Transformer models. We observe this \"attention sink\" behavior not only in auto-regressive language models but also in encoder Transformers such as BERT (see Appendix Section H) and Vision Transformers (Darcet et al., 2023), suggesting its broader prevalence in Transformer architectures. To mitigate the \u201cattention sink\u201d phenomenon, we propose the introduction of a learnable sink token during pre-training, and we support our findings with extensive ablation studies. We believe our work and LM-Infinite contribute unique insights to the same topic, providing valuable empirical evidence and theoretical perspectives that can inform future developments in Transformer model architecture.\n\nWe have added this discussion in Appendix Section B in our revised paper.\n\n[1] Darcet, T., Oquab, M., Mairal, J., & Bojanowski, P. (2023). Vision Transformers Need Registers. *ArXiv*. /abs/2309.16588\n\n[2] Han, C., Wang, Q., Xiong, W., Chen, Y., Ji, H., & Wang, S. (2023). LM-Infinite: Simple On-the-Fly Length Generalization for Large Language Models. *ArXiv*. /abs/2308.16137"
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission2631/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700538266236,
                "cdate": 1700538266236,
                "tmdate": 1700540318941,
                "mdate": 1700540318941,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "Dv0vEJdMrF",
            "forum": "NG7sS51zVF",
            "replyto": "NG7sS51zVF",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_obg3"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_obg3"
            ],
            "content": {
                "summary": {
                    "value": "The paper focuses on the challenge of efficiently scaling and generalizing beyond the training sequence length for large language models. Specifically, they propose to cache and attend to the initial tokens of the sequence in addition to the most recent tokens used in window attention. The main motivation behind this proposal is the \"attention sink\" phenomenon that is caused by the strong attention scores toward initial tokens that are accumulated as the sequence increases. Since this method introduces this simple change of attending to the initial tokens, it can be applied to any LLM; they also show it is possible to train the model with a single token as attention sink for further efficiency. Experiments on a models of vaying model size show that it allows them to generalize far beyond their context window and it is much faster than sliding window with recomputation."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "4 excellent"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "- Several methods have been introduced in the past for generalizing to longer context lengths but most of them require training the model from scratch or through continued training. The observation that this paper is making about the attention sink phenomenon is fascinating and inspires a simple solution that requires no additional training that prior work has overlooked. \n- The paper is positioned well wrt. prior length generalization work and shows how different relative positional embedding methods such as RoPE anD Alibi can be combined with attention sinks. The fact that it can be combined with any of these methods with minimal effort makes it potentially very impactful; virtually any transformer model can be modified to handle large context sizes in this way. \n - The exposition is clear and experimental part well executed. The empirical analysis based on actual attention logits and the theoretical explanation of why it happens is convincing and intuitive. \n- Evaluation covers models of different sizes and different metrics (perplexity and downstream performance) and shows that proposed attention is effective across all sequence lengths."
                },
                "weaknesses": {
                    "value": "- The proposed attention is reminiscent of methods that introduce sparse attention patterns such as Sparse Transformer but there is no in-depth discussion that draws a connection.\n- Even though attention sinks maintains the perplexity levels in check for extremely large sequence lengths, the paper does not study in detail on how good utilization of the context the model is doing."
                },
                "questions": {
                    "value": "- Have you considered evaluating on a benchmark for long-range tasks such as LongBenh, MuLD or Long-range arena? It would help quantify limitations of the proposed attention in terms of context utilization."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "details_of_ethics_concerns": {
                    "value": "NA"
                },
                "rating": {
                    "value": "8: accept, good paper"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission2631/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698823965952,
            "cdate": 1698823965952,
            "tmdate": 1699636202708,
            "mdate": 1699636202708,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "Z3L65zvXnj",
                "forum": "NG7sS51zVF",
                "replyto": "Dv0vEJdMrF",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer obg3"
                    },
                    "comment": {
                        "value": "**Q: Missing Discussion with Related Works**\n\nA: We value your feedback on contextualizing our work with prior literature. In response, we have added Appendix Section B to include a comprehensive discussion that contrasts our attention sink mechanism with sparse attention patterns found in models like Sparse Transformer, LongFormer, and BigBird. This enhanced comparison delineates the unique aspects of our approach, emphasizing its simplicity and compatibility with existing transformer architectures while also recognizing the foundational concepts established by these earlier models.\n\n---\n\n**Q: Utilization of the Context**\n\nA: We acknowledge the importance of evaluating how effectively the model utilizes context, especially when introducing attention sinks. In our initial experiments, we observed satisfactory context utilization within the cache limits, shown as the language modeling performance is comparable with the oracle baseline, i.e., sliding window with re-computation.\n\nTo analyze the extent of context utilization beyond these cache limits, we conducted further experiments, detailed in Appendix Section C, to assess context utilization when dealing with cache-exceeding information. The findings corroborate that StreamingLLM\u2019s capacity to utilize context is limited to the current cache, with no ability to leverage evicted tokens. It's crucial to emphasize that StreamingLLM's primary aim is not to augment the context window or boost long-term memory retention. Instead, its strength lies in generating coherent text from recent tokens without necessitating cache refreshes.\n\nMoreover, our experiments demonstrate that StreamingLLM can be integrated with recent advancements in context extension methods. With context-extended models, we can use larger caches to maintain a broader range of recent tokens in StreamingLLM. For a demonstration of StreamingLLM's integration with models like LongChat-7B-v1.5-32K and Llama-2-7B-32K-Instruct, please refer to Figure 9 in our paper.\n\n---\n\n**Q: Long-Range Benchmark Evaluation**\n\nA: Following your recommendation, we have evaluated StreamingLLM on long-range tasks using LongBench (Bai et al., 2023), which includes diverse NLP challenges. Our focus was on assessing how StreamingLLM, particularly using the Llama-2-7B-chat model with a maximum context length of 4k, performs on tasks like single-document QA (NarrativeQA and Qasper), multi-document QA (HotpotQA and 2WikiMQA), and summarization (GovReport and MultiNews).\n\nThe results in Appendix Section D of our revised manuscript show that StreamingLLM's performance is on par with the text truncation baseline. However, it's crucial to note that StreamingLLM is not primarily designed to enhance the utilization of long texts. Its strength lies in efficiently utilizing recent information without the need for cache refreshes or extensive memory. Therefore, while we acknowledge this limitation, addressing it falls outside the scope of our current work and is a potential area for future research.\n\n[1] Bai, Y., Lv, X., Zhang, J., Lyu, H., Tang, J., Huang, Z., Du, Z., Liu, X., Zeng, A., Hou, L., Dong, Y., Tang, J., & Li, J. (2023). LongBench: A Bilingual, Multitask Benchmark for Long Context Understanding. *ArXiv*. /abs/2308.14508"
                    }
                },
                "number": 3,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission2631/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700537736793,
                "cdate": 1700537736793,
                "tmdate": 1700537736793,
                "mdate": 1700537736793,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "d9lo508EW9",
                "forum": "NG7sS51zVF",
                "replyto": "Z3L65zvXnj",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission2631/Reviewer_obg3"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission2631/Reviewer_obg3"
                ],
                "content": {
                    "title": {
                        "value": "Response to rebuttal"
                    },
                    "comment": {
                        "value": "Thank you for the response. I appreciate the additional experiments and for making the point clear about this limitation of attention sinks; would be great if this is reflected in the main text as well."
                    }
                },
                "number": 15,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission2631/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700702729937,
                "cdate": 1700702729937,
                "tmdate": 1700702729937,
                "mdate": 1700702729937,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "wphsValytr",
            "forum": "NG7sS51zVF",
            "replyto": "NG7sS51zVF",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_PzfP"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission2631/Reviewer_PzfP"
            ],
            "content": {
                "summary": {
                    "value": "This work proposes the addition of a placeholder token, called a token sink, to language models.This is motivated by the observation that significant attention mass is placed at the initial token positions in a sequence and performance deteriotes whenever tokens in this position are dropped/evicted. The authors carry out extensive experiments to validate this claim and make a convincing argument for the placement of a special token in the initial position, whose purpose is to help regulate and channel the attention mass across layers. This leads to stable language model performance at million-scale sequence lengths."
                },
                "soundness": {
                    "value": "4 excellent"
                },
                "presentation": {
                    "value": "4 excellent"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "The paper is well written, the problem is well motivated with many experiments used to help make a convincing claim.\n\nAll code and datasets are made available, allowing for easy reproducibility and validation of claims made in this work."
                },
                "weaknesses": {
                    "value": "The claims on long horizon performance need additional clarity and evaluation. I am not sure how practically useful this approach is for long-horizon language modelling.. For example, at million-scale sequence lengths, when intermediate tokens are evicted, how does performance translate relative to the evicted tokens? Doesnt it mean, the model is only practically useful for information covered at the beginning of the sequence and at the end?\n\nThere is a missing section on the broader societal impacts of this work."
                },
                "questions": {
                    "value": "It is interesting to see how concentrated attention gets on the initial tokens as you go deeper into the model, could it be said that these tokens are carrying out some form of global memory/attention operation?\n\nHow does this work relate to [Vision Transformers Need Register](https://arxiv.org/abs/2309.16588v1).. This statement from this work reminds me of the registers paper; \"As a result,\ninitial tokens are more easily trained to serve as attention sinks, capturing unnecessary attention\"\n\nLooking at the StreamEval benchmark, it would also be good to have an idea of how performance decays with length. How does it perform when you ask it a question related to line 1k, after it has seen 10/100k lines. This gives a better idea of long-context/sequence performance profile than consistently quering only 20 lines prior. I would be willing to improve my score if i had better insight of how this method performed on such a benchmark over (extremely) long horizons. How it performs relative to the evicted tokens."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission2631/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699241496208,
            "cdate": 1699241496208,
            "tmdate": 1699636202631,
            "mdate": 1699636202631,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "RFSJ7cs3to",
                "forum": "NG7sS51zVF",
                "replyto": "wphsValytr",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission2631/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer PzfP"
                    },
                    "comment": {
                        "value": "**Q: Practical Application of StreamingLLM**\n\nA: Thank you for your insightful question! StreamingLLM is especially suited for applications requiring continuous, compute- and memory-efficient operation, such as a conversational AI assistant. Unlike previous methods that lose context or need time-intensive recomputation of KV states, StreamingLLM maintains conversational continuity and context without cache refresh. To illustrate, we emulate multi-round dialogues in real-world settings using instruction-tuned LLMs (Section 4.3). Our results demonstrate StreamingLLM's ability to produce quality outputs without KV recomputation or cache refresh. We have included a discussion in Appendix Section A in our revised paper.\n\n---\n\n**Q: Discussion on Broader Societal Impacts**\n\nA: We acknowledge the importance of discussing the broader societal impacts of our research. To address this, we have expanded our manuscript to include thoroughly examining ethical considerations, potential societal benefits, and risks associated with StreamingLLM. This comprehensive discussion can be found in Appendix Section A of the revised paper.\n\n---\n\n\n**Q: Interpreting Attention Sinks as Global Memory**\n\nA: We value your perspective on attention sinks. However, we think interpreting attention sinks in autoregressive language models as global memory may not be accurate. In these models, tokens are limited to attending to preceding tokens, not subsequent ones. Thus, the attention sinks, being initial tokens, don't aggregate information from future tokens and can't serve as global memory.\n\n---\n\n\n**Q: Relation to \u201cViTs Need Registers\u201d (Darcet et al., 2023)**\n\nA: Your connection to the \u201cViTs Need Registers\u201d paper is insightful. Their study observed attention spikes on random background patch tokens in Vision Transformers, identified as \"registers\" holding global image information. They proposed adding dedicated \"register\" tokens to provide storage space and mitigate these attention spikes. Similarly, in our work, the \"attention sinks\" are initial tokens that attract disproportionate attention scores from subsequent tokens. We discovered that introducing a dedicated sink token during pre-training can prevent the model from using actual content tokens as attention sinks, resulting in cleaner attention maps.\n\nOur analysis suggests that the softmax function in attention mechanisms plays a crucial role in the emergence of both phenomena, as it causes models to concentrate excess attention on specific tokens. However, there's a notable distinction: while \"registers\" in Vision Transformers serve as global information repositories within intermediate layers, our \"attention sinks\" are initial tokens in autoregressive models. This positional difference means they don't provide similar global information storage, indicating that the softmax function's role in attention computation may be a more fundamental factor in developing attention sinks.\n\nThis comparison underscores the similarities and differences in how attention is managed across different transformer models and provides a deeper understanding of how attention mechanisms can be optimized in future models. We have included this discussion in Appendix Section B.\n\n---\n\n**Q: Accuracy on StreamEval with Increasing Line Distance**\n\nA: In response to your feedback, we conducted further experiments to evaluate StreamingLLM's performance with extended dependencies. As detailed in Appendix Section C of our revised manuscript, StreamingLLM maintains accuracy when the token distance between the query and answer is within the cache size. However, accuracy diminishes as this distance increases and eventually drops to zero when it surpasses the cache capacity.\n\nThese results demonstrate that while StreamingLLM effectively generates coherent text based on recent context, it cannot extend the context length of language models. These results also emphasize a broader challenge in current language models: their inability to utilize context information within the cache fully, a finding that aligns with the observations made by the \u201cLost-in-the-Middle\u201d paper (Liu et al., 2023).\n\nIncluding these results in our manuscript provides a clearer picture of both the strengths and limitations of StreamingLLM, particularly in scenarios requiring the management of extremely long contexts.\n\n[1] Liu, N. F., Lin, K., Hewitt, J., Paranjape, A., Bevilacqua, M., Petroni, F., & Liang, P. (2023). Lost in the Middle: How Language Models Use Long Contexts. ArXiv. /abs/2307.03172\n\n[2] Darcet, T., Oquab, M., Mairal, J., & Bojanowski, P. (2023). Vision Transformers Need Registers. ArXiv. /abs/2309.16588"
                    }
                },
                "number": 2,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission2631/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700537336520,
                "cdate": 1700537336520,
                "tmdate": 1700537416159,
                "mdate": 1700537416159,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]