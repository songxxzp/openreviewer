[
    {
        "title": "Nugget 2D: Dynamic Contextual Compression for Scaling Decoder-only Language Models"
    },
    {
        "review": {
            "id": "NllZ3xlOu8",
            "forum": "jVsXDLIt45",
            "replyto": "jVsXDLIt45",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4624/Reviewer_TZ9E"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4624/Reviewer_TZ9E"
            ],
            "content": {
                "summary": {
                    "value": "This paper extends the Nugget approach [Qin, Durme, '23] from encoder-decoder architectures to decoder only architectures and explores its applications to compression of context in auto-encoding, auto-regressive decoding and downstream tasks like QA and summarization.\nIn all applications, the context to be compressed is encoded by a Nugget2D encoder, which seems to be a vanilla transformer encoder (initialized by some Llama variant LLM). The encodings are passed through a scorer and embeddings from the top-k scores are selected (similar to the original Nugget paper). Finally a separate LM (again initialized using some Llama variant LLM) operates on the actual task, encodes prompt/question and decodes the answer. This LM is trained to attend to only the selected nugget encodings. To easily propagate gradients to the scorer, during this attention mechanism between LM and nugget encoder, the scores are added to the attention logits (similar to the original nugget paper). The LM, nugget encoder and scorer are finetuned using PEFT.\nThe paper demonstrates that on the task of auto-encoding, Nugget2D outperforms ICAE, which allocates fixed size memory for compression, on the auto-regressive LM task, Nugget2D outperforms \"Compressive\" baseline, which pools the embeddings of context divided into constant sized chunks. On the QA task, their model retains 90% of the performance of an uncompressed baseline at 5x compression. Interestingly on the summarization task, their model outperforms baseline without an compression."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "Main strength of the paper is to show that the original Nugget approach can be scaled and adapted to be used by LLMs. The technique is also adapted to various use cases: auto-regressive LM, auto-encoding and downstream tasks. They show strong results compared to baseline approaches considered in the paper."
                },
                "weaknesses": {
                    "value": "The weaknesses of the paper are as follows:\n1. The novelty of the key idea. Extending nugget to nugget2D seems to be a straightforward extension by changing the residual connections.\n2. Some experimental results/comparisons are not clear. \n    a) The results of the section 4.2 are not provided in a table, but depicted in a figure: figure 4. I found Figure 4 to be hard to    interpret and not clear at all. What do the bars represent there, ICAE bar is missing for x axis values 100, 200, 300?\n    b) For results in 5.2, are the number of trainable parameters for Compressive and nugget 2D comparable? nugget2d employs an encoder and an LM, whose parameters are fine-tuned separately. How does this compare to compressive?\n3. Some missing details about the method and training:\n    a) Is \"informed nugget encoding\" used in the original nugget work still applied in this work?\n    b) In section 2.5, Choice of k, its mentioned that the scorer is not trained on the autoregressive text continuation task, but taken from     the autoencoding experiments, why is that?"
                },
                "questions": {
                    "value": "1. In Fig 2, the attention pattern of the LM is shown, what is the attention pattern within Nugget2D?\n2. In equation 4, do (i, j) represent all possible indices, or are some indices restricted to a subset chosen by the scorer?\n3. Is \"informed nugget encoding\" used in the original nugget work still applied in this work?\n4. In section 2.5, Choice of k, its mentioned that the scorer is not trained on the autoregressive text continuation task, but taken from     the autoencoding experiments, why is that?\n5. For results in 5.2, are the number of trainable parameters for Compressive and nugget 2D comparable? nugget2d employs an encoder and an LM, whose parameters are fine-tuned separately. How does this compare to compressive?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4624/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698886129641,
            "cdate": 1698886129641,
            "tmdate": 1699636441522,
            "mdate": 1699636441522,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "HOBv7E4NxL",
                "forum": "jVsXDLIt45",
                "replyto": "NllZ3xlOu8",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Replies to your comments"
                    },
                    "comment": {
                        "value": "Thank you for a detailed summary of the paper and for acknowledging the contribution of our paper! We made revisions to our paper according to your comments. Due to the space limit, we put some of the new contents in the appendix. Below are our answers to your questions:\n\n## Novelty of the key idea\n\nWe argue that Nugget2D is a non-trivial extension of the Nugget, not only changing the form of nuggets and applying to decoder-only transformers:\n\n- It has a redesigned Scorer module, which does not need to freeze transformer encoder parameters as Nugget does. Also, to train the scorer, Nugget requires a dual decoder, which will be discarded. In contrast, Nugget2D builds residual connections between decoder tokens directly and does not need an auxiliary module.\n- Nugget2D is much more flexible than Nugget: It can flexibly compress any part of a text, achieving different levels of granularity. E.g., in section 6, we compress the document into nuggets but keep the prompt as tokens. Moreover, Nugget2D can do streaming language modeling, autoregressively compressing generated tokens.\n\nWe provide a detailed comparison between the 2 models in Appendix C, covering technical details and their applications.\n\n## Interpretation of autoencoding results\n\nWe did not provide a table to present the result because the baseline ICAE uses boxplots, and we are unable to access their raw results, as we said in our footnote.  The bars in fig4 are the results of ICAE for sequence lengths of 100, 200, and 300. They are nearly 100%, so they are at the top of the graph. We added comments to the caption to clarify the plots. \n\n## Fairness of comparison to Compressive Transformers\n\nWe admit that Nugget2D contains more trainable parameters than Compressive Transformers. However, it is hard for us to change the number of parameters of Compressive Transformers without changing its design. On the other hand, the parameters of both models are much fewer than those of the LLaMA because of LoRA (fewer than 1%). Therefore, the difference between their sizes is nearly negligible. We provide a breakdown of the number of parameters in Appendix D.3, which may alleviate your concerns.\n\n## Does Nugget2D use informed nugget encoding?\n\nNo. We empirically found it is not helpful for downstream tasks. We have 2 speculations (a more thorough discussion can be found in Appendix C):\n\n- A decoder-only transformer uses the hidden state of the last token to predict the next token, thus it naturally gathers context information. Informing the model about the nugget selection might be unnecessary.\n- In the scenario of autoregressive Nugget2D, nugget tokens are encoded with separate parameters, thus a type embedding is obviously redundant.\n\n## Scorer is not trained on the autoregressive text continuation task\n\nWe did not train the scorer for autoregressive LM because there is a chicken-and-egg situation. Instead of taking a certain ratio of tokens as nuggets, autoregressive LM uses a threshold $\\overline{s}$ on scores to select nuggets, which is decided by running scorer on all documents such that $\\overline{s}$ selects out a certain ratio of tokens as nuggets *on average*. However, training the scorer needs a specified $\\overline{s}$ so that the training pipeline can be started. Given the features fed into the scorer do not depend on $\\theta$ or $\\phi$, we find that re-using the scorer in section 2.4 is convenient and works well. We have updated the description in section 2.5 to make this point clearer.\n\n## Attention pattern within Nugget2D\n\nThe attention pattern within Nugget2D is a standard causal masking for decoder-only transformers. We have updated Fig 2 to make it clear.\n\n## Indices in eq 4 (now eq 5)\n\nThe $j$ indices in eq 5 are the indices of nuggets. The i indices in eq 5 are all tokens that attend to the nuggets. We updated the paper to make this point clearer."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4624/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700059114144,
                "cdate": 1700059114144,
                "tmdate": 1700059114144,
                "mdate": 1700059114144,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "ggFNwVkaAa",
                "forum": "jVsXDLIt45",
                "replyto": "NllZ3xlOu8",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Request for response"
                    },
                    "comment": {
                        "value": "Dear reviewer TZ9E,\n\nThank you again for your valuable time and insightful comments.\n\nGiven that the author-reviewer discussion period is coming to a close soon, would you please let us know if our responses have resolved their concerns and if there are any other questions we can address to help recommend our paper?\n\nBest regards!\n\nAuthors"
                    }
                },
                "number": 9,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4624/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700588799678,
                "cdate": 1700588799678,
                "tmdate": 1700588799678,
                "mdate": 1700588799678,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "x19ZcQZ3db",
            "forum": "jVsXDLIt45",
            "replyto": "jVsXDLIt45",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4624/Reviewer_Hb1S"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4624/Reviewer_Hb1S"
            ],
            "content": {
                "summary": {
                    "value": "Qin and Van Durme (2023) proposes NUGGET for encoder-decoder transformer models where the input context to the encoder is \"compressed\" and represented by selected tokens to be conditioned on during decoding. This paper proposes NUGGET2D that extends the idea to decoder-only transformers. The \"nuggets\" are not just the last layer representations from the encoders, but representations of selected tokens in a context on every layer to be conditioned on in decoding the answer. Promising results are shown on autoencoding, language modeling, summarization, and question answering."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "- The method is a novel and useful technique to process long contexts.\n- The experiments on multiple important tasks show promising results."
                },
                "weaknesses": {
                    "value": "- Typo: Before Eq (8) I think you mean \"\\textit{recent} tokens $w_{\\tau+1:t}$\" -- $t$ instead of $i$.\n- The presentation can be improved and multiple questions need to be clarified. Please see Questions. -- Willing to increase the score once the questions are clarified."
                },
                "questions": {
                    "value": "- Please define the NUGGET2D function in Sec. 2.2 NUGGET2D, including what is $\\phi$, instead of letting readers figure out themselves. Later you use \"NUGGET2D\" as a function, but in Sec. 2.2 you only use it as a method name.\n- Perhaps you could consistently use $\\mathbf{z}$ to denote hidden states from $\\phi$. In Eq. (2) (3) (4), are $\\mathbf{x}_i^l$ computed using $\\phi$ but not $\\theta$? \n- How does Qin and Van Durme (2023) train the Scorer? You should also add the explanation to 2.1 Background.\n- You mention in footnote 4 that Scorer quickly converges, and then $s_j$ can be removed from Eq. (5). How do you decide when to remove it? Do you first train all trainable parameters (based on the task) with $s_j$, and then just continue to still train all trainable parameters without $s_j$? Removing $s_j$ will cause all activations to change suddenly; not sure if it's a problem.\n- In Sec. 2.5, can you clarify how you pick $\\tau$?\n- Can you provide analysis about how much space are used by the extra model parameters when you introduce NUGGET2D?  I notice that $\\phi$ and $\\theta$ are not tied.\n- The nugget tokens are picked based on $\\phi$ but not $\\theta$. Is it possible that some tokens' contextualized representations according to $\\theta$ has much information but is not selected based on $\\phi$?\n- First paragraph on page 5 is confusing, e.g., you said $\\theta$ in eq (11) but there's no $\\theta$ in eq (11). Please clarify what re-assignment means with more understandable notations.\n- Is it true that the model only processes $w_r+w_d$ tokens and ignore the beginning tokens if the context is long? Would it be helpful if, like in many long-context processing papers, you still have some \"gist\" tokens to summarize the beginning tokens?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4624/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698932267694,
            "cdate": 1698932267694,
            "tmdate": 1699636441458,
            "mdate": 1699636441458,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "GnxC9ympHa",
                "forum": "jVsXDLIt45",
                "replyto": "x19ZcQZ3db",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Replies to your questions (1/2)"
                    },
                    "comment": {
                        "value": "Thank you for your careful reading and all the useful suggestions! We have updated the paper according to your comments, with some major revisions in section 2.5. Because the main paper is already full, we put some discussions and a new experiment in the appendices. We hope our replies below can address your concerns:\n\n## The definition of the Nugget2D function\n\n$\\mathtt{Nugget2D}$ takes a sequence of texts as inputs. It first encodes the text with the encoder ($\\phi$), and then uses the scorer ($\\varphi$) to select nuggets. The output of $\\mathtt{Nugget2D}$ is the hidden states of the nugget tokens.  We added eq 4 to the main paper to define the $\\mathtt{Nugget2D}$ function. Thanks for your suggestion!\n\n## Is $\\mathbf{x}_i^l$ computed with $\\phi$ not $\\theta$?\n\nThe hidden states $\\mathbf{x}_i^l$ in eq 2 and 3 are computed with $\\phi$ as they are on the $\\mathtt{Nugget2D}$ side. In eq 4 (now eq 5), the $\\mathbf{z}_j^l$  is computed with $\\phi$ because it is a nugget, but $\\mathbf{x}_i^l$ is computed with $\\theta$ because it is on the $\\mathtt{LM}$ side. We added subscript $\\phi$ to eq 2 and 4 to clarify their parameters. \n\n## How do Qin and Van Durme (2023) train the Scorer?\n\nThey build a residual connection between the encoder and decoder to back-propagate the gradients to the scorer. In the revised paper, we added a description of the residual connection in Qin and Van Durme (2023) in section 2.1. Moreover, we discussed its architecture and compared it with the scorer training in Nugget2D in Appendix C.\n\n## Removing the residual connection\n\nWe empirically found that the nugget selection converges after 3000 steps of training. At this stage, removing the residual connection does not cause much performance drop, as the model can quickly adapt to the new attention weights. We did not find any significant performance difference after dropping the residual connection, therefore we did not detach the residual connection for the experiments in the main paper.\n\nYour concern is valid: Removing the residual connection causes the activation to suddenly change and affect the forward propagation. In Appendix B, we discussed an alternative solution to train the Scorer based on the *straight-through estimator*. The basic idea is to subtract  $s_j$ from the attention weights to cancel its effect on the forward pass. However, it does not show any improvement in the experiments of autoencoding. We reckon that LLaMA is so large that it can flexibly adapt to any new attention patterns. \n\n## How do we pick $\\tau$? Do we ignore the beginning tokens? How about gist tokens?\n\nSuppose Nugget2D is decoding the $t$-th token, then $\\tau$ is set as $t-\\omega_r$, which means we compress texts that are more than $\\omega_r$ tokens away. \n\nWe indeed ignore tokens that are $\\omega_r+\\omega_d$ tokens away to make the inference time finite for arbitrarily long sequences. However, we argue that the information is not truncated at $\\omega_r+\\omega_d$: A token can access the information that is $L\\cdot(\\omega_r+\\omega_d)$ tokens earlier, where $L$ is the number of transformer layers, because the information is propagated not only from left to right but also from bottom to top. For example, let $\\omega = \\omega_d + \\omega_r$, then $x_\\omega^{l=1}$ can access $x_0^{l=0}$, $x_{2\\omega}^{l=2}$ can access $x_\\omega^{l=1}$, \u2026, and $x_{L\\cdot\\omega}^{l=L}$ can access $x_{(L-1)\\cdot\\omega}^{l=(L-1)}$. It is similar to the idea of TransfomerXL, which is a recurrence-based transformer variant.\n\nOne could use other compression methods like gist tokens to incorporate more distant information. However, our ultimate goal is to process infinitely long sequences with finite resources, and methods like gist tokens assume a finite sequence length. Moreover, the function of gist tokens overlaps with Nugget2D. For these reasons, we did not introduce a separate compressing method like gist tokens.\nWe have included the above discussion in the revised paper.\n\n## Analysis of additional model space\n\nIt is true that $\\phi$ and $\\theta$ are not tied. Because they are both initialized from the same LLaMA checkpoint, we implement $\\phi$ and $\\theta$ with LoRA, which means we only add a marginal number of parameters to the LLaMA model. With a LoRA rank of 32, the number of all trainable parameters is fewer than 1% of LLaMA, and LLaMA itself is kept frozen. We added a parameter breakdown in Appendix D.3."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4624/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700058412472,
                "cdate": 1700058412472,
                "tmdate": 1700058430064,
                "mdate": 1700058430064,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "XNGhH15E5Q",
                "forum": "jVsXDLIt45",
                "replyto": "x19ZcQZ3db",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Replies to your questions (2/2)"
                    },
                    "comment": {
                        "value": "## Does $\\theta$ prefer different nuggets as $\\varphi$ does?\n\nWe argue that $\\varphi$ tends to select tokens that $\\theta$ prefers, because the parameters of Scorer, $\\varphi$, are trained with a residual connection from the $\\mathtt{Nugget2D}\\_\\phi$ side to the $\\mathtt{LM}\\_\\theta$ side. \nIn section 2.3, we conclude that this training objective will assign higher scores to the nuggets that are most attended to by the target tokens (i.e., tokens encoded with $\\theta$). \n\nTo fully answer this question, we conducted an experiment in Appendix A, where we designed a greedy algorithm to approximate the *optimal nugget selection* that achieves the best downstream performance. We run experiments on language modeling and compare the performance of optimal nugget selection to the nugget Scorer. In conclusion, we found that the nugget selection with Scorer is only 24% different from the optimal selection, and their performance gap is less than 8%, meaning the selection done by Scorer is very close to the oracle.\n\n## Parameter re-assignment\n\nWe have re-organized this section to make the narrative more readable. To answer your question: In the scenario of section 2.3, texts are split into 2 segments (e.g. document and prompt + response), where $\\mathtt{Nugget2D}\\_{\\phi,\\varphi}$ is used to compress one part of text while the $\\mathtt{LM}_\\theta$ encodes the other part. In the scenario of autoregressive Nugget2D in section 2.5, the text is not split but some tokens are selected nuggets. Therefore, $\\phi$ is used to encode the nugget tokens, while $\\theta$ is used to encode the non-nugget tokens. With this re-assignment, Nugget2D is able to decode and compress new tokens in a streaming way.\n\n## Other minor questions\n\nWe have adopted other minor suggestions you pointed out, including using $\\mathbf{z}$ to consistently denote the hidden states selected by $\\phi$, fixing the typos you pointed out, and other minor issues."
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4624/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700058754050,
                "cdate": 1700058754050,
                "tmdate": 1700058754050,
                "mdate": 1700058754050,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "tZobqAfyDW",
                "forum": "jVsXDLIt45",
                "replyto": "x19ZcQZ3db",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4624/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Request for response"
                    },
                    "comment": {
                        "value": "Dear reviewer Hb1S,\n\nThank you again for your valuable time and insightful comments.\n\nGiven that the author-reviewer discussion period is coming to a close soon, would you please let us know if our responses have resolved their concerns and if there are any other questions we can address to help recommend our paper?\n\nBest regards!\n\nAuthors"
                    }
                },
                "number": 8,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4624/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700588760592,
                "cdate": 1700588760592,
                "tmdate": 1700588760592,
                "mdate": 1700588760592,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "CuZXLh9MkU",
            "forum": "jVsXDLIt45",
            "replyto": "jVsXDLIt45",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4624/Reviewer_WuCW"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4624/Reviewer_WuCW"
            ],
            "content": {
                "summary": {
                    "value": "The authors propose NUGGET2D, a NUGGET extension, to solve long context modeling problem for existing LLMs. \nThe main idea of NUGGET2D is to dissect the contextual tokens into local and global parts.\nThe local tokens are fully kept for attention and the global tokens are progressively filtered out by a threshold score.\nThe proposed method is tested on three tasks, i.e. language modeling on WikiText and Pile, question answering on SQuAD and summarization on CNN/Daily Mail."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "4 excellent"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. The idea is well-motivated that only part of contextual token representations are informative.\n2. The redicual connection modification to ensure differentiability is novel.\n3. The empirical results look good."
                },
                "weaknesses": {
                    "value": "1. The experiments are not sufficient to support the main contribution of scaling autoregressive LLMs to long contexts, comparing with recent long-context LLM studies (e.g. RMT, LongLLAMA). See details in Questions.\n2. The idea is quite simple by splitting context tokens into local and global tokens, where the distinguishable part is compressing global tokens with a layer-wise NUGGET.\n\n[1] Scaling Transformer to 1M tokens and beyond with RMT. Aydar et.al. 2023\n[2] Focused Transformer: Contrastive Training for Context Scaling. Tworkowski1 et. al. 2023"
                },
                "questions": {
                    "value": "1. The baseline is relatively limited. It would be good to see other long-context LLMs (e.g. LongLLAMA[1]) as baselines.\n2. I wonder how the memory grows as the context length increases against other context scaling methods. It seems the memory complexity in training stage is $O(n^2 * r)$. What is the limit of the context length of your model?\n3. The context length of downstream tasks is really short. Do you ever try other dataset for long-context downstream task evaluation, such as Multi-News[2], Narrative QA[3] and CUAD[4].\n4. What does \"100k tokens\" on $5.2 stand for? Does it mean context length? How is the random selection process performed?\n\n\n[1] Focused Transformer: Contrastive Training for Context Scaling. Tworkowski1 et. al. 2023\n\n[2] Multinews: A large-scale multi-document summarization dataset and abstractive hierarchical model. Fabbri et.al. 2019\n\n[3] The narrativeqa reading comprehension challenge. Kocisky et al. 2017\n\n[4] CUAD: An expert-annotated nlp dataset for legal contract review. Hendrycks et al., 2021b"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission4624/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission4624/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission4624/Reviewer_WuCW"
                    ]
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4624/-/Official_Review"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1700666259440,
            "cdate": 1700666259440,
            "tmdate": 1700666259440,
            "mdate": 1700666259440,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    }
]