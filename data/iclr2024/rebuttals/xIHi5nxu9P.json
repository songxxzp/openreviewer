[
    {
        "title": "Subtractive Mixture Models via Squaring: Representation and Learning"
    },
    {
        "review": {
            "id": "BViIIZKINN",
            "forum": "xIHi5nxu9P",
            "replyto": "xIHi5nxu9P",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_Bp5w"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_Bp5w"
            ],
            "content": {
                "summary": {
                    "value": "The paper proposes a way to learn and represent mixture models with negative weights by squaring the linear combination defined by these models. The resulting model is cast into the Probabilistic Circuits (PCs) framework and thus further extended to deep mixture models, resulting in the main contribution of the paper, squared non-monotonic PCs (or NPC$^2$s). NPC$^2$s are theoretically proven to be more expressive efficient than regular (or monotonic) PCs, which translates to strong empirical results in a number of benchmarks."
                },
                "soundness": {
                    "value": "4 excellent"
                },
                "presentation": {
                    "value": "4 excellent"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "The work is novel and certainly relevant for the Tractable Probabilistic Models community, since it adds a new and provenly more expressive model to the class of Probabilistic Circuits. More importantly, the main ideas are well developed in the text and thoroughly analyzed both theoretically and empirically, allowing for a well-rounded understanding of this new class of models. The text itself is well written and easy to follow, and the related work develops important connections to other methods and models in the literature of Probabilistic Circuits and beyond."
                },
                "weaknesses": {
                    "value": "The paper is very well executed, and honestly I cannot think of any major flaws or possible improvements besides the couple of questions I outline below."
                },
                "questions": {
                    "value": "1. Unless I missed it, there is no mention of how the number of parameters of the MPCs used in the experiments compare to that of MPC$^2$ and NPC$^2$. I assume the authors used the same number of parameters for all models, which is probably the most natural comparison, but it would be interesting to compare the squared models with an MPC of size equal to that of the unrolled model (e.g. as in the right hand side of Figure 1). I imagine MPC$^2$ and NPC$^2$ would still perform better because, despite being less flexible than the unrolled MPC, they effectively share weights among components, which probably facilitates learning. Would the authors share the same opinion? Weight sharing might be important in practice, and the paper could benefit from exploring this aspect a bit further in the text or experiments.\n2. How does the optimization of NPC$^2$ with SGD compare to that of regular MPCs? Some would argue that optimization is one of the main bottlenecks holding PCs back, since they tend to converge relatively fast, probably quickly getting stuck in local minima. Have the authors observed any notable differences in convergence or stability of the optimization process of NPC$^2$s as compared to MPCs? Even though NPC$^2$s are provenly more expressive than regular MPCs, their utility is heavily tied to how easy they are to learn, and it would be useful to have more insights in that sense.\n\nSmall remarks:\n- I believe the signed logsumexp trick, or a very similar solution, was already used in previous works to compute expectations of arbitrary functions using PCs [1, 2]. The PCs used there did not have negative weights, of course, but the signed logsumexp trick was needed to propagate negative values through the networks since the functions one would compute the expectation of could take negative values. I am not sure the trick is actually mentioned in the papers, but it is certainly used in their respective implementations.\n- Line 227: \u201cthey\u201d is repeated.\n- Line 303: The \u201cto\u201d after \u201canswer\u201d is not necessary."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "8: accept, good paper"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission5955/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698408201157,
            "cdate": 1698408201157,
            "tmdate": 1699636635441,
            "mdate": 1699636635441,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "wwNOblHnCz",
                "forum": "xIHi5nxu9P",
                "replyto": "BViIIZKINN",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We thank the reviewer for appreciating the novelty of our work and the theoretical connections with other tractable probabilistic models. We are also keen on citing the additional work (but references seem missing!)\n\n>There is no mention of how the number of parameters of the MPCs used in the experiments compare to that of MPC^2s and NPC.\n\nIn the experiments we always compare MPCs and NPC^2s having the same number of learnable parameters. We added a sentence in the latest version of the paper in order to make this explicit. We also compare NPC^2 against squared MPCs (MPC^2s) in order to disentangle the effects given by squaring and the negative parameters.\n\n>I imagine MPC and NPC^2 would still perform better because [...] they effectively share weights among components, which probably facilitates learning. Would the authors share the same opinion?\n\nWe perform experiments with squared MPCs (MPC^2s) as well, therefore taking into account parameter sharing for monotonic circuits. Table H.4 (in the latest revision) brings evidence that the parameters sharing given by squaring is beneficial for density estimation even in monotonic circuits (e.g., see results of MPC^2s against MPCs on Gas, Hepmass, Miniboone). And it also supports our claim around negative parameters being the key factor in boosting performance, as NPC^2s outperform MPC^2s.  Theoretically investigating if parameter sharing creates an expressive efficiency advantage or how its influence on learning is interesting future work.\n\n>How does the optimization of NPC with SGD compare to that of regular MPCs? Have the authors observed any notable differences in convergence or stability of the optimization process of NPCs as compared to MPCs?\n\nThe fast convergence to some local minimum with MPCs that the reviewer mentioned has been observed on UCI data sets. By contrast, NPC^2s generally require more epochs to converge than MPCs, but they achieve higher log-likelihoods on both training and test data.\n\nRegarding the stability of optimization, we found NPC^2s to be more sensible to the parameters initialization method than MPCs. In general, choosing initialization is already tricky for MPCs, and it is even more difficult for NPC^2 as parameters are allowed to be negative. In our experiments we investigated initializing NPC^2s by sampling the parameters from a normal distribution independently. However, we found NPC^2s to achieve higher log-likelihoods if they are initialized with non-negative parameters only (i.e., by sampling uniformly between 0 and 1). Our paper is a first attempt to learn non-monotonic circuits in a principled way and at scale.  We believe it can open up plenty of interesting future directions on how to initialize, regularize and learn NPC^2s.\n\n>I believe the signed logsumexp trick [...] was already used in previous works to compute expectations of arbitrary functions using PCs [1, 2].\n\nCan you please provide the references [1, 2] ? We will definitely cite them in our work.\n\n>Typos\n\nThank you! We fixed the typos in the latest version of the paper."
                    }
                },
                "number": 7,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700418443357,
                "cdate": 1700418443357,
                "tmdate": 1700418443357,
                "mdate": 1700418443357,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "vJyu6XKhWU",
                "forum": "xIHi5nxu9P",
                "replyto": "wwNOblHnCz",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Reviewer_Bp5w"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Reviewer_Bp5w"
                ],
                "content": {
                    "comment": {
                        "value": "I thank the authors for the clarifications. I am satisfied with the answers to my questions.\n\n> Regarding the stability of optimization, we found NPC^2s to be more sensible to the parameters initialization method than MPCs. In general, choosing initialization is already tricky for MPCs, and it is even more difficult for NPC^2 as parameters are allowed to be negative. In our experiments we investigated initializing NPC^2s by sampling the parameters from a normal distribution independently. However, we found NPC^2s to achieve higher log-likelihoods if they are initialized with non-negative parameters only (i.e., by sampling uniformly between 0 and 1).\n\nThat is an interesting practical insight that might be highly relevant for future work on NPCs. There is a brief discussion on parameter initialization at the end of the appendix, but I think the authors should include the insights mentioned here in the paper as well, namely that NPCs are more sensitive to the initialization and benefit from non-negative initial parameters.\n\n> Can you please provide the references [1, 2] ? We will definitely cite them in our work.\n\nI am sorry for the missing references in my original review. I included them below.\n\n[1] Mau\u00e1, Denis Deratani, et al. \"Robustifying sum-product networks.\" International Journal of Approximate Reasoning 101 (2018): 163-180.\n\n[2] Correia, Alvaro HC, and Cassio P. de Campos. \"Towards scalable and robust sum-product networks.\" Scalable Uncertainty Management: 13th International Conference, SUM 2019, Compi\u00e8gne, France, December 16\u201318, 2019, Proceedings 13. Springer International Publishing, 2019."
                    }
                },
                "number": 11,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700577829311,
                "cdate": 1700577829311,
                "tmdate": 1700577829311,
                "mdate": 1700577829311,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "IeKXhl5Qbx",
            "forum": "xIHi5nxu9P",
            "replyto": "xIHi5nxu9P",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_Lqff"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_Lqff"
            ],
            "content": {
                "summary": {
                    "value": "Mixture models (herein called MPC) are probability density functions over a domain $X$ that are composed by adding together multiple simpler probability density functions. The authors propose a more general framework, (called NPC), where any functions over the domain $X$ (or specific dimensions of $X$) may be multiplied, added, subtracted together and finally squared to return a non-negative scalar which, under the right conditions the authors prove, can also be normalised yielding a probability density. Given the same number of parameters, the proposed NPC models have far more expressive capability than traditional MPCs, in fact proven exponentially more capacity.\n\nThe authors describe a range of concepts, rooted graphs, tensor circuits, to lead to the conditions for a given NPC to be marginalizable. Theoretical relationships with related work is described and finally experiments demonstrate the efficacy of the propoosed approach."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "- extensive theoretical evaluation\n  - proof of conditions for normalization which significantly affects model design\n  - proof of exponential expresivity\n  - proofs of connections to related methods\n\n- simplicity\n  - take some functions over the space $X$, functions over disjoint subsets of dimensions\n  - multiply them (across disjoint groups)\n  - add them together (functions within a disjoint group)\n  - sum the output and square it to get a single non-negative scalar value\n  - if we followed the rules, we can find the partition function/normalising constant in one forward pass of the function\n  - I feel this is very intuitive and surprisingly simple, and most importantly  avoids difficult normalisation (e.g. MCMC) while yielding a big improvement in expressiveness over standard mixture models. Analytic normalisation also enables conditioning. Sampling is briefly mentioned in the Appendix and appears to be one point to be harder than MPCs."
                },
                "weaknesses": {
                    "value": "While I feel confident I understood the method paper and the paper, I am not familiar with the surrounding literature hence my comments are mainly on the general practicalities and the paper presentation.\n\n## Major Comments\n\nThe main four big questions I have mostly relate to practical considerations  \n- How do I normalise $c(X)$? Much of section 3 is building foundations to finally reach proposition 1 which successfully solves the issue of normalization (which is a significant strength of the paper in my view)\n- For a given dataset, how do I find the rooted graph? The issue is not so carefully discussed, and presumably there is no theoretical or provable result and in practice one must simply employ some sort of architecture search. If not already, this should be clarified in the main paper as I feel it may be an obstacle for practitioners.\n- Given the exponentially more expressiveness, could this easily lead to overfitting? A quick word search in the document doesn't yield results, this is not mentioned once?\n- How do I generate samples? This is described in the appendix and appears to be not as easy compared to MPCs, \n\nI understand if the authors would like to argue this is a more theoretical paper and such practicalities are beyond scope.\n\n## Minor Comments (Presentation)\n\n### Content Density\nUpon first reading, I was exhausted by section 5, however upon second reading the paper made much more sense.\n  - Sections 1, 2 were simple and easy to follow\n  - section 3 was hard work on first reading but very clear on second reading (see details below)\n  - section 4 contains multiple short sharp deep dives into a range of related fields.\n  - section 5 was very short and I personally didn't truly understand the benchmarks nor get a feel for implementing the method or its practicalities or failure modes, (e.g. overfitting, sensitivity to rooted graph, sampling)\n\nGiven the main paper introduces a range of concepts, then proposes a new method, provides proven results and proves connections to related fields and then benchmarks, I feel like this is a (very nice) journal paper that was heavily compressed into 9 pages and all of the overflow was placed in the appendix. \n\nThe theoretical treatment is extensive. The authors may consider moving some of the less significant content regarding other works in Section 4 to the appendix in order to extend section 5 with more \"hands on\" details about the using NPCs, e.g. a worked illustrative example or failure modes or sensitivity to the rooted graph.\n\n### Section 3 detailed comments\nI understand computational graphs have nodes that are operations and the links are tensors, \n- Definition 1 was very hard to follow, the ambiguous notation that $\\ell$ represent a layer as well as a numerical output tensor from a layer. \n- Figure 2 b, c, blur the boundary of \"nodes\" and \"edges\", there are rectangles with operations, and there are volumes between them also with operations (hadamard product and $W$). Even now I struggle to parse these diagrams."
                },
                "questions": {
                    "value": "- In Figure 2,b,. the sum layer must output dimension $S=K$ in order to be accepted by the following product layer?\n- how does one find the rooted graph/division partition or variables? Try a handful of graphs and choose the maximum likelihood graph?\n- there is much discussion on tensored circuits which have a tensor output, I presume the final layer is a sum to scalar layer?\n- the authors justify the naming of \"tensorized circuits\" as a way to encompass and simplify other methods. If I understand correctly, these  are standard computational graphs, the bread and butter of all pytorch or tensorflow users, is a new name really required?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "8: accept, good paper"
                },
                "confidence": {
                    "value": "2: You are willing to defend your assessment, but it is quite likely that you did not understand the central parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission5955/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission5955/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission5955/Reviewer_Lqff"
                    ]
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission5955/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698420341526,
            "cdate": 1698420341526,
            "tmdate": 1700746914986,
            "mdate": 1700746914986,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "uZW8wZDe9X",
                "forum": "xIHi5nxu9P",
                "replyto": "IeKXhl5Qbx",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We thank the reviewer for appreciating the theoretical contributions of our work, as well as its simplicity. Our paper is not merely theoretical, but its theoretical contribution is definitely a major strength. Indeed, we present one of few lowerbounds for non-monotonic circuits, as well as important connections to PSD models and tensor networks. Bridging these previously disconnected literatures can greatly propel future research in PCs (and viceversa). Concerning presentation, we agree with the reviewer and we moved Section 4.2 to Appendix G, and better describe how we build region graphs in the main text and in Appendix F and Figure F.1. We answer the posed questions below, and we are happy to further clarify any additional point.\n\n>How do I normalise c(X)?\n\nWe assume you are referring to normalising $c^2(X)$. Computing its partition function Z is done by recursively decomposing the integral and by exploiting the structure of $c^2$. E.g., in Eq. 3 Z can be computed by i) computing integrals over products of components, and then ii) a linear combination thereof. This method applies to deep squared NPCs, where the integral is recursively decomposed until it is first applied on products of functions at the input layers (for example see input layer labelled with $f_i(X_3)f_j(X_3)$ in Figure 2c). Then, these computations are propagated to the inner layers, which are evaluated only once. Finally, the scalar output will be exactly Z of $c^2(X)$.\n\n>[...] could this easily lead to overfitting?\n\nAn increased expressiveness does not imply that the model will overfit more easily. As many other machine learning models overfitting is possible, but the risk can be reduced by limiting the number of parameters.\n>How do I generate samples?\n\nSampling can be done in an autoregressive fashion. We choose an ordering of variables and sample one at a time in that order. To sample the i-th variable $X_i$, we fix all the previous i - 1 variables that have been already sampled and sample from the conditional $p(X_i \\mid X_1,\\ldots X_{i-1})$. This requires evaluating the tensorized circuit as many times as the number of variables and not only once as for MPCs. However, since we are actually evaluating the same tensorized circuit, many inner computations can be cached and reused. This speeds-up sampling, but requires engineering effort that is out of the scope of this work.\n\n>[...] what is a worked illustrative example or failure modes?\n\nIn Section 5 we already discuss some failure scenarios of NPC^2s. E.g., we show that there is little advantage in having negative parameters in NPC^2s if the input components are already flexible enough such as Categoricals. We illustrate this aspect in Figure 3. Also, we did not find any significant improvement with respect to monotonic PCs on image data, as we mention in L326-328.\n\n>[...] the sum layer must output dimension S=K?\n\nSum layers can output a vector (of size S) that is smaller or bigger than their input (of size K). Since the inputs of element-wise product layers must be of the same dimensionality, it means that when a sum layer feeds a product layer (like in Fig 2b) then its output has the same size as the product layer. However, for example, in Fig 2b we can have input layers that are smaller than the sum layers, hence some sum layers will necessarily have S > K.\n\n>How to find the region graph?\n\nThere are various ways coming from the PCs literature. For example, one can recursively split sets of variables randomly until no further splitting is possible [A]. Alternatively, it can be learned from data by performing independence tests to split variables [B]. In case of image data one can split patches of pixels [C].\n\n>Is the final layer a sum to scalar layer?\n\nYes, the output is a scalar. However, one can also have tensorized circuits with a tensor output. In fact, our Algorithm 1 operates on such tensorized circuits after the first recursive step.\n\n>[...], is a new name really required?\n\nCircuits are computational graphs, with special structural constraints. Therefore sometimes they are referred to structured neural networks [D]. We call our circuits \u201ctensorized\u201d as we define them in a layer-wise fashion via tensor operations, as opposed to the classical way to define circuits that is unit-wise [E]. For example, Figure A.1 shows how scalar units in circuits can be tensorized to form layers. Modern circuit architectures are indeed tensorized [A] [F]\n\n[A] Peharz, Random Sum-Product Networks: A Simple and Effective Approach to Probabilistic Deep Learning, 2019\n\n[B] Gens Learning the Structure of Sum-Product Networks, 2013\n\n[C] Poon, Sum-product networks: A new deep architecture, 2011\n\n[D] Vergari, Tractable probabilistic models: Representations, algorithms, learning, and applications, 2019\n\n[E] Choi, Probabilistic Circuits: A Unifying Framework for Tractable Probabilistic Models, 2020\n\n[F] Peharz, Einsum Networks: Fast and Scalable Learning of Tractable Probabilistic Circuits, 2020"
                    }
                },
                "number": 2,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1699981661099,
                "cdate": 1699981661099,
                "tmdate": 1699981661099,
                "mdate": 1699981661099,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "asB673EIn0",
            "forum": "xIHi5nxu9P",
            "replyto": "xIHi5nxu9P",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_5G72"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_5G72"
            ],
            "content": {
                "summary": {
                    "value": "Mixture models traditionally are represented as convex combinations of simpler probability distributions. This paper proposes loosening this constraint to any linear combination, and squaring the result at the end to ensure non-negativity. This modification is then applied to probabilistic circuits (by allowing negative weights in sums, and then squaring). Theoretical and empirical analysis confirm:\n\n1. Better distribution approximations for a given number of parameters (with a theoretical example showing exponential separation)\n2. Preservation of smoothness and decomposability when converting a PC to a squared NPC."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "- Simple and effective idea\n- Empirical results show better performance than baseline on some tasks"
                },
                "weaknesses": {
                    "value": "- Paper's motivation can be stronger. e.g. add a real world motivating example. It would be interesting to see how the better density estimation can be used for an improved downstream task as well.\n- The NPCs use fewer parameters but in a more complex way. What is the impact of this on training cost. This question is not explored empirically."
                },
                "questions": {
                    "value": "Questions/Suggestions:\n- GPT2 distillation experiment should compare other tractable models\n- Exponential separation is established theoretically for a restricted class of functions (unique disjointness). Is it possible to establish that for a more general class of distributions?\n- Definition A.1 in Appendix A seems to have a typo. The sum nodes should use sc(n_i), instead of sc(c_i)?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission5955/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698905621520,
            "cdate": 1698905621520,
            "tmdate": 1699636635210,
            "mdate": 1699636635210,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "RtpIEdYnRj",
                "forum": "xIHi5nxu9P",
                "replyto": "asB673EIn0",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We thank the reviewer for appreciating the simplicity and effectiveness of our idea and the empirical evidence that shows an improved distribution estimation task. We believe our answers below can address all the raised concerns. We are happy to clarify further points and to run further experiments if the reviewer points us to specific cases.\n\n>It would be interesting to see how the better density estimation can be used for an improved downstream task as well.\n\nOur experiment on distilling GPT2 already shows the potential of NPC^2 for a downstream task. That is, [A] proposes how models such as PCs (and hence also NPC^2) can be used in combination with large language models (LLMs) for the downstream task of constrained text generation. In particular, Figure 3 in [A] shows that the log-likelihood highly correlates with the text generation quality (measured as BLEU-4 scores). Therefore, higher log-likelihoods would directly translate to better performances on the mentioned downstream task.\n\n>[...] What is the impact of this on training cost?\n\nThe increased complexity of NPC^2 during training arises only from the computation of the partition function Z, which however can be greatly amortised over large batches as we show in Appendix C and Figure C.1. There, one can see that for NPC^2 the cost of computing Z is similar to the cost of evaluating the circuit once on a batch of data. This is because the complexity of Z does not depend on the batch size and therefore its cost can be greatly amortised.\n\nIn the rebuttal revision we added Figures C.2 and C.3, which compare the actual computational cost of training the monotonic PCs and NPC^2 on UCI data sets. In these figures, we show that NPC^2 adds little overhead during training in most configurations, as computing the partition function Z is comparable to evaluating $c(x)$ or $c^2(x)$ on a batch of data. Concerning the likelihoods gains the overhead for training on Gas results in a NPC^2 achieving a x2 improvement on the final test log-likelihood. Moreover, on high-dimensional data such as BSDS300, NPC^2s are actually faster as they require fewer parameters and achieve higher log-likelihoods. We also report an analysis for the largest possible models (worst-case) in Figure C.3, and confirm that the cost of computing Z is still comparable to evaluating $c(x)$.\n\n>GPT2 distillation experiment should compare other tractable models\n\nIf the reviewer can specify other tractable models or an available implementation of flows for text data, we will gladly run the additional experiments. Note that the normalising flows we have in the table of Figure 4 operate on continuous variables and therefore cannot be applied on discrete data such as text in our GPT2 distillation experiment.\n\n>Exponential separation is established theoretically for a restricted class of functions. Is it possible to establish that for a more general class of distributions?\n\nExponential separations as in our result are often very tricky. First, it is often hard to find candidates for separations: many functions turn out to be too easy or too hard, in the sense that they are either easy to compute in both models one wants to separate or hard in both. And even when a candidate function for being a separating example is found, it also has to be amenable to theoretical analysis. This often requires very regular, structured characteristics of the function that allow a good understanding.\nFurthermore, note that we never have access to the real distribution that has generated the data. And even if we had access to it, it would require the above regularity conditions to make a theoretical claim. The combination of these effects often makes the functions for which one can actually show separations very specific!\n\nWe remark that in [D] there are quite a number of open questions about exponential separations between non-monotonic circuits. We hope our new lower bound can help build other results that close these open questions. So while we would of course be delighted to show separation results for more classes of functions, we are very happy with the result we can show.\n\n>Definition A.1 in Appendix A seems to have a typo\n\nYes, thank you! We fixed it in the updated revision.\n\n[A] Zhang et al.,Tractable Control for Autoregressive Language Generation, 2023\n\n[B] Hoogeboom et al., Integer Discrete Flows and Lossless Compression, 2019\n\n[C] Tran et al., Discrete flows: Invertible generative models of discrete data. 2019\n\n[D] de Colnet, Mengel, A Compilation of Succinctness Results for Arithmetic Circuits, 2021"
                    }
                },
                "number": 3,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700158889997,
                "cdate": 1700158889997,
                "tmdate": 1700158889997,
                "mdate": 1700158889997,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "C8AxwrSvP0",
                "forum": "xIHi5nxu9P",
                "replyto": "asB673EIn0",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We hope all your concerns have been addressed by our answers and the new figures we added in the latest paper version. We are willing to run more experiments if the reviewer specifies which model to evaluate. In any case, we remain open to solve any other pending issue to achieve a full acceptance."
                    }
                },
                "number": 9,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700476253155,
                "cdate": 1700476253155,
                "tmdate": 1700476253155,
                "mdate": 1700476253155,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "FTIfTkmaP3",
            "forum": "xIHi5nxu9P",
            "replyto": "xIHi5nxu9P",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_uVYn"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_uVYn"
            ],
            "content": {
                "summary": {
                    "value": "Motivated by mixture models, the paper investigates a class of functions that is a squared mixture of arbitrary functions with potentially negative weights and functions that do not necessarily represent a density function. After motivating this in the \"shallow\" regime, the authors propose extensions to deep mixtures based on tensorized circuits."
                },
                "soundness": {
                    "value": "4 excellent"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "4 excellent"
                },
                "strengths": {
                    "value": "- [S1]: Originality -- as far as I can judge it's a novel and very interesting \n- [S2]: Significance -- seems to often work better than mixture models and other alternatives such as flows\n- [S3]: Clarity -- While the part related to tensor computations is a bit dense and could benefit from a more higher-level treatise, the paper is clearly written"
                },
                "weaknesses": {
                    "value": "- [W1]: Missing discussion / limitations: Maybe I overlooked this, but I could not find an actual discussion about the restriction of the approach, e.g., \n    + what are the limitations of the approach?\n    + how restrictive is the induced functional form by using squared functions?\n    + how expressive is the approach in the shallow or small-K setting? (Fig. 5 e.g. indicates that $\\pm$ is worse for small $K$)\n    + is it possible to extend the approach to a conditional setup?\n- [W2]: Experiments: The paper addresses the computational costs of the approach from a theoretical point of view and even provides some empirical evidence for the computation of the normalization constant, but empirically investigating a couple of scaling aspects such as \n    + the scaling in $D$ or \n    + a comparison with other appraoches such as the MAFs in terms of runtime \n\n    would provide further valuable insights (e.g. related to \"fairness\" when tuning different methods). \n- [W3]: Presentation (minor): Some of the graphics are rather hard to read:\n    + relatively small and dense (Fig. 4)\n    + the x or y-axis labels are sometimes missing (Fig. 4) or hard to find (not centered; Fig. 5, C1)"
                },
                "questions": {
                    "value": "- See [W1]\n- Do authors have additional insights on [W2]?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "8: accept, good paper"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission5955/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699094936238,
            "cdate": 1699094936238,
            "tmdate": 1699636635110,
            "mdate": 1699636635110,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "KIzp7XmBFv",
                "forum": "xIHi5nxu9P",
                "replyto": "FTIfTkmaP3",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We thank the reviewer for pointing out the novelty of our approach and the significance of our empirical results. We answer below to the comments raised.\n\n>What are the limitations of the approach?\n\nWe already show two limitations about NPC^2s in our paper. First, we show that negative parameters are not really useful if we use flexible yet expensive components, such as Categoricals (see L309-320 and log-likelihoods shown in F.2 (a) (in the rebuttal revision they are now shown in H.2)). Second, we highlight the aspect that NPC^2 cannot support tractable MAP inference without losing the benefits given by negative parameters (see discussion in Section 4.2 and Proposition 4). \n\nFinally, to complement our time and memory benchmarks shown in Figure C.1, we added Figures C.2 and C.3 in the latest paper version. We show that training NPC^2s might require slightly more time and memory in some cases (see also our answers to reviewers 5G72 and nUGh).\n\n>How restrictive is the induced functional form by using squared functions?\n\nWe already know that Gaussian mixture models (GMMs) and monotonic PCs are universal approximators. Moreover, we showed that NPC^2s can require fewer parameters than monotonic PCs (Theorem 1), i.e. they are more expressive efficient. Showing whether other models can be more expressive efficient than NPC^2 is an open problem. Nevertheless, our empirical analysis suggests squaring is not restrictive for density estimation on real world data sets (see Figure 4).\n\n>How expressive is the approach in the shallow or small-K setting?  (Fig. 5 e.g. indicates that +- is worse for small K)\n\nWe experiment with NPC^2s on 2D artificial data sets with small K values, which results in shallow models that are more expressive than the monotonic PCs (MPCs) that are equivalent in size.\n\nIn Figure 5, the worse results on the test data for very small $K$ (such as $K=32$) indeed requires further investigation. We believe it is because smaller models are much more sensitive to initialization, and we believe initialization is an important aspect in NPC^2 that definitely deserves future work. See also our answers to Reviewers nUGh (about our results showed in Figure 5) and Bp5w (about difficulties in training NPC^2s).\n\n>Is it possible to extend the approach to a conditional setup?\n\nYes, e.g., one can construct a NPC^2 modelling a conditional distribution $p(Y\\mid X)$ for some labels $Y$. To do so, you can learn a neural network that takes the features $X$ as inputs and outputs the real-valued parameters of a NPC^2 modelling a probability distribution over $Y$. This idea has already been investigated for monotonic PCs, see [A].\n\n>[...] empirically investigating a couple of scaling aspects such as the scaling in D [...]\n\nIn the rebuttal revision we added Figures C.2 and C.3, showing how training monotonic PCs and NPC^2s scale when increasing the data set dimensionality. The results show that squaring in NPC^2s adds little overhead in terms of time and memory in most configurations.\nSee also our responses to Reviewers 5G72 and nUGh.\n\n>Presentation (minor): Some of the graphics are rather hard to read [...]\n\nWe want to clarify that the scatter plots in Figure 4 lack labels on the x-axis because they would be exactly the one of the y-axis. In fact, each grey diagonal separates the graph into two even trapezoids. Furthermore, the y-axes of the two plots in Figure C.1 are shared.\nIn the latest revision, we updated the captions of these Figures to make this explicit.\n\n[A] Shao, Conditional Sum-Product Networks: Imposing Structure on Deep Probabilistic Architectures, 2019"
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700250610706,
                "cdate": 1700250610706,
                "tmdate": 1700250610706,
                "mdate": 1700250610706,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "p2Ns2qzZtW",
            "forum": "xIHi5nxu9P",
            "replyto": "xIHi5nxu9P",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_nUGh"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission5955/Reviewer_nUGh"
            ],
            "content": {
                "summary": {
                    "value": "The authors consider the problem of learning a mixture model where the separate components do not have to be positive.\n\nThis can be naively done by squaring the additive MM but this is computationally inefficient.\n\nThe authors develop a method based on probabilistic circuits allowing to square different model structures without excessive computational cost."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "The paper is reasonably clear and proposes simple yet interesting idea which appears to work well on selected synthetic/small scale experiments.\n\nThe authors provide the code for the experiments (which I did not reviewed).\n\nThe figure in page 1 nicely summarises the benefit of relaxing the requirement of positive components. Overall the figures in the paper help to understand the introduced concepts.\n\nI think the paper is an interesting read."
                },
                "weaknesses": {
                    "value": "The clarity of the paper in pages 4,5,6 could be improved, the presentation is very dense and discusses multiple threads. The paper would benefit from focusing on core ideas and describing them in more detail while the less important parts could be moved to the appendix.\n\nI have concerns that a few points in the paper are overselling the method (i.e the result in Fig 5. on test data appears very small if statistically significant at all but using ^2 introduces additional computational cost). I would welcome the balanced discussion describing advantages and disadvantages of the method.\n\nThe authors do not discuss in detail how much additional computational cost is needed to achieve these results (a plot log-likelihood improvement vs CPU time would make the paper stronger). \n\nError bars in Figure 2 would help to understand the significance of empirical results.\n\nIn my eyes, the empirical improvements warranted by the proposed method are rather small and mostly shown on synthetic data.\n\nThe authors somewhat addressed three different questions in the empirical section but I feel it would be nicer to provide strong evidence for just one question: Does NPC^2 provide strong gains in performance without substantial increase in computational cost?\n\nIn Figure 4 the authors show that while NPC^2 outperforms MPC for LT and BT separately, for the cross comparison NPC^2(LT) vs MPC(BT) the latter can be better (similarly in table F5). This begs the question: is the RG doing the heavy lifting? If so, more empirical analysis would be helpful.\n\nThe authors should also elaborate on the selection of RG for improved clarity.\n\nWhy the differences reported in F2(a) are so small?\n\nCan the authors elaborate on the statement 105-106 regarding batching? I appears not fully clear to me. I cannot see how one can perform batching in (4) without introducing the bias to the gradient due to the presence of $\\nabla log Z$. Normally calculating  $\\nabla log Z$ requires sampling from the mode with every update of the parameters; it would be useful to provide exact update rule for clarity. Is the learning rule unbiased?\n\nSince $\\log c(x)^2 = 2 \\log c(x)$ the majority of the difference between maximising MM and MM^2 comes from the difference in the gradients of $\\log Z$ for MM and MM^2, I think this requires more clarity/explanation."
                },
                "questions": {
                    "value": "See the weaknesses section."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "2: You are willing to defend your assessment, but it is quite likely that you did not understand the central parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission5955/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission5955/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission5955/Reviewer_nUGh"
                    ]
                }
            },
            "number": 5,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission5955/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699133729178,
            "cdate": 1699133729178,
            "tmdate": 1699636635014,
            "mdate": 1699636635014,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "J8vo5LRMXv",
                "forum": "xIHi5nxu9P",
                "replyto": "p2Ns2qzZtW",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Answer (1/2)"
                    },
                    "comment": {
                        "value": "We thank the reviewer for appreciating our ideas and its potential. We believe our answers below can address all the raised concerns. Let us know if not, we are very keen to engage in a discussion.\n\n>[...] the presentation is very dense.\n>The authors should also elaborate on the selection of RG for improved clarity.\n\nWe agree with the reviewer and improved the presentation. In the updated revision we have moved Section 4.2 to Appendix G, and better described how we build region graphs in the main text. We also provided more details in Appendix F and Figure F.1. Moreover, we splitted Section 3 in three parts to improve readability. If the reviewer has some additional reasonable suggestions, we will incorporate them in a new revision.\n>[...] for the cross comparison NPC^2(LT) vs MPC(BT) the latter can be better. This begs the question: is the RG doing the heavy lifting? If so, more empirical analysis would be helpful.\n\nNote that we already take into account the region graph (RG) construction as a latent confounder in Figure 4. And in all datasets, fixed a RG, NPC^2 is better than MPC. The case in which MPC (BT) is better than NPC^2 (LT) has been observed on Power only. If the reviewer can specify which particular aspect requires to be analysed empirically, we will gladly investigate it.\n\n>the result in Fig 5. on test data appears very small if statistically significant at all\n\nWe agree with the reviewer, and believe our NPC^2s are overfitting in that experiment. Therefore, we updated the caption of Figure 5 and discussed this aspect in the text of the rebuttal revision. In general, we believe training NPC^2s can be more challenging (e.g., due to an observed higher sensitivity in parameters initialization), and we cannot rely on existing works investigating training as they assume non-negative parameters (such as [A]). See also our answer to Reviewer Bp5w.\n\nHowever, note that our experiments follow the same settings in [B], which is based on training a tractable probabilistic model (in our case a NPC^2) on sentences sampled from GPT2, with the aim of evaluating the expressiveness of our models on a more challenging scenario. So a higher train likelihood still brings enough evidence that NPC^2 are more expressive than MPCs. Furthermore note that, compared to [B], we use only half their number of sentences for temporal resource constraints (i.e. 4 millions instead of 8). In the limit and by sampling enough sentences from GPT2, one can definitely reduce the risk of overfitting. Lastly, we believe our work will also motivate future work on regularising NPC^2s as it is the first one to learn non-monotonic PCs on a large scale.\n\n[A] Liu et al., Scaling Up Probabilistic Circuits by Latent Variable Distillation, 2023\n\n[B] Zhang et al.,Tractable Control for Autoregressive Language Generation, 2023"
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700225657117,
                "cdate": 1700225657117,
                "tmdate": 1700225657117,
                "mdate": 1700225657117,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "MUeBlywVsC",
                "forum": "xIHi5nxu9P",
                "replyto": "p2Ns2qzZtW",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Answer (2/2)"
                    },
                    "comment": {
                        "value": ">a plot log-likelihood improvement vs CPU time would make the paper stronger\n\nIn the latest revision we added Figure C.2 which exactly compares the actual computational cost of training the monotonic PCs and NPC^2 on UCI data sets and contrasts it with the gained likelihood. We show that NPC^2 adds little overhead during training in most configurations. In particular, Figure C.2 shows that the overhead for training on Gas results in NPC^2 achieving a x2 improvement on the final test log-likelihood. Moreover, on high-dimensional data such as BSDS300, NPC^2s are actually faster as they require fewer parameters and achieve higher log-likelihoods. We further analyze the \u201cworst case\u201d behavior on the largest circuits possible in Figure C.3 and confirm that the computation of Z for NPC^2 can match the cost of computing c(x) for MPC when amortized in batches.  See also our response to Reviewer 5G72.\n\n>Error bars in Figure 2 would help to understand the significance of empirical results.\n\nWe assume you are referring to the table in Figure 4, let us know if not. We have already reported some of the standard deviations with multiple random repetitions in Table F.5 (which is now H.5 in the rebuttal revision). Apart from the results on Power, the standard deviations are quite small when compared to the average log-likelihoods and therefore support the significance of our empirical results.\n\n>the empirical improvements warranted by the proposed method are rather small and mostly shown on synthetic data.\n\nThe experiments shown in Figure 4 are actually on real-world data sets. These data sets have been extensively used to evaluate deep generative models such as normalising flows in the past. To the best of our knowledge, our NPC^2 on these data sets score the current state-of-the-art for tractable probabilistic models supporting exact marginalization. \n\nFurthermore, the improvements on these data sets are actually significant. For example, we got a x2 improvement in terms of log-likelihoods on Gas (see table in Figure 4). Moreover, on MiniBooNE we went from -32.11 by monotonic PCs (MPC (BT)) to -26.92 by NPC^2 (BT), which is definitely much better if we also look at the multivariate Gaussian baseline that achieves -37.24.\n\n>Why the differences reported in F2(a) are so small?\n\nThe log-likelihoods shown in F.2 (a) (in the rebuttal revision they are now shown in H.2) refer to mixture models having Categoricals as components. The small differences confirm our claim that negative parameters are not really useful if we use flexible yet expensive components, such as Categoricals (L309-320). We believe our empirical analysis is therefore balanced as it also provides failure cases for NPC^2s.\n\n>Can the authors elaborate on the statement 105-106 regarding batching?\n\nWe want to remark that computing $Z$ and $\\nabla \\log Z$ can be done exactly in the proposed models (e.g., see Proposition 1), and therefore it does not require sampling. In our answer to Reviewer Lqff, we further discuss how the exact computation of $Z$ is performed in NPC^2s. Therefore, learning is performed by updating the parameters using exact gradients given by differentiating the negative log-likelihood on a batch of data. However, note that we need to differentiate $\\log Z$ only once per batch, as it does not depend on the input, and therefore adds little overhead during training (see our response to Reviewer 5G72). Furthermore, note that gradients on MPCs and NPC^2s are different because NPC^2s allow for negative parameters."
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700225713921,
                "cdate": 1700225713921,
                "tmdate": 1700225713921,
                "mdate": 1700225713921,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "bH9uP3jvS1",
                "forum": "xIHi5nxu9P",
                "replyto": "p2Ns2qzZtW",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission5955/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We hope we addressed all your concerns in our two comments above. If not, we are very keen to solve any additional issue that holds our submission back from a full acceptance."
                    }
                },
                "number": 10,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission5955/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700476824866,
                "cdate": 1700476824866,
                "tmdate": 1700476824866,
                "mdate": 1700476824866,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]