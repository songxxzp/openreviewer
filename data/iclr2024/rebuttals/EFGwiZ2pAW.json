[
    {
        "title": "SimTeG: A Frustratingly Simple Approach Improves Textual Graph Learning"
    },
    {
        "review": {
            "id": "iAeFHDlXBx",
            "forum": "EFGwiZ2pAW",
            "replyto": "EFGwiZ2pAW",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4758/Reviewer_PJGj"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4758/Reviewer_PJGj"
            ],
            "content": {
                "summary": {
                    "value": "In this paper, the authors propose a very simple framework for learning on textual graphs. They conduct a two-step framework: 1) Finetune a language model on downstream tasks and obtain node representations; 2) Train a graph neural network model with the features from step 1 as node features. The authors then conduct experiments on three network datasets and perform model studies."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. The paper is very clearly written and easy to follow.\n2. The proposed framework is simple and useful."
                },
                "weaknesses": {
                    "value": "1. Lack of comparison with existing works: GraphFormers [1], Patton [2]. There is another line of work [1,2] that tries to use only a language model to capture both semantic information and structure information in a textual graph. It would be more comprehensive to see how the performance comparison is between SimTeG and those methods. \n2. Excitement of the findings and studies. I appreciate the authors\u2019 detailed study of the two-stage pipeline. However, the finding is quite straightforward and not exciting enough to me. It is intuitive that the initial node feature vectors are very important and if a language model is trained on the downstream task first to generate the node feature vectors for the GNN methods, it will contribute to a very good performance.\n3. Technical novelty. Correct me if I\u2019m wrong, but this method can be seen as a single step for GLEM. The original GLEM involves iterative training of LM and GNN, while SimTeg contains only one round (LM training then GNN training). The performance comparison with GLEM is also very marginal regarding SOTA GNN.\n\n[1] GraphFormers: GNN-nested Transformers for Representation Learning on Textual Graph. NeurIPs 2021.\n[2] Patton: Language Model Pretraining on Text-Rich Networks. ACL 2023."
                },
                "questions": {
                    "value": "Questions:\n1. What is the performance comparison between SimTeG, GraphFormers [1], and Patton [2]?\n2. See the second and third comments in the \u201cWeakness\u201d section.\n\n\nMinor suggestions:\n1. In Figure 2, please clarify which is referring to Arxiv and which is for products. Is X-SimTeG the embedding generated by LM (first stage) or GNN (second stage)?\n2. Page 5, typo \u201chow sensitive is GNN training sensitive to the selection of LMs?\u201d"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4758/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698072833477,
            "cdate": 1698072833477,
            "tmdate": 1699636458198,
            "mdate": 1699636458198,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "T9SJMIDrGz",
                "forum": "EFGwiZ2pAW",
                "replyto": "iAeFHDlXBx",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "Many thanks for the valuable comments and suggestions. We have accordingly updated our manuscript and provided responses as follows. All grammar errors and typos are corrected in the updated manuscripts.\n\n## Comment #1: What is the performance comparison between SimTeG, GraphFormer and Patton?\n\nThanks for the question. GraphFormer and Patton are valuable and related works. We have also included them in our related works. We report the results of GraphFormer on our three datasets as follows. For Patton, their implementation only supports their customized datasets and is not trivial to be adopted in our benchmarks. However, since patton and GraphFormer follow similar GNN-nested transformer architecture, it would be valuable to compare the performance of GraphFormer first.\n\nAs shown in the following table, SimTeG performs consistently better than GraphFormer. It is possibly because 1) the GNN-nested architecture of GraphFormer solely allows 1-hop message passing, which limits the express ability of GNN models; 2) GraphFormer\u2019s implementation modifies the architecture code of Bert and cannot be easily extended to other SOTA embedding models nowadays.\n\nWe have added the GraphFormer results to Table A8 in the paper.\n\n| method | ogbn-arxiv | ogbn-products | ogbl-citation (MRR) |\n|---|---|---|---|\n|GraphFormer | 72.81 \u00b1 0.20 | 74.72 \u00b1 0.16 | 82.78 \u00b1 0.24 |\n| SimTeG + GraphSAGE | 76.84 \u00b1 0.34 | 84.59 \u00b1 0.44 | 85.13 \u00b1 0.73 |\n| SimTeG + SOTA GNN | 77.04 \u00b1 0.13 | 85.40 \u00b1 0.28 | 86.66 \u00b1 1.21 |\n\n## Comment #2: The finding is quite straightforward and not exciting enough to me. It is intuitive that the initial node features are important and if a language model is trained on the downstream task first to generate the node features, it will contribute to a very good performance.\n\nWe provide a general response section above to clarify our motivation and contributions. We sincerely appreciate the reviewer checking it. Besides, we also moderately adjust our introduction section to make our motivation and argument clearer. \n\nWe partially agree that \u201cif a language model is trained on the downstream task first to generate the node features, it will contribute to a very good performance.\u201d However several crucial questions remain open: (1) what is the extent of \u201cvery good\u201d, especially with a simple GNN architecture? (2) Are advanced text embeddings good alternatives to complicated GNN architecture?\n\nWe kindly disagree that \u201cthe findings are quite straightforward and not exciting enough\u201d. We have summarized our contributions in the general response and hope it would address the concerns of the reviewer. Basically, the central argument is that advanced text features are good alternatives for complex GNNs. Validating this argument is beneficial for the application of GNNs in industry because industry applications of GNN architectures are limited by computational efficiency. To date, a notable exception is Pinsage [1], a GraphSAGE-based recommender system for Pinterest. If incorporating advanced text features could bypass the necessity of using complex GNN models, it would significantly boost the application of GNNs in industry.\n\n## Comment #3: The technical novelty is not enough. This method can be seen as a single step for GLEM. The performance comparison with GLEM is also very marginal regarding SOTA GNN.\n\nAs the statement of the general response and our abstract, we acknowledge that the proposed method is not technically novel, and this two-stage training has been explicitly or implicitly applied in various applications, e.g., GLEM [2]. Besides, related works [3][4] also utilize a similar mechanism. However, we state two key differences that distinguish our work.\n\nFirst, the motivation of our work is not to propose a novel framework that could generally outperform the other methods. Instead, we would like to utilize this simple two-stage training to demonstrate our key argument: *by incorporating advanced text features, one can bypass the necessity of using complex features.* This is mainly demonstrated by the performance improvement of a simple two-layer graphsage.\n\nBesides the key findings and motivation, other *unique empirical findings* in our work (e.g. The impact of PEFT in Section 5.3 and The impact of LM variants in Section 5.4) could also be generalized to any similar frameworks.\n\n[1] Ying, Rex, et al. \"Graph convolutional neural networks for web-scale recommender systems.\" Proceedings of the 24th ACM SIGKDD international conference on knowledge discovery & data mining. 2018.\n[2] Zhao, Jianan, et al. \"Learning on large-scale text-attributed graphs via variational inference.\" arXiv preprint arXiv:2210.14709 (2022).\n[3] He, Xiaoxin, et al. \"Explanations as Features: LLM-Based Features for Text-Attributed Graphs.\" arXiv preprint arXiv:2305.19523 (2023).\n[4] Chen, Zhikai, et al. \"Exploring the potential of large language models (llms) in learning on graphs.\" arXiv preprint arXiv:2307.03393 (2023)."
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4758/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700274765129,
                "cdate": 1700274765129,
                "tmdate": 1700274765129,
                "mdate": 1700274765129,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "RqJ5neLUwp",
                "forum": "EFGwiZ2pAW",
                "replyto": "T9SJMIDrGz",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4758/Reviewer_PJGj"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4758/Reviewer_PJGj"
                ],
                "content": {
                    "comment": {
                        "value": "Thank you so much for the detailed reply!\n\n1. Baselines: For GraphFormers, a more fair comparison is using your SimTeG language model encoder (obtained after the first stage) to initialize the language model parameters in GraphFormers and conduct the second stage training. Otherwise, GraphFormers is using a general PLM and SimTeG is using a PLM adapted to your target corpus, which will result in an unfair comparison. On the other hand, if we treat the first step of SimTeG as pretraining the PLM, it is quite necessary to compare it with Patton which shares a similar philosophy. \"their implementation only supports their customized datasets\" is not a convincing reason, since you can always process your data to be a \"customized datasets\".\n\n2. Novelty: I'm still not convinced by the novelty of this work. In text-attributed graph scenarios, node classification and link prediction just correspond to text classification and text matching. It is already demonstrated in the NLP domain that a more advanced text encoder can contribute to better performance in those tasks (in your case, your fine-tuned text encoder > GIANT fine-tune text encoder > bag-of-words). Although one can argue that in graph scenarios the graph structure information is important, if you improve the text representations, you improve the feature for GNN and everything will improve. Even related to the argument by the author \"by incorporating advanced text features, one can bypass the necessity of using complex features\", there are existing works having a similar exploration [1].\n\n[1] Vassilis et al. Efficient and effective training of language and graph neural network models. AAAI 2023."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4758/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700664762935,
                "cdate": 1700664762935,
                "tmdate": 1700664762935,
                "mdate": 1700664762935,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "ZirLuJpKlQ",
            "forum": "EFGwiZ2pAW",
            "replyto": "EFGwiZ2pAW",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4758/Reviewer_wDRw"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4758/Reviewer_wDRw"
            ],
            "content": {
                "summary": {
                    "value": "This paper studied a problem with textual graph learning by using the power of language models (LMs). The authors state that previous works focus on designing complex tasks or model structures for LMs on graph domains. However, the authors argue that it\u2019s not necessary for such complexity, so they propose a simple and efficient method (SimTeG) for textual graph learning with LMs. Their proposed SimTeG improves the performance of GNNs on large-scale graph datasets for both node classification and link prediction tasks."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. This paper studied an interesting problem about improving textual graph learning with language models (LMs). The author provides a thorough literature review in this domain.\n\n2. Compared with previous methods for designing novel architecture or complex tasks, this paper proposes a simple and effective, where the authors perform Parameter-Efficient Fine-Tuning (PEFT) on a language model. Then, they utilize this fine-tuned language model to generate node representations from the text by omitting the top layer.\n\n3. In this paper, the authors conduct extensive experiments on popular, large-scale graph datasets to evaluate both node classification and link prediction tasks. Their findings indicate that proficient language modeling can significantly enhance the performance of Graph Neural Network (GNN) models. Moreover, their straightforward approach demonstrated remarkable effectiveness in boosting performance."
                },
                "weaknesses": {
                    "value": "1. The technical contribution of the paper appears to be limited, especially when considering the work of [1]. The core idea closely mirrors that of [1], which also leverages embeddings learned from a language model to enhance the learning of textual graph data via a variational expectation-maximization joint-training framework. The distinguishing factor in the proposed method is its two-step approach. However, I struggle to identify substantial contributions that differentiate it from [1].\n\n2. The authors argue that prior methods have crafted intricate tasks and structures to bolster the performance of textual graph learning with LMs. However, existing methods like [1,2,3,4,5] are conceptually simple and their frameworks are straightforward. Moreover, their training processes do not necessitate significant modifications to the prevalent model architectures.\n\n3. The paper's motivation is somewhat ambiguous. The authors predominantly focus on basic tasks, such as node classification and link prediction. Given that a rudimentary Graph Neural Network (GNN) can already yield satisfactory results for these tasks, the rationale for introducing a language model, which may be slower in inference and parameter-inefficient, is unclear. It might be more productive for the authors to highlight aspects like reduced inference time on test graph data or a more streamlined parameter set.\n\n4. While the authors have undertaken link prediction experiments, there is a noticeable absence of comparisons with some of the state-of-the-art (SOTA) methods that incorporate LMs. It would be beneficial for them to showcase, for example, the performance of GLEM or other notable methods on the link prediction task. Such a comparison could further attest to the efficacy of their proposed model.\n\n5. The review suggests compare the proposed method with GNNs which utilize bag-of-words feature not just the word-embedding feature in Ogbn-Arxiv.\n\nReferences:\n\n[1] Learning on Large-scale Text-attributed Graphs via Variational Inference. ICLR 2023\n\n[2] Explanations as Features: LLM-based Features for Text-Attributed Graphs. Arxiv\n\n[3] Node Feature Extraction by Self-supervised Multi-scale Neighborhood Prediction. ICLR 2022\n\n[4] Exploring the Potential of Large Language Models (LLMs) in Learning on Graphs. Arxiv\n\n[5] Natural Language is All a Graph Needs. Arxiv."
                },
                "questions": {
                    "value": "1. On Ogbn-arxiv, SimTeG outperforms GLEM. From my understanding, GLEM can adaptively optimize the input embedding for GNNs, which will show better performance compared with SimTeG. Can the authors provide more discussions about this?\n2. Could the authors provide further insights into the specific LM variants that can significantly enhance GNN models? For instance, it would be valuable to understand whether larger LM parameters or other factors play a substantial role in this improvement."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4758/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698793078190,
            "cdate": 1698793078190,
            "tmdate": 1699636458097,
            "mdate": 1699636458097,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "1O8HGmEEDo",
                "forum": "EFGwiZ2pAW",
                "replyto": "ZirLuJpKlQ",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "content": {
                    "title": {
                        "value": "[1/2] Response"
                    },
                    "comment": {
                        "value": "We are thankful for the reviewer\u2019s constructive comments and valuable questions. We respond as follows and hope this could address the concerns. In addition to what follows, we also provide a general response above that may address the common concerns about our motivation and technical contributions to this work.\n\n## Comment #1: The technical contribution of the paper appears to be limited, especially when considering GLEM.\n\nThanks for the question. As mentioned in the general response and our abstract, the primary objective of this paper is not proposing a brand new and novel technique to achieve SOTA results on the leaderboard. Instead, we would like to use the proposed simple framework to validate our key argument: incorporating advanced text features could bypass the necessity of using SOTA GNNs. We refer the reviewer to look through our general responses above for a detailed introduction of our motivation and contributions.\n\n## Comment #2: The authors argue that prior methods have crafted intricate tasks and structures to bolster the performance of textual graph learning with LMs. However, existing methods like [1,2,3,4,5] are conceptually simple and their frameworks are straightforward. Moreover, their training processes do not necessitate significant modifications to the prevalent model architectures.\n\nThanks for the comments. In comparison with SimTeG, prior methods [1,2] and concurrent works [3,4,5] are relatively intricated in terms of their designed tasks or frameworks. For examples, GIANT [1] designs a graph-structure-related self-supervised task to generate text embeddings; GLEM [2] utilizes a joint training framework for GNNs and LMs to iteratively generate representative text embeddings; while the concurrent works [3,4,5] try to utilize LLMs to help generate more powerful text embeddings. Though showing promising results, the introduced tasks or techniques prevent us from directly validating our hypothesis from these works \u2013 whether incorporating advanced text features could bypass the necessity of using SOTA GNNs. As a result, we propose a simple framework to assess this argument.\n\n## Comment #3: The paper\u2019s motivation is somewhat ambiguous. Given that a rudimentary Graph Neural Network (GNN) can already yield satisfactory results for these tasks, the rationale for introducing a language model, which may be slower in inference and parameter-inefficient, is unclear.\n\nWe kindly disagree that  \u201crudimentary GNN can already yield satisfactory for these tasks\u201d \u2013 as shown in Table 1, rudimentary GNNs do not work well on text features generated by traditional NLP techniques such as Skip-gram, which is the official feature of OGB. These results motivate us to explore the effect of advanced text features from language models. \n\nIn addition, as shown in different benchmarks, the SOTA GNN models are specialists for certain cases. For example, RevGAT is SOTA on OGBN-Arxiv; while SAGN + SLE dominates OGBN-Products; and SEAL-related works are the mainstream for some link prediction benchmarks. However, our results in Tables 1 and 2 show that with advanced text features, a two-layer GraphSAGE could generally perform well on various datasets and two different tasks. This may further ease the application of GNN models on various domains and tasks. We had a discussion about this on Observation 2 in Section 5.1 of the paper.\n\n## Comment #4: While the authors have undertaken link prediction experiments, there is a noticeable absence of comparisons with some of the state-of-the-art (SOTA) methods that incorporate LMs.\n\nThanks for the comments. We did not include the link prediction results of some SOTA methods as few previous works test their methods on link prediction tasks, and their provided code only implemented node classification and is non-trivial to be extended to link prediction tasks. To mitigate the reviewer\u2019s concerns, we tried several related works and included the results of graphformer on our link prediction datasets. We provide it as follows and have added this baseline to Table A8 of the paper.\n\n| method | ogbn-arxiv | ogbn-products | ogbl-citation (MRR) |\n|---|---|---|---|\n|GraphFormer | 72.81 \u00b1 0.20 | 74.72 \u00b1 0.16 | 82.78 \u00b1 0.24 |\n| SimTeG + GraphSAGE | 76.84 \u00b1 0.34 | 84.59 \u00b1 0.44 | 85.13 \u00b1 0.73 |\n| SimTeG + SOTA GNN | 77.04 \u00b1 0.13 | 85.40 \u00b1 0.28 | 86.66 \u00b1 1.21 |\n\nFollowing the general response, we note that competing for  SOTA results is not the focus of our paper. Instead, we aim to compare the performance of SOTA GNN and GraphSAGE with and without SimTeG, which could validate the central argument of our paper \u2013 incorporating advanced text features could bypass the necessity of using complex GNN architectures."
                    }
                },
                "number": 3,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4758/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700274423541,
                "cdate": 1700274423541,
                "tmdate": 1700274423541,
                "mdate": 1700274423541,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "b4wnm316Z3",
                "forum": "EFGwiZ2pAW",
                "replyto": "ZirLuJpKlQ",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "content": {
                    "title": {
                        "value": "[2/2] Response"
                    },
                    "comment": {
                        "value": "## Comment #5: It is suggested to compare the proposed method with GNNs which utilize the bag-of-words feature.\n\nThanks for the suggestions. As for our used datasets, the OGB does not provide the bag-of-words features, and we did not find GNN models and papers that utilize the bag-of-words feature on OGB datasets. Could you kindly provide more information or reference on this?\n\nIntuitively, we generally believe that the dense word embedding methods should work better than bag-of-words features because the former is recognized to be more representative on summarizing sentences and paragraphs. \n\n## Comment #6: On OGBN-Arixv, SimTeG outperforms GLEM. GLEM can adaptively optimize the input embedding for GNNs, which will show better performance compared with SimTeG. Can the authors provide more discussions about this?\n\nThanks for the question. SimTeG is similar to the first stage of GLEM, except for two key differences.\n\nSimTeG utilizes LoRA during the LM finetuning stage to alleviate the overfitting problem to generate more representative features.\nSecond, SimTeG does not utilize pseudo labels during the GNN training stage. The pseudo labeling is crucial for GLEM and helps it iteratively optimize the embeddings. However, pseudo labeling does not help much on OGBN-Arxiv. As shown in the Figure 2 of GLEM paper, GNN already achieves the best performance on the first stage on OGBN-Arxiv dataset because of the \u2018good prediction\u2019 of LM. Instead, GLEM turns out to be more effective on more noisy datasets (e.g., OGBN-Products), where SimTeG fails to achieve on-par performance. We provided a related discussion in Observation 4 of Section 5.1 in the paper.\n\nAs stated in the previous response, we believe that our empirical findings like utilizing LoRA in Section 5.3, and the study about impact of LM variants in Section 5.4 would also be beneficial to improve the performance of methods like GLEM.\n\n\n## Comment #7: Could the authors provide further insights into the specific LM variants that can significantly enhance GNN models? For instance, it would be valuable to understand whether larger LM parameters or other factors play a substantial role in this improvement.\n\nThanks for the question. We have discussed the influence of LM variants in section 5.4 and Table A7 of the original submission. We further elaborate on it and add new empirical results to make the discussion more complete. Basically, we summarize our findings below: \nthe number of LM parameters is not substantial for the improvement. Including the results shown in our paper, we further test 2 more LMs that have different numbers of parameters, instructor-xl (1.5B) and deberta-v2-xxlarge (2.8B). The results on OGBN-Arxiv and statistics are shown in the following table and included in Figure 4 (right subfigure) of our updated manuscript. When we try to increase the number of parameters, the performance does not improve further. This is possibly because even though models with larger parameters could have better fine tuning node classification performance, the resulted text embedding is not correspondingly improved. Thus, we conjecture that the key factor for improving the performance of GNN is the quality of text embeddings, which, as shown as MTEB (https://huggingface.co/spaces/mteb/leaderboard), is not positively related to the number of parameters.\n\n| Metric | Model | all-MiniLM-L6-v2 | all-roberta-large-v1 | e5-large | deberta-v2-xxlarge | instructor-xl | \n|--------|----------|----------|-----------|--------|-------|---------|\n| #Params. |    | 22M       | 355M     | 335M      | 1.5B | 2.8B | \n | Acc.   | MLP | 70.56 \u00b1 0.09 | 74.32 \u00b1 0.12 | 74.06 \u00b1 0.13 |  72.87 \u00b1 0.09   | 74.82 \u00b1 0.08  |\n|          | GraphSAGE | 75.14 \u00b1 0.30 | 76.18 \u00b1 0.37 | 76.84 \u00b1 0.34 |  75.93 \u00b1 0.29  | 76.59 \u00b1 0.36 | \n\nWe performed an ablation study regarding the quality of text embeddings on Table A7 in our original paper, where we systematically compared two models with the exactly the same architecture, roberta-large and all-roberta-large-v1. The second one is the finetuned version of the first one using contrastive learning. The results show that for both LM finetuning stage and GNN training stage, all-roberta-large-v1 consistently outperforms roberta-large, indicating that language models specifically finetuned for text embedding tasks are more suitable for our cases.\n\n\n[1] Learning on Large-scale Text-attributed Graphs via Variational Inference. ICLR 2023\n[2] Node Feature Extraction by Self-supervised Multi-scale Neighborhood Prediction. ICLR 2022\n[3] Explanations as Features: LLM-based Features for Text-Attributed Graphs. Arxiv\n[4] Exploring the Potential of Large Language Models (LLMs) in Learning on Graphs. Arxiv\n[5] Natural Language is All a Graph Needs. Arxiv."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4758/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700274494769,
                "cdate": 1700274494769,
                "tmdate": 1700274511766,
                "mdate": 1700274511766,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "jSMlojxYbJ",
            "forum": "EFGwiZ2pAW",
            "replyto": "EFGwiZ2pAW",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4758/Reviewer_cWJD"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4758/Reviewer_cWJD"
            ],
            "content": {
                "summary": {
                    "value": "This paper introduces SimTeG, a simple yet effective method for graph learning on textual graphs (where nodes have text attributes). The key idea of SimTeG is to fine-tune a pre-trained language model (PLM) for downstream tasks (e.g., node classification) and then take the PLM output representations as the input features to GNNs for the same tasks. Experimental results show that SimTeG significantly improves GNNs' performance on various graph benchmarks, where the authors examine various choices of GNN backbones and PLM backbones. Through extensive studies, the authors also obtain some meaningful observations, such as that PEFT is necessary when fine-tuning PLMs, that can guide future research in this direction."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "+ Exploring the impact of PLMs on GNN learning and the importance of text attributes in various graph tasks is a meaningful task and has great potential given the recent breakthrough in large language models.\n\n+ The proposed idea (i.e., training PLMs with LoRA + training GNNs) is simple but intuitive and well-motivated, which should be appreciated.\n\n+ Experiments are quite comprehensive. Datasets from different domains (i.e., academic and e-commerce) are considered. Various GNN backbones and PLM backbones are examined, showing the generalizability of the proposed method.\n\n+ Extensive analyses are conducted to obtain meaningful insights, such as the necessity of LoRA and the unequal importance of text attributes on different datasets."
                },
                "weaknesses": {
                    "value": "- Statistical significance tests are missing. It is unclear whether the gaps between SimTeG and the baselines are statistically significant or not. In fact, some gaps in Tables 1-3 are subtle and unlikely significant given the reported standard deviation.\n\n- An important baseline, GraphFormers [1], is not compared.\n\n- Only LoRA is examined in the proposed method as the PEFT strategy. It is unclear whether other strategies, such as Prefix-Tuning and Adapter, can also help tackle the overfitting problem. If so, the observed necessity of PEFT would be strengthened.\n\n[1] Graphformers: Gnn-nested transformers for representation learning on textual graph. NeurIPS'21."
                },
                "questions": {
                    "value": "- Could you conduct statistical significance tests to compare SimTeG with the baselines and report the p-values?\n\n- Could you report the performance of GraphFormers?\n\n- Could you explore other PEFT strategies to check their effect on the overfitting problem?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4758/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699115796247,
            "cdate": 1699115796247,
            "tmdate": 1699636458009,
            "mdate": 1699636458009,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "Qpg6q0PGa1",
                "forum": "EFGwiZ2pAW",
                "replyto": "jSMlojxYbJ",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4758/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We are thankful for the reviewer\u2019s constructive comments. We address the concerns both in the revised manuscript and in what follows.\n\n## Comment #1: Statistical significance tests are missing. In fact, some gaps in Tables 1-3 are subtle and unlikely significant given the reported standard deviation.\n\nThanks for the suggestions. We compute the p values for two comparisons, SimTeG v.s. baseline (GIANT/OGB) and GraphSAGE v.s. SOTA GNN on three datasets. As shown in the following second table where we compare between GraphSAGE and SOTA GNN, the p values of SimTeG are significantly smaller than the baseline embeddings. Specifically, the p values of SimTeG on OGBN-Arxiv and OGBL-Citation2 are close or larger than 0.05. This further supports our key findings: in cooperation with advanced text embeddings, one can bypass the necessity of using complex GNN models. We have also added the p-value results to the paper (Section A1.2).\n\n| Dataset \u00a0 \u00a0 \u00a0 | Backbone\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | SimTEG | Baseline (GIANT/OGB) | P-Value \u00a0 \u00a0 \u00a0 \u00a0 | P < 0.05 |\n|---------------|---------------------------------|------------------------|----------------------|-----------------|----------|\n| OGBN-Arxiv\u00a0 \u00a0 | SOTA GNN \u00a0 | 77.04 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 75.93 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 7.77e-14\u00a0 \u00a0 \u00a0 \u00a0 | True \u00a0 \u00a0 |\n| OGBN-Arxiv\u00a0 \u00a0 | GraphSAGE\u00a0 | 76.84 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 73.70 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 4.11e-17\u00a0 \u00a0 \u00a0 \u00a0 | True \u00a0 \u00a0 |\n| OGBN-Products | SOTA GNN \u00a0 | 85.40 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 86.12 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 4.15e-06\u00a0 \u00a0 \u00a0 \u00a0 | True \u00a0 \u00a0 |\n| OGBN-Products | GraphSAGE\u00a0 | 84.59 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 82.84 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 9.01e-10\u00a0 \u00a0 \u00a0 \u00a0 | True \u00a0 \u00a0 |\n| OGBL-Citation | SOTA GNN \u00a0 | 91.42 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 90.92 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 0.0023\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | True \u00a0 \u00a0 |\n| OGBL-Citation | GraphSAGE\u00a0 | 91.62 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 85.13 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | 5.01e-12\u00a0 \u00a0 \u00a0 \u00a0 | True \u00a0 \u00a0 |\n\n| Dataset  | Method   | GraphSAGE | SOTA GNN | P-Value  | P < 0.05 |\n|---------------|--------|--------|------|----------|----------|\n| OGBN-Arxiv    | SimTEG   | 76.84 | 77.04  | 0.0427   | True     |\n| OGBN-Arxiv    | Baseline  | 73.70 | 75.93   | 7.79e-22 | True     |\n| OGBN-Products | SimTEG    | 84.59    | 85.40  | 8.74e-06 | True     |\n| OGBN-Products | Baseline  | 82.84   | 85.40   | 7.87e-17 | True     |\n| OGBL-Citation | SimTEG    | 91.62  | 91.42   | 0.1380   | False    |\n| OGBL-Citation | Baseline  | 85.13    | 90.92    | 2.98e-15 | True     |\n\nIt is worth noting that as the results of GLEM are reported by the original paper and we do not have the results for each individual experiment, we are not able to compute the corresponding p values. We do acknowledge that there is a subtle difference between SimTeG and GLEM and GLEM outperforms SimTeG on OGBN-Products. This phenomenon is discussed in our observation 4 in Section 5.1 of the paper\n\n## Comment #2: Could you report the performance of GraphFormers?\n\nThanks for the suggestions. GraphFormer is closely related to our research line and we report the performance of GraphFormers as follows. The results of GraphFormer on OGBN-Arxiv and OGBN-Products are directly borrowed from the GLEM paper [1] since the datasets and split are exactly the same. We run GraphFormer on ogbl-citation2 for 10 times and report the mean with std. For the hyperparameter setting, we use the default parameters, and the batch size is set to 100 to make it consistent with the reported results in GLEM. As shown in the table, SimTeG performs consistently better than GraphFormer. It is possibly because 1) the GNN-nested architecture of GraphFormer solely allows 1-hop message passing, which limits the express ability of GNN models; 2) GraphFormer\u2019s implementation modifies the architecture code of Bert and cannot be easily extended to other SOTA embedding models nowadays.\n\nWe have added the GraphFormer results to Table A8 in the paper.\n\n| method | ogbn-arxiv | ogbn-products | ogbl-citation (MRR) |\n|---|---|---|---|\n|GraphFormer | 72.81 \u00b1 0.20 | 74.72 \u00b1 0.16 | 82.78 \u00b1 0.24 |\n| SimTeG + GraphSAGE | 76.84 \u00b1 0.34 | 84.59 \u00b1 0.44 | 85.13 \u00b1 0.73 |\n| SimTeG + SOTA GNN | 77.04 \u00b1 0.13 | 85.40 \u00b1 0.28 | 86.66 \u00b1 1.21 |\n\n## Comment #3: Could you explore other PEFT strategies to check their effect on the overfitting problem?\n\nMany thanks for the suggestion. It would be beneficial to understand other PEFT strategies to check the effects. Due to the time limitation, we conducted the experiments for PEFT with IA3 [2] on OGBN-Arxiv. The results are as follows. As the case study showed, different PEFT may result in similar effects since all of them restrict the learnable parameters of LMs.\n\n|   |  LoRA | IA3 |\n|---|---|---|\n| LM stage | 74.06 \u00b1 0.13 | 74.23 \u00b1 0.18  |\n| GNN stage | 76.84 \u00b1 0.34 | 76.54 \u00b1 0.24  |\n\n[1] Zhao, Jianan, et al. \"Learning on large-scale text-attributed graphs via variational inference.\" arXiv preprint arXiv:2210.14709 (2022).\n[2] Liu, Haokun, et al. \"Few-shot parameter-efficient fine-tuning is better and cheaper than in-context learning.\" Advances in Neural Information Processing Systems 35 (2022): 1950-1965."
                    }
                },
                "number": 2,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4758/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700274215046,
                "cdate": 1700274215046,
                "tmdate": 1700274215046,
                "mdate": 1700274215046,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]