[
    {
        "title": "Mayfly: a Neural Data Structure for Graph Stream Summarization"
    },
    {
        "review": {
            "id": "H47Um3DWvB",
            "forum": "n7Sr8SW4bn",
            "replyto": "n7Sr8SW4bn",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4699/Reviewer_AAng"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4699/Reviewer_AAng"
            ],
            "content": {
                "summary": {
                    "value": "The authors utilize memory-augmented networks for summarizing graph streams into a fixed space. Given the compressed result and a specific edge (or a subset of edges), one can approximate the edge's weight. The neural network is first pre-trained on synthetic graph streams and later fine-tuned using a fraction of the input stream. When compared to sketching-based approaches, the suggested method shows a better approximation accuracy for a given compression size."
                },
                "soundness": {
                    "value": "4 excellent"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "4 excellent"
                },
                "strengths": {
                    "value": "S1. The overall design of the suggested proposed, particularly the use of memory-augmented networks for compressing graph streams, seems reasonable.\n\nS2. The introduced method exhibits significant improvements compared to sketching-based approaches.\n\nS3. The proposed successfully applies to billion-scale graphs, highlighting its practicality for real-world scenarios."
                },
                "weaknesses": {
                    "value": "W1. The paper lacks a theoretical analysis of complexity and accuracy.\n\nW2. The presentation could be clearer. The insights and novelties of the addressing, decoding, and store operations could be specified.\n\nW3. The proposed method seems to only support weight-related queries, not graph algorithms like Dijkstra\u2019s.\n\nW4. While somewhat expected, the throughput of the proposed method is not as high as that of rule-based baseline methods."
                },
                "questions": {
                    "value": "Q1. Can complex graph algorithms, like Dijkstra's, be executed using the summary? If they can, does it substantially impact the time complexity compared to executing the algorithms on the uncompressed graph?\n\nQ2.  Can you provide a more detailed explanation of how the MiGain term contributes? The present explanation seems too concise.\n\nQ3. What is the time complexity of the addressing, decoding, and store operations?\n\nQ4. The reported ARE and AAE seem quite large. What are their values when we use the mean as the estimate of all edge weights?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "8: accept, good paper"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4699/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698711021884,
            "cdate": 1698711021884,
            "tmdate": 1699636451530,
            "mdate": 1699636451530,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "RejqUMCJNa",
                "forum": "n7Sr8SW4bn",
                "replyto": "H47Um3DWvB",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to the Reviewer Part(1/2)"
                    },
                    "comment": {
                        "value": "Thanks for your diligent responses and insightful suggestions. We have revised some statements in the manuscript based on your suggestions to make the paper clearer and more readable. We will address your concerns in this dialogue box and respond to your questions in the next one.\n\n## W1(Q3). The paper lacks a theoretical analysis of complexity and accuracy.\nThanks for your comments!\n\nIn the training phase, Mayfly is trained on a series of auto-generated meta-tasks, so the time complexity of the model's training algorithm is mainly linearly related to the number and size of meta-tasks used in this phase. However, the number of meta-tasks does not affect the training space consumption as they are automatically generated, used, and released in a timely manner. Thus, the space consumed by training is primarily linear in the size of the meta-tasks.\n\nDuring the deployment phase, Mayfly aligns with conventional rule-based summarizations, exhibiting a constant time complexity O(1) for individual operations. Indeed, this is attributed to the fact that, upon the arrival of any edges, the neural network necessitates only a fixed amount of computation to ascertain the corresponding result. As for Mayfly's space consumption, it mainly depends on the memory size set according to the deployment requirements of applications.\n\nRegarding the theoretical guarantee of accuracy, as you correctly note, the neural data structures\uff08i.e.,NBF, meta-sketch\uff09 grounded in memory networks lack a mature theory for analyzing their estimation accuracy. We agree that the theoretical guarantee is an important research direction for future research of neural data structures.\n\n\n\n## W2. The presentation could be clearer. The insights and novelties of the addressing, decoding, and store operations could be specified.\nThanks for your suggestions. We have revised Sections 1,4 and 6 of our paper to provide a more detailed emphasis on the novelty of the Mayfly. Below, we present the insights and novelties in the addressing, storage, and decoding aspects.\n\nIn terms of addressing and storage, the Mayfly introduces a 2D separated in/out-degree addressing scheme, coupled with a novel joint compression storage for nodes and edges to consider the graph structural information, setting it apart from conventional neural data structures.\n\nRegarding decoding, Mayfly introduces a novel concept of altering information pathways in memory networks to enable multi-decoding for the expansion of query types (as detailed in Section 6). \n\nIt eliminates the need for repetitive retraining of the neural data structure for each query type, simultaneously meeting the requirements of supporting multiple query types through one-pass storing in graph scenarios. This novel concept also holds the potential to facilitate research in other scenarios with diverse query types.\n\nFor more innovations, please see the revised manuscript.\n\n\n## W4. While somewhat expected, the throughput of the proposed method is not as high as that of rule-based baseline methods.\nWe concur with your insightful perspectives. The additional operations in Mayfly and other neural data structures render them less competitive in efficiency. Meanwhile, we believe that the throughput of Mayfly can meet the needs of graph streaming scenarios. For instance, on CPUs, Mayfly operates at the same level of throughput (${10}^{-1}$ - ${10}^{0}$Mops) as graph sketches, such as GSS and TCM. Furthermore, Mayfly has good acceleration potential with GPUs due to parallel algebraic operations."
                    }
                },
                "number": 3,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4699/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700150494555,
                "cdate": 1700150494555,
                "tmdate": 1700150494555,
                "mdate": 1700150494555,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "rNlMzU51DT",
                "forum": "n7Sr8SW4bn",
                "replyto": "H47Um3DWvB",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to the Reviewer Part(2/2)"
                    },
                    "comment": {
                        "value": "## Q1(W3). Can complex graph algorithms, like Dijkstra's, be executed using the summary?\nYes, Dijkstra's algorithm can be executed using summarizations, Mayfly included, without effect the time complexity. However, we would be conservative in claiming that Dijkstra's algorithm can be fully solved by graph stream summarizations due to the precision of solutions. \n\nThe key idea behind Dijkstra's algorithm is to iteratively select the vertices with the currently shortest known distance from the start node and update the distances to its neighboring nodes. Thus it is feasible to run Dijkstra\u2019s algorithm on top of graph stream summarizations instead of the original graphs through iterative invocations of two distinct types of atomic queries: edge weight and connectivity queries. In terms of complexity, it is known that Dijkstra's algorithm has a time complexity of O((V + E) log(V)), if the graph\u2019s adjacency list/matrix can be accommodated in the main memory. So, following the procedure of Dijkstra's algorithm, the complexity will not be reduced. Neither will it be increased, as the complexity of atomic operation in graph stream summarizations is O(1).\n\nHowever, we cannot assert that current graph stream summarizations in restricted space budgets, e.g. Mayfly and TCM, could fully solve complex graph algorithms such as Dijkstra's.  These iterative invocations of atomic queries to support complex algorithms by graph stream summarizations lead to the accumulation of estimation errors. These cumulative errors ultimately lead to a progressive deviation from the ground truth. This problem may be alleviated if future research builds on Mayfly to tailor direct solutions directly to a single complex algorithm, e.g., in combination with changing the information pathway to add a customized decoding module. In contrast, conventional graph stream summarizations do not have this potential because they are designed based on human-defined rules.\n\n## Q2. Can you provide a more detailed explanation of how the MiGain term contributes?\n\nWe apologize for any confusion and have clarified the statement in the revised manuscript. The MinGain term utilizes information extracted from memory while concurrently leveraging edge embedding information for information extraction and denoising. The fundamental idea behind this is to extract low numerical value bits of information crucial for decoding but easily overshadowed by stacked noise from other large numerical value bits. The detailed formalization of the MinGain is articulated in Algorithm 1 of Appendix A.1. Furthermore, the ablation experiments are provided in Appendix A.7\n\n\n## Q4. The reported ARE and AAE seem quite large. What are their values when we use the mean as the estimate of all edge weights?\nThanks for your comments. Our experiments cover a range of space constraints, from relatively abundant to very tight, providing a nuanced perspective of Mayfly. Thus, in several very tight budget situations, all methods show large ARE and AAE, while Mayfly's significantly lower errors in comparison demonstrate excellent robustness.\n\nFurthermore, employing mean estimation is not feasible in graph streaming scenarios. Primarily, this approach can\u2019t support other graph query types in Section 6 of our paper due to a significant loss of graph structures. Moreover, in settings where edges in streams are reached repeatedly, calculating the mean of weights is challenging, given that determining the number of distinct edges in the streams incurs a considerable cost. The table below presents the performance comparison of Mean Estimator and Mayfly. Even ignoring the above factors, the errors of the mean predictor are still larger than those of Mayfly across all distributions with varying skewness.\n\n\n|ARE Metric|$\\alpha$=0.2|$\\alpha$=0.6|$\\alpha$=1|\n|-|-:|-:|-:|\n|Mean Estimator|1.01|1.8|5.71|\n|Mayfly 64KB|0.44|0.97|4.82|\n|Mayfly 128KB|0.39|0.38|2.28|\n\n|AAE Metric|$\\alpha$=0.2|$\\alpha$=0.6|$\\alpha$=1|\n|-:|-:|-:|-:|\n|Mean Estimator|5.62|7.7|13.58|\n|Mayfly 64KB|2.54|4.68|10.41|\n|Mayfly 128KB|2.4|2.83|5.55|"
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4699/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700150526736,
                "cdate": 1700150526736,
                "tmdate": 1700150526736,
                "mdate": 1700150526736,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "DOS483GHXT",
                "forum": "n7Sr8SW4bn",
                "replyto": "rNlMzU51DT",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4699/Reviewer_AAng"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4699/Reviewer_AAng"
                ],
                "content": {
                    "title": {
                        "value": "Thank you"
                    },
                    "comment": {
                        "value": "Thank you for the clarifications. I would like to maintain my positive score."
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4699/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700607598953,
                "cdate": 1700607598953,
                "tmdate": 1700607598953,
                "mdate": 1700607598953,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "FGSYhruypQ",
            "forum": "n7Sr8SW4bn",
            "replyto": "n7Sr8SW4bn",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4699/Reviewer_GvCp"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4699/Reviewer_GvCp"
            ],
            "content": {
                "summary": {
                    "value": "This work proposes a neural data structure for graph stream summarization, which has neatly designed modules (representation, addressing and decoding), as well as corresponding operations such as store and multiple types of queries. Experiments on Lkml and Enron datasets demonstrate the superiority of the designed approach compared to the SOTA TCM and GSS baselines."
                },
                "soundness": {
                    "value": "4 excellent"
                },
                "presentation": {
                    "value": "4 excellent"
                },
                "contribution": {
                    "value": "4 excellent"
                },
                "strengths": {
                    "value": "1. The paper studies an interesting topic on using neural data structure for graph stream summarization, and designed the approach very neatly. In general, the presentation of the methodology is very clear and makes it easier to understand the nontrivial details.\n\n2. The training strategy is inspiring, following the paradigm of \"pre-training and fine-tuning\", and thus has two stages called larval phase and metamorphosis phase.\n\n3. Comprehensive experimental results demonstrate both the effectiveness of the method on different types of queries and throughputs."
                },
                "weaknesses": {
                    "value": "1. Minor: A table of dataset statistics is suggested to make it more straightforward."
                },
                "questions": {
                    "value": "1. In addition to throughput, is there any other metric to evaluate the efficiency of the method (e.g., query time)?\n2. How to balance between the parameter size and model accuracy?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "8: accept, good paper"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4699/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698829864415,
            "cdate": 1698829864415,
            "tmdate": 1699636451420,
            "mdate": 1699636451420,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "blpIazUr3b",
                "forum": "n7Sr8SW4bn",
                "replyto": "FGSYhruypQ",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer GvCp"
                    },
                    "comment": {
                        "value": "Thanks for your valuable suggestions and constructive reviews. We've added a table showing the statistics of the datasets to make it more straightforward. Here are our responses to your questions:\n\n## W1. Minor: A table of dataset statistics is suggested to make it more straightforward.\nThanks for your suggestions! We have added a table of the dataset statistics as follows and put it in Appendix A.4. In addition, we present the distributional characteristics of datasets showcasing the fact that the datasets exhibit varying degrees of deviation from the ideal Zipf distribution, in Appendix A.4.\n\n| Datasets | Lkml | Enron | Coauthor | Twitter |\n|---|---:|---:|---:|---:|\n| Number of Nodes | 63,399 | 17,733 | 40,421 | 52,579,682 |\n| Number of Streaming Edges | 1,096,440 | 475,097 | 2,668,965 | 10,929,205,002 |\n| Graph Type | Communication | Communication | Co-authorship | Social |\n\n## Q1. In addition to throughput, is there any other metric to evaluate the efficiency of the method (e.g., query time)?\n\nThanks for the insightful question! Yes, we agree that store/query time, referred to as latency, is another aspect of evaluating efficiency. However, consistent with other graph sketches, Mayfly focuses more on the estimation accuracy and processing throughput.\n\nIn the table below, we compare the latency of Mayfly and baselines TCM and GSS, under the same settings of **throughput experiments**. Despite not surpassing conventional rule-based methods, Mayfly effectively maintains the latency of a single operation consistently around 1 ms, which is sufficient for existing graph streaming applications. \n\n\n| singular Latency(ms) | Store | Edge-query | Node-query |\n|---|---:|---:|---:|\n| TCM | 0.00200 | 0.00199 | 0.00324 |\n| GSS | 0.01743 | 0.01854 | 0.03998 |\n| Mayfly | 0.81083 | 0.78387 | 0.90593 |\n\nIn addition, serial writes/queries of individual edges are often uneconomical in practice. Hence, a small buffer is usually established, and edges are stored into sketches once it fills. This setup allows Mayfly to leverage concurrent writes/queries, resulting in a near-linear reduction in average latency, as depicted in the table below. It shows that as the buffer size expands, Mayfly maintains a linear reduction trend in average latency, while baselines see marginal benefits.\n\n| Average Store Latency  w.r.t. Buffer Size  | 1 | 4 | 16 | 64 |\n|---:|---:|---:|---:|---:|\n| TCM | 0.00200 | 0.00134 | 0.00117 | 0.00103 |\n| GSS | 0.01743 | 0.01352 | 0.01152 | 0.01081 |\n| Mayfly | 0.81083 | 0.17610 | 0.05180 | 0.02604 |\n\n| Average Edge-query Latency w.r.t. Buffer size  | 1 | 4 | 16 | 64 |\n|---:|---:|---:|---:|---:|\n| TCM | 0.00199 | 0.00142 | 0.00118 | 0.00108 |\n| GSS | 0.01854 | 0.01524 | 0.01210 | 0.01138 |\n| Mayfly | 0.78387 | 0.21451 | 0.19491 | 0.07470 |\n\n## Q2. How to balance between the parameter size and model accuracy?\n\nEmpirical studies show that increasing the parameter size of the neural module within a certain range correlates with enhanced model accuracy. However, once the module parameter sizes reach specific thresholds, the improvement in model accuracy becomes exceedingly marginal. Considering the running overhead, we chose a set of parameters below these thresholds to balance accuracy and efficiency. \n\nIn Appendix A.5, Table 6, we present the current parameter size for each module. It shows that the parameter sizes of their respective modules in Mayfly are consistently kept on a small scale. Also, with the expansion of Mayfly's memory size, the parameter size of every module remains stable. The addressing module is the exception, requiring a slight increase in parameter size to align with the number of memory slots in the memory module."
                    }
                },
                "number": 2,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4699/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700150358159,
                "cdate": 1700150358159,
                "tmdate": 1700150358159,
                "mdate": 1700150358159,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "Uq1I1JSMFU",
            "forum": "n7Sr8SW4bn",
            "replyto": "n7Sr8SW4bn",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4699/Reviewer_wDZJ"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4699/Reviewer_wDZJ"
            ],
            "content": {
                "summary": {
                    "value": "The authors propose a Mayfly framework consisting of two stages (larval and metamorphosis) for summarizing graph streams. It is the first neural data structure for graph stream summarization. The Mayfly acquires basic summarization capabilities by learning from synthetic data and can be rapidly adapted to real graph streams. The Mayfly framework is agile and customizable, supporting a broad range of graph queries with lightweight information pathway configurations."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "S1: The authors' integration of Mayfly with machine learning is interesting.\nS2: Well-written."
                },
                "weaknesses": {
                    "value": "W1: It seems that this paper leans more towards an engineering-oriented research, and its technology appears to be quite fundamental. For instance, it utilizes techniques like meta-learning and follows the paradigm of pre-training and fine-tuning. In my view, there's very little innovation at the model level, which is the most fundamental reason for my minor rejection.\nW2: The authors' integration of graph streams with the Mayfly framework is indeed intriguing. However, from my perspective, it appears to be a fundamental application of pre-training and fine-tuning methods. I believe the authors should provide a clear explanation in the introduction or methodology section regarding why the Mayfly framework is particularly suitable for adapting to graph data streams.\nW3: While the authors propose the Mayfly framework with the aim of enhancing data stream processing efficiency, I did not see a clear experimental demonstration of its efficiency gains. In other words, I would appreciate a more tangible comparison between the Mayfly framework and the comparative algorithms in terms of actual runtime efficiency under the same spatial budget."
                },
                "questions": {
                    "value": "Please refer to weaknesses."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission4699/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission4699/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission4699/Reviewer_wDZJ"
                    ]
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4699/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698860223582,
            "cdate": 1698860223582,
            "tmdate": 1700694812866,
            "mdate": 1700694812866,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "DLC8rr9tby",
                "forum": "n7Sr8SW4bn",
                "replyto": "Uq1I1JSMFU",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4699/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer wDZJ"
                    },
                    "comment": {
                        "value": "Thanks for your reviews. Your feedback is important to us. We've revised our manuscript based on your suggestions to more clearly articulate our novelties. \n\n## W1&W2: \"Little innovation at the model level\" & \"Why the Mayfly framework is particularly suitable for adapting to graph data streams?\"\n\nThank you for your comments. We have revised Sections 1,4 and 6 to highlight the novelty of the Mayfly in adapting to graph streams. We will uniformly respond and address your two concerns as below.\n\nWe argue that Mayfly, as the first neural graph sketch, innovates on multiple levels (including at the model level), aiming primarily at addressing graph stream scenarios. Graph sketches present greater challenges compared to conventional sketches. For example, conventional sketches count only entity frequencies, whereas graph sketches also tally interaction frequencies and enable diversity queries. It thus asks for novel techniques to address the challenges in different aspects, such as network structures, training strategies, and versatility in supporting various graph queries.\n\n\n**Novelty in Network Structures.** The Mayfly follows the general framework of memory-augmented networks but is uniquely tailored for graph stream scenarios by introducing a 2D separated in/out-bidirectional addressing scheme, coupled with a novel method of storing edges/nodes information within the memory module. Mayfly takes into account the graph structural information and employs joint compression storage for nodes and edge weights, which is unseen in neural data structures.\n\n**Novelty in Training Strategies.** Similar to existing neural data structures, such as Meta-sketch, Mayfly employs a 'pre-training and fine-tuning' paradigm. Nevertheless, Mayfly stands out by conducting pre-training totally independent of real data, utilizing randomized numeric IDs for nodes and Zipf distribution for weights. Meanwhile, the Training Strategy of Mayfly is designed for graph streams and supports a diversified set of queries (e.g., node, connectivity, path, and subgraph queries). We proposed automated meta-task generation algorithms for different atomic graph queries, providing inspiration for the development of neural data structures in the field of graph stream processing.\n\n**Novelty in Multi-typed Query Processing Paradigm.** The Mayfly introduces a novel concept of altering information pathways in memory networks to facilitate the extension to different query types (as detailed in Section 6). It eliminates the need for repetitive retraining of the neural data structure for each query type, simultaneously meeting the requirement of supporting multiple query types through one-pass storing in graph scenarios. This novel concept also holds the potential to facilitate research in other scenarios with diverse query types. In addition, it also provides certain interpretability to the execution mechanism of neural data structures.\n\nNotably, we have not deliberately optimized certain modules or training algorithms within Mayfly but have employed simple, general methods to demonstrate its effectiveness as a foundational paradigm.\nMeanwhile, we explore the addressing and memory mechanisms of Mayfly in Appendix A.6 and A.9, providing comprehensive and insightful guidance for further model optimization. Moreover, complex designs at the model level may not yield performance gains due to the trade-off with corresponding storage overhead. Therefore, based on empirical studies, we have chosen the current simple yet effective solution for Mayfly.\n\n\n## W3: While the authors propose the Mayfly framework with the aim of enhancing data stream processing efficiency...\n\nFirst, we clarify that Mayfly, like existing neural data structures, does not focus on enhancing efficiency. Instead, neural data structures are dedicated to capturing patterns of stream distributions to improve estimation accuracy. \n\nSecond, Mayfly fully meets the efficiency requirements of graph stream applications. In terms of execution complexity, whenever a streaming edge arrives, Mayfly only needs to call its network modules to perform a finite number of computations to complete an individual operation, and thus it provides a constant time complexity O(1), consistent with conventional sketches. Additionally, Mayfly's network modules utilize shallow networks with small-scale parameters to further ensure computational efficiency, as demonstrated in Appendix A.5. In terms of store/query throughput, detailed experiments are presented in Appendix A.8. The results show that: on CPUs,  Mayfly operates at the same level of throughput ($10^{-1}$-$10^0$ Mops) as graph sketches, such as GSS and TCM; On GPUs, Mayfly achieves higher throughput by employing simple parallel algebraic operations."
                    }
                },
                "number": 1,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4699/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700150210671,
                "cdate": 1700150210671,
                "tmdate": 1700150927915,
                "mdate": 1700150927915,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "thqrqB2TRw",
                "forum": "n7Sr8SW4bn",
                "replyto": "DLC8rr9tby",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4699/Reviewer_wDZJ"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4699/Reviewer_wDZJ"
                ],
                "content": {
                    "title": {
                        "value": "discussion"
                    },
                    "comment": {
                        "value": "i appreciate the authors' response and will raise my score to 6 while the authors are suggested to further improve this work accordingly in the final version."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4699/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700694782527,
                "cdate": 1700694782527,
                "tmdate": 1700694782527,
                "mdate": 1700694782527,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]