[
    {
        "title": "3D-GPT: Procedural 3D Modeling with Large Language Models"
    },
    {
        "review": {
            "id": "fnQTyA1x6n",
            "forum": "ttMwEuEPeB",
            "replyto": "ttMwEuEPeB",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission364/Reviewer_967x"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission364/Reviewer_967x"
            ],
            "content": {
                "summary": {
                    "value": "This paper presents a new 3D scene generation pipeline using procedural 3D modeling together with LLMs. Specifically, LLMs are given the documentations of a procedural 3D modeling tools together with human instructions. Three LLM agents, namely the task dispatch agent, the conceptualization agent and the modeling agent, are designed to work together and generate Python scripts for the 3D modeling tools that generate 3D scenes/ objects that corresponds to the given instructions. Qualitative and quantitative experiments are performed to show the results of such pipeline and prove the effectiveness of using three agents to collaborate on this task."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "1 poor"
                },
                "strengths": {
                    "value": "1. This paper shows the potential of using LLMs and procedural 3D modeling tools on text-guided 3D generation tasks.\n2. Having three agents collaborating on generating the final Python scripts is interesting and proven to be effective."
                },
                "weaknesses": {
                    "value": "1. Though it is a nice application to use LLM with procedural 3D modeling tools for text-guided 3D generation, I think the overall contribution of this paper is not enough to be considered for publication on ICLR. The community has had many similar discoveries on the ChatGPT/ GPT-4's ability on generating parameters for images [1] or 3D objects [2] in a zero-shot or in-context learning way. Therefore, there is no surprise that combining LLM with a better parametric 3D modeling tool, e.g., InfiniGen, could produce better visual results. I think all the three potential directions mentioned in the last section are promising and valuable challenges to solve, which would bring more contribution to the community.\n\n2. The evaluation is limited. I must admit that for a new task of text-guided 3D scene generation, it is hard to construct baseline methods. But at least, there are similar efforts in the community of text-guided 3D object generation that worth being compared with. For example, score-distillation-based methods, e.g., DreamFusion, can be used as baselines for the \"Single Class Control\" experiments.\n\n[1] Bubeck, S\u00e9bastien, et al. \"Sparks of artificial general intelligence: Early experiments with gpt-4.\" arXiv preprint arXiv:2303.12712 (2023).\n[2] https://twitter.com/gd3kr/status/1638149299925307392"
                },
                "questions": {
                    "value": "See above weaknesses."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission364/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698622293970,
            "cdate": 1698622293970,
            "tmdate": 1699635963625,
            "mdate": 1699635963625,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "inusk30C5J",
                "forum": "ttMwEuEPeB",
                "replyto": "fnQTyA1x6n",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "1. Similar discoveries on ChatGPT/ GPT-4's ability on generating parameters for images [1] or 3D objects [2].  No surprise that combining LLM with a better parametric 3D modeling tool InfiniGen could produce better visual results.\n\nWe appreciate the reviewer's comments regarding the perceived limitations of our contribution. However, we respectfully disagree with the assertion that our work lacks novelty. It is essential to differentiate between image generation [1] and 3D modeling, as these areas pose distinct challenges. \n\nMoreover, the 3D examples provided by [2] do not reflect the complexities we address. Such a way to generate Blender Python code lacks a comprehensive understanding of API functions and their alignment with natural language. The generated Python codes would have high error rates. Yet, it lacks mechanisms for verifying code executability and correctness. Furthermore, directly generating Python codes does not effectively manage dependencies between 3D contents. For instance, when generating trees, the spatial relationship between the leaf and tree branches is not explicitly modeled. As a result, this method of applying LLMs to Blender code could produce inadequate 3D models, especially in the context of complex large-scale scenes.\n\nAlso, our research demonstrates that a simple combination of LLMs with the procedural generation library InfiniGen leads to subpar results.\nNote that, while the idea of combining LLMs with procedural 3D modeling may now appear straightforward in hindsight, creating an effective workflow is far from simple. Our solution involves three distinct agents: the Task Dispatch Agent interprets and chooses the right API calls, the Conceptualization Agent enhances the scene description with adequate details, and the Modeling Agent comprehends how textual descriptions translate into specific API parameters. This multi-agent approach ensures effective and detailed 3D model generation from textual inputs. Please refer to the results presented in Section 4.2 (Table 1, Figure 6) of our paper, as well as the **updated** supplementary materials (Section 6.2, Table 2, Table 3). These results clearly illustrate the significant roles played by each component within our framework in enhancing the final output.\n\n2. Comparison with Previous Text-to-3D Methods:\n\nIn response to the reviewer's request for a comparison with previous text-to-3D methods, we have included an additional comparison with Dreamfusion [a]  in the **supplementary materials (Section 6.3, Figure 7)**. We show that while Dreamfusion generates reasonable 3D for single objects, it struggles to generate large-scale natural scenes, as demonstrated in our **supplementary materials (Section 6.3, Figure 8)**. In comparison, our method is effective in both scenarios, showing the advantages of our approach in handling more complex 3D modeling tasks. Furthermore,  our framework supports sequential scene editing without necessitating re-training.\n\nFurthermore, it's worth noting that previous text-to-3D methods encountered challenges when generating large-scale natural scenes, as demonstrated in our **supplementary materials (Section 6.3, Figure 8)**.  These observations emphasize the strengths and advantages of our approach in handling more complex 3D modeling tasks.\n\n[a] DreamFusion: Text-to-3D using 2D Diffusion. In ICLR 2023\n\nThank you for your valuable feedback and insightful comments. We truly appreciate the time and effort you dedicated to reviewing our work. Please let us know if any questions."
                    }
                },
                "number": 9,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700633497869,
                "cdate": 1700633497869,
                "tmdate": 1700633528647,
                "mdate": 1700633528647,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "cXKurwzMjJ",
            "forum": "ttMwEuEPeB",
            "replyto": "ttMwEuEPeB",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission364/Reviewer_m12k"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission364/Reviewer_m12k"
            ],
            "content": {
                "summary": {
                    "value": "The authors present a method that can take in natural language and output code in a Domain-Specific Language. The DSL is a system that can generate 3D scenes and assets in a procedural fashion.\n\nTherefore the overall pipeline converts natural language into realistic, high quality 3D scenes."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "4 excellent"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "The results are **incredibly strong** - looking at the submitted video. Especially the results on sky-editing."
                },
                "weaknesses": {
                    "value": "**(MAJOR) Lack of detail**\n\n---\n\nThe paper describes the system at a very high level. We are introduced to the \"Task Dispatch Agent\", the \"Conceptualization Agent\" and the \"Conceptualization Agent\" but no details of how they are actually implemented. There is no detail of what subset of the InfiGen language is used, no detail of \u201ctranslate the scene into a winter setting\u201d, it pinpoints functions like add snow layer() and update trees()\"\n\nWhile there are some examples in the Appendix of the prompts and the associated code, it is woefully incomplete.\n\nIn the current iteration, it is almost impossible to implement/reproduce the paper.\n\nI will not knock the paper down for a lack of quantitative results because this space is very new and no metrics apart from user studies really exist and creating a new procedural baseline would itself be a lot of work."
                },
                "questions": {
                    "value": "I wonder if the authors would send this work to a compilers conference/journal instead?\n\nIn case they are too rigorous to accept LLM based papers, why not something like ToG or SIGGRAPH. Both have wonderful papers describing procedural systems where the parameters come from some heuristic model. This paper with its strong results and a graphics focus seems like a perfect fit for such venues.\n\nI would be willing to accept this paper only after a major rewrite which would include a lot more description of the various components in the proposed approach."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission364/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698834669720,
            "cdate": 1698834669720,
            "tmdate": 1699635963516,
            "mdate": 1699635963516,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "dtczWVwLx8",
                "forum": "ttMwEuEPeB",
                "replyto": "k5aQ0ERKEo",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Reviewer_m12k"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Reviewer_m12k"
                ],
                "content": {
                    "title": {
                        "value": "Confirmation of review"
                    },
                    "comment": {
                        "value": "I thank the authors for the rebuttal and the updated manuscript.\n\nI really liked the paper but even the revised manuscript is almost impossible to reproduce. \n\nIn addition, I would seriously like to know how the paper is any different than [1] but extended to a 3d setting (and procedural models). \n\nI retain my score.\n\n[1] https://viper.cs.columbia.edu/"
                    }
                },
                "number": 10,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700682234578,
                "cdate": 1700682234578,
                "tmdate": 1700682234578,
                "mdate": 1700682234578,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "TXYjx4zZ9D",
                "forum": "ttMwEuEPeB",
                "replyto": "cXKurwzMjJ",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "1. Submission to other venues (e.g., SIGGRAPH)\nWe appreciate your suggestion to consider SIG and TOG for our paper submission. While we agree that our work aligns with the themes of these conferences, we strongly believe that our paper is also highly relevant for ICLR, fitting squarely within its broad scope of machine learning topics. Our work uniquely intersects with the domain of large language models (LLMs) and AI agents, areas of keen interest within the ICLR community.\n\nThe core of our contribution lies in a novel approach to formulating the text-to-3D problem. We introduce 3D-GPT to overcome significant hurdles in 3D scene creation. This includes generating expansive scenes, animating 3D models, maintaining coherence in 3D spaces, and creating intricate details in 3D objects.These are issues that previous methodologies have struggled with and are of considerable interest to ICLR readers and authors.\n\n\nFurthermore, our future directions, including automatically generating procedural rules and fine-tuning models, align well with the interests of the ICLR community and require machine learning-based solutions that this community can provide.\n\n2. Describe the system in a very high-level, impossible to implement the paper. \n\nWe have significantly revised Section 3 of the paper to provide more details on the various components of our method in a concise, yet reproducible way. We highlight the key changes as red color. Extended full examples of communication between agent, scene generation script and example implementation for modeling agent are included in the supplementary material. As mentioned elsewhere we will release all code and examples on acceptance. **The revised version of the paper has been uploaded. : )**\n\nWe want to thank you for your helpful comments and suggestions, which really improved our paper. We're grateful for your patience and commitment during the review process."
                    }
                },
                "number": 13,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700721201935,
                "cdate": 1700721201935,
                "tmdate": 1700721201935,
                "mdate": 1700721201935,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "BNwjitq205",
                "forum": "ttMwEuEPeB",
                "replyto": "8rWYIvAdW5",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Reviewer_m12k"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Reviewer_m12k"
                ],
                "content": {
                    "title": {
                        "value": "Response"
                    },
                    "comment": {
                        "value": "Thank you for your response. \n\nI agree that ViperGPT is focussed in image analysis instead of generation. \n\nHowever, the underlying ideas are very similar - given a pretrained LLM, design a good prompt so that the LLM can convert natural language to a DSL - InfiniGen in your case, something else in the case of ViperGPT. \n\n> In particular, ViperGPT only provides its agent with function names.\n\nThis is incorrect in my view, as the prompt to ViperGPT is a prompt consisting of the function call, it\u2019s documentation and a few examples so that the LLM \u201cunderstands\u201d the function and it\u2019s parameters. \n\n\n> To address this complexity, we have implemented multiple agents that collaboratively handle various subtasks, resulting in a cooperative solution\n\nI like the paper, however the description of these components is at a very high level meaning I cannot exactly discern how each of the components contributes to the overall solution. Or how the work is different from ViperGPT.\n\nThe paper to me looks to have very solid contribution with very solid results. It is just that in the current state of writing, it is difficult to know exactly what was implemented and how it was implemented. \n\nIt might be too late but you could easily give your gpt model a prompt of the infinigen api and look at the results like ViperGPT. It would really help the paper. \n\nLooking at the new pseudo code and the new results, I will update my score, if during the discussion phase, other reviewers also agree that the paper is substantially different than ViperGPT."
                    }
                },
                "number": 15,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700733621830,
                "cdate": 1700733621830,
                "tmdate": 1700733621830,
                "mdate": 1700733621830,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "q0Y2aTIP7j",
            "forum": "ttMwEuEPeB",
            "replyto": "ttMwEuEPeB",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission364/Reviewer_nMkH"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission364/Reviewer_nMkH"
            ],
            "content": {
                "summary": {
                    "value": "This paper Introduces 3D-GPT, a training-for-free framework designed for 3D scene generation, which generates Python codes to control 3D software, potentially offering increased flexibility for real-world applications."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "1. The generation ability of 3D scenes and objects are good according to the demo.\n\n2. The step-by-step refinement of 3D outputs is meaningful and impressive.\n\n3. The paper is easy to follow with good-quality figures."
                },
                "weaknesses": {
                    "value": "I'm not an expert in 3D procedural 3D generation, and here are some of my concerns.\n\n1. The paper only shows examples of 3D plants and forests. Can 3D-GPT work on other objects or scenes, such as human and street? Can 3D-GPT generalize well to more complex scenarios?\n\n2. The paper adopts ChatGPT as LLM. How about other open-source LLMs, such as Alpaca, LLaMA-Adapter, or Vicuna?"
                },
                "questions": {
                    "value": "See weakness"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission364/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698912655311,
            "cdate": 1698912655311,
            "tmdate": 1699635963446,
            "mdate": 1699635963446,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "sK9jSrDGMv",
                "forum": "ttMwEuEPeB",
                "replyto": "q0Y2aTIP7j",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "1. Expanding the Scope of 3D-GPT Beyond Plants and Forests:\n\nOur method, which leverages the procedural algorithm library Infinigen, was originally designed for natural scene generation. However, its versatility extends beyond this specific application. Its key strength lies in its ability to proficiently handle various 3D modeling tasks in diverse contexts without necessitating fine-tuning. Our system operates in a zero-shot manner, independently processing each modeling function by the conceptualization and modeling agents. This independence ensures that our method can readily adapt to new functions, provided the requisite information. We will provide more complex object modeling in the supplementary before the rebuttal deadline. \n\n2. Evaluation with Alternative Open-Source LLMs:\n\nWe have also conducted evaluations of our approach using Llama2/GPT4, as outlined in the **supplementary materials (Section 6.2, Table 3)**. Our results demonstrate that the performance of our method remains consistent when applied across different LLMs, underscoring its robustness and broad applicability.\n\nThank you for your valuable review. Your feedback is much appreciated, and we're committed to addressing your concerns. We hope our explanations have addressed your concerns and we remain open to further discussion."
                    }
                },
                "number": 8,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700622968877,
                "cdate": 1700622968877,
                "tmdate": 1700624281198,
                "mdate": 1700624281198,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "j0rQ7ze45m",
            "forum": "ttMwEuEPeB",
            "replyto": "ttMwEuEPeB",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission364/Reviewer_QYLZ"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission364/Reviewer_QYLZ"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposes a workflow for procedural 3D scene generation conditioned on text descriptions using pre-trained LLMs. It leverages an existing procedural generator, InfiniGen, to create 3D contents, and uses LLMs to pick a set of procedural functions from InfiniGen and infer their corresponding parameters given the text description of the scene. The authors split the task into three steps (agents): the first step is to select the set of functions given the prompt, the second step is to infer more detailed descriptions given the required informatin, and the last step is to generate the parameters for each function given the detailed description. The experiment results show that this workflow can produce single class objects with details and complex scenes."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "- The proposed method does not require training.\n- The multi-agent approach is effective. It might share similar advantages as other methods such as chain-of-thought or tree-of-thought, where the final output from the LLM is guided by a curated step-by-step instruction.\n- It addresses another potential direction for text-to-3D generation: utilizing tools or existing 3D procedural models. \n- It demonstrates the potential of using LLMs to control tools for content creation and 2D/3D modeling."
                },
                "weaknesses": {
                    "value": "- Lack of details about the model and experiment setting and how the results are affected. For example, which LLM is used? What is the size of the function set F? Does the size of F affect the quality? How many examples are provided? Do the example related to the prompt L? Does zero-shot/few-shot make any difference? \n- Evaluation can be improved. It would be great to do ablation studies on D, C, I, E, and answer the questions mentioned above.\n- It would be great to further explore the limitations and failure cases. For example, does the complexity of the scene affect the results? Does the number of parameters or the design space (e.g., parameter ranges) affect the results? \n- The proposed method demonstrates that the LLM can convert the input prompts to python codes that controls the functions and parameters. However, since the 3D modeling capability comes from the procedural models, not from the LLM, it seems the task is closer to scene composition or object inference instead of modeling. It will be more interesting to see if LLMs can generate 3D modeling commands or procedural modeling sequences/rules."
                },
                "questions": {
                    "value": "- There are many procedural models available for Blender. It will be interesting to see if this workflow will work on any arbitrary procedural models given the same amount of information, i.e., D, C, I , and E, such as house, car, airplanes instead of focusing on scenes in InfiniGen.\n\n- It will be great to see if the selected functions can formulate some dependencies, for example, to generate 'flowers on the trees', the trees need to be created first and the positions of the flowers are based on the positions of the tree branches.\n\n- It will be great to see a full example of the input and output of each agent in the process.\n\n- Have the authors tried to also provide the functions picked by the TDA to CA?\n\n- It is obvious that this method will help users who know nothing about 3D modeling, but I am curious whether the sequential editing task in Fig 4 will be more efficient to professional Blender users (e.g., game developers) to achieve a desired outcome, compared to tweaking the parameters by themselves."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission364/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699578293470,
            "cdate": 1699578293470,
            "tmdate": 1699635963379,
            "mdate": 1699635963379,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "HyO1zYUQSN",
                "forum": "ttMwEuEPeB",
                "replyto": "j0rQ7ze45m",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Lack of Detail"
                    },
                    "comment": {
                        "value": "**Lack of Detail:**\n1. Which Large Language Model (LLM) is used?\n\nWe utilized GPT-3.5 for all experiments.\n\n2. What is the size of the function set F?\n\nThe function set F comprises all functions and subfunctions detailed in this script (https://github.com/princeton-vl/infinigen/blob/main/worldgen/generate.py), except for the 'creatures' class. These functions are integral to our scene creation process.\n\n3. Does the size of F affect the quality of generated scenes?\n\nYes, the size of F directly impacts scene quality. Infinigen's scene generation employs a fixed function set. Removing a function, such as 'flower_generation,' eliminates the ability to create corresponding elements (e.g., flowers) in the scene. Similarly, omitting a sub-function like 'control_flower_petal' restricts control over specific aspects (e.g., flower petal movement), impacting scene controllability and diversity.\n\n4. How many examples are provided for each function?\n\nWe provide one example per function.\n\n5. Is the provided example related to the user's prompt L?\n\nNo, the prompt L is user-supplied. Our examples, one per function, might occasionally resemble some user inputs L, but they are not directly related."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700622071336,
                "cdate": 1700622071336,
                "tmdate": 1700622071336,
                "mdate": 1700622071336,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "zERLSrufet",
                "forum": "ttMwEuEPeB",
                "replyto": "j0rQ7ze45m",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Evaluation Improvement"
                    },
                    "comment": {
                        "value": "**Evaluation Improvement**\n\n1. Ablation Studies on D, C, I, E: Impact of Zero-shot/Few-shot Learning.\n\nThank you for your insightful comments. In response, we have updated our submission with comprehensive ablation studies in the supplementary material (Section 6.2) . Table 1 elucidates the roles of D, C, I, and E components. Absence of function documentation (D) impairs our method's ability to interpret function input parameters, thereby reducing the CLIP Score and elevating the Failure Rate. Without code (C), while the system grasps basic function and parameter knowledge, it experiences a decline in CLIP Score and an increased Failure Rate. The lack of information (I) hinders the conceptualization agent's capacity to enrich text with vital details, leading to a significant drop in CLIP Score. Excluding examples (E), as shown in Table 4, markedly diminishes the CLIP Score and heightens the Failure Rate. We noted no notable difference in performance between one-shot, two-shot, and three-shot prompts, though introducing more examples tends to reduce parameter diversity.\n\n2. Impact of Scene Complexity and Parameter Count on Results.\n\nThe outcomes are indeed influenced by scene complexity and parameter count. The definition of scene complexity matters: if the initial text input features complex objects beyond our procedural algorithm's scope, the quality of generated content is limited. Conversely, detailed initial text descriptions enhance the conceptualization agent's understanding, yielding results more aligned with the input. The number of parameters is critical; removing functions or sub-functions (e.g., 'flower_generation' or 'control_flower_petal') limits modeling abilities, affecting controllability and diversity. Assessing the impact of function set size and parameter count is complex due to varying function significance. For example, removing 'control_flower_petal()' may not markedly affect the CLIP score, but eliminating 'terrain_generation()' substantially reduces it, as terrain modeling becomes impossible. Consequently, we opted not to include evaluations of this aspect, but we will update some visual example in supplementary before rebuttal deadline."
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700622194181,
                "cdate": 1700622194181,
                "tmdate": 1700622194181,
                "mdate": 1700622194181,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "fpFRQTgP1N",
                "forum": "ttMwEuEPeB",
                "replyto": "j0rQ7ze45m",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Others: Suggestions and Queries"
                    },
                    "comment": {
                        "value": "**Others: Suggestions and Queries**\n\n1. LLMs in 3D Modeling and Procedural Sequences:\n\nWe value your suggestion about leveraging LLMs for procedural rules in 3D modeling, a topic we've earmarked for future exploration in our paper. Our current research primarily focuses on utilizing LLMs for efficient function control and parameter inference in 3D modeling. This approach is pivotal to our overarching aim of reducing human intervention in the 3D modeling process through advanced LLM applications.\n\n2. Function Dependencies and Complex Tasks:\n\nThe functions we have selected do establish dependencies. For example, the generate_trees() function can autonomously design tree branches, calculate surfaces programmatically, and accurately place leaves and flowers on these surfaces. This ensures correct dependencies and spares LLMs from the intricate task of determining precise 3D leaf/flower locations, a challenging feat for pretrained LLMs.\n\n3. Availability of Full Examples of Input and Output:\n\nWe recognize the value of detailed examples for each agent, yet their inclusion would overly extend our manuscript. To keep our narrative concise, we will showcase these examples through supplementary videos or within our user interface. This approach ensures clarity and accessibility without overburdening the text. We will release the code that contains all examples. \n\n4. Adaptability to Arbitrary Procedural Models:\n\nOur system functions in a zero-shot manner, with each function processed independently by the conceptualization and modeling agents. This independence ensures that our method can adapt to new functions as long as the necessary information is supplied.\nAs shown in our paper PAGE 5 bottom block, with provided code C, example E, and function document D, our method can understand the function and infer the required parameters. \n\n5. Integration of Functions Selected by TDA in CA:\n\nTo be clear, in our current pipeline, the conceptualization agent processes only those functions that are selected by the task dispatch agent.\n\n6. Efficiency for Professional Blender Users:\n\nFor Blender experts that not familiar with procedural generation, in the scenario depicted in Figure 4, transforming flat terrain into mountainous landscapes would require manually rebuilding terrain and repositioning each element, which is time-intensive. \nFor Blender experts that are familiar with infinigen libraries might find this task straightforward. However, for each new procedural library, the experts are required to understand every new function, it also poses a significant challenge for professional Blender users to quickly grasp and utilize every new procedural library and its functions. Our approach aims to simplify and expedite this process."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700622249112,
                "cdate": 1700622249112,
                "tmdate": 1700622249112,
                "mdate": 1700622249112,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "k5aQ0ERKEo",
                "forum": "ttMwEuEPeB",
                "replyto": "j0rQ7ze45m",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "Thank you sincerely for sharing your invaluable review with us, and for your insightful feedback on how we can improve our evaluations. Your input is highly valued, and we are fully dedicated to addressing your concerns to the best of our abilities. Please feel free to reach out if you have any additional questions or if there is anything else we should provide."
                    }
                },
                "number": 7,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700622658414,
                "cdate": 1700622658414,
                "tmdate": 1700622658414,
                "mdate": 1700622658414,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "HQrk6T2RqO",
                "forum": "ttMwEuEPeB",
                "replyto": "k5aQ0ERKEo",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Reviewer_QYLZ"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Reviewer_QYLZ"
                ],
                "content": {
                    "comment": {
                        "value": "Thank you for the detailed rebuttal and updated manuscript. However, I still think this paper is focused on using LLMs for controlling and leveraging existing procedural models for scene and object compositions instead of the procedural 3D modeling capability. I will remain my score as 5."
                    }
                },
                "number": 12,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700718799558,
                "cdate": 1700718799558,
                "tmdate": 1700718799558,
                "mdate": 1700718799558,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "8rWYIvAdW5",
                "forum": "ttMwEuEPeB",
                "replyto": "j0rQ7ze45m",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission364/Authors"
                ],
                "content": {
                    "comment": {
                        "value": "We thank you for bringing our attention to the contemporary work of ViperGPT. We would like to underscore the distinctive features that set our work apart from theirs:\n\n**Task Complexity:** Our approach tackles the more intricate challenge of 3D modeling. To address this complexity, we have implemented multiple agents that collaboratively handle various subtasks, resulting in a cooperative solution. This stands in contrast to ViperGPT, which lacks the incorporation of agents and cooperative strategies.\nIn particular, ViperGPT only provides its agent with function names. In our case, we have a more extensive library with intricate functions, such as the sky modeling function we showcased in the paper Figure 5. This function demands a deep understanding of the Nishta sky modeling algorithm for parameter inference. If we were to apply their approach to our work, it would be inadequate for a pre-trained language model to comprehend these functions fully and, consequently, to make informed selections regarding the relevant functions and arguments based on the given instructions.\n\n**Scope of Focus:** While both our work and ViperGPT share a common vision of employing a LLM to generate executable Python code, our emphasis diverges in the specific goal and methodology. Our work is primarily centered around 3D generation, whereas ViperGPT is oriented towards visual understanding. Moreover, our work employs multiple agents to solve the task.\nIn light of these distinctions, we believe our work makes a unique contribution to the field, providing advancements in handling complex 3D modeling tasks through collaborative agent-based strategies. We will reference ViperGPT in the related work of our paper and include a description of the differences.\n\nThank you once again for your valuable feedback. We are dedicated to addressing any remaining concerns and ensuring the clarity and significance of our contributions."
                    },
                    "title": {
                        "value": "TO REVIEWER M12K, Difference between our work and ViperGPT"
                    }
                },
                "number": 14,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission364/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700732539884,
                "cdate": 1700732539884,
                "tmdate": 1700732590648,
                "mdate": 1700732590648,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]