[
    {
        "title": "How Hard is Trojan Detection in DNNs? Fooling Detectors With Evasive Trojans"
    },
    {
        "review": {
            "id": "VqTaghegoI",
            "forum": "NI0RsRuFsW",
            "replyto": "NI0RsRuFsW",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_YzJY"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_YzJY"
            ],
            "content": {
                "summary": {
                    "value": "The paper proposes a backdoor attack that tries to evade existing defenses. The\nidea is based on blending the distribution of begin and trojaned examples. To\nmitigate the possible weight analysis based method, the attack was enhanced by\nadding random noises. The experiments were performed on MNIST, CIFAR, and GTSRB\nand several baseline methods, NC, ABS, K-Arm, Pixel, MNTD, and its very own\nmethod, Param -- the aforementioned weight analysis method."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "This is a timely and important topic.\n\nThe evaluation on several baseline methods, including inversion based methods as\nwell as weight analysis."
                },
                "weaknesses": {
                    "value": "Several existing methods have considered constraining the feature space to\nimprove backdoor attack, e.g., adding regularization terms by the\nlabel-smoothing attack. The proposed method is yet another one, and it is\nunclear how significant this is.\n\nThe evaluation uses small datasets and models, which are not convincing. As\nlarger models have more capacity to hide the backdoor, making it harder to\ndetect and mitigate.\n\nThe considered baseline methods are also relatively out-of-date. I would\nrecommend a comprehensive literature review of related work: https://github.com/zihao-ai/Awesome-Backdoor-in-Deep-Learning\n\nThere is no discussion on adaptive defenses."
                },
                "questions": {
                    "value": "See above."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7765/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698772218368,
            "cdate": 1698772218368,
            "tmdate": 1699636948450,
            "mdate": 1699636948450,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "9yG7TYswlF",
                "forum": "NI0RsRuFsW",
                "replyto": "VqTaghegoI",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Author Response"
                    },
                    "comment": {
                        "value": "Thank you for your careful analysis of our work. We hope the following response addresses your concerns.\n\n**Difference between our method and stealthy trigger methods.**\n\n>Several existing methods have considered constraining the feature space to improve backdoor attack\n\nYou may be referring to certain stealthy trigger methods, including the Wasserstein Backdoor (WB) method of Doan et al. (2021) and the adaptive attack of Qi et al. (2023). In Appendix B.2, we do actually compare to the WaNet and LIRA attacks, which are from this line of work.\n\nOur work is quite different from these works. We refer to them as \"stealthy trigger\" methods because they are designed to make clean inputs and trigger-embedded inputs look the same (in input-space or in latent space). For example, WaNet and LIRA use nearly-invisible triggers, and WB minimizes latent space differences between clean and trigger-embedded inputs. These are fundamentally trying to evade input-level and dataset-level detectors, but not model-level detectors.\n\nModel-level detectors look at parameters, and none of these prior works (WB, the adaptive attack, WaNet, LIRA, etc.) compare against a broad range of model-level detectors, including adaptive training-based detectors like MNTD.\n\nBy contrast, we are not concerned at all with making clean inputs and trigger-embedded inputs look identical. In fact, the triggers we use are very visible patches and blended triggers. Rather, the focus of our work is specifically to evade model-level detectors, which to the best of our knowledge has not been extensively studied before.\n\n**Key point:** To do this, we design a novel method that reduces the distributional distance between clean and trojaned *parameters*, rather than clean and trigger-embedded *inputs*. This is a very significant distinction, and it means that in practice our method is technically very different from these prior works, both in its implementation and in the results (see Appendix B.2 for specific numbers).\n\n**Reason for using the selected datasets.**\n\nMost neural trojan papers only train a handful of models, or a few hundred at most. Investigating model-level detection requires training datasets of models. We train over 6,000 models in total, with each individual number in our tables representing hundreds of trained models. Each model requires approximately an hour to train (more for Vision Transformers on GTSRB). Thus, for computational reasons we decided to focus on 32x32 datasets that are commonly used in the model-level detection literature.\n\n**Selection of baselines.**\n\nWe use 8 baseline detectors, 5 of which are published methods. These detectors use a variety of different mechanisms of detection, which helps us address our core research question. Thus, the baselines were carefully selected.\n\nWe disagree that the baselines are out of date. For example, the PixelBackdoor method of Tao et al. (2022) remains a state-of-the-art inversion method, MNTD remains a state-of-the-art weight analysis method, and the Param detector is based on the first-place submission to TDC 2022. We did investigate other recent weight analysis methods, such as the topological detector of Zheng et al. (2021), but this did not perform particularly well.\n\n**Adaptive defenses.**\n\nWe do consider several adaptive defenses. For example, MNTD and Param both train against our specific trojaned networks. In other words, our networks aren't trained to fool a fixed MNTD detector, but rather MNTD is trained to detect a fixed set of our networks. This renders MNTD a very strong detector under our threat model and effectively an adaptive defense.\n\nWe mention in Section 4.1 that we developed the randomization loss specifically because we discovered an adaptive attack (the Param detector) that performed especially well on our networks without the randomization loss. Thanks to your suggestion, we have added an additional comparison to an adaptive version of the Param detector with different summary statistics than what we use for computing the randomization loss. Specifically, we repeated the Param experiments using random projections from the full parameter vectors down to the same reduced dimensionality as before. The AUROC of this modified Param detector is 50.3% on average, with a maximum of 54.5% across all experimental settings. By contrast, the average AUROC of the Param detector using the original summary statistics is 75.4% on our evasive trojans. This shows that our evasive trojans are robust to new adaptive defenses. We have added these results to the updated paper. Thank you for your suggestion."
                    }
                },
                "number": 10,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7765/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700608331273,
                "cdate": 1700608331273,
                "tmdate": 1700608597667,
                "mdate": 1700608597667,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "tbvGlfbAo5",
            "forum": "NI0RsRuFsW",
            "replyto": "NI0RsRuFsW",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_sA9T"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_sA9T"
            ],
            "content": {
                "summary": {
                    "value": "This work proposed a more evasive backdoor attack, which can bypass some defence methods. Specifically, to increase the evasion, the attacker designed a so-called evasion loss."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "The evasion loss involves three factors: distribution matching (entangling the parameter distribution and the unnormalized logits of clean and trojan networks), specificity (incorrect trigger cannot activate the backdoor), and randomization (random the direction of the difference between poisoned and benign model)."
                },
                "weaknesses": {
                    "value": "The evasion loss indeed challenges the defence, but it should also influence the accuracy of the benign performance and the attack success ratio. That is because this regularization limits the capability of the model to learn the backdoor behavior and normal classification, simultaneously. The authors should provide the ablation study on the hyperparameters of evasion loss to check their effect on the accuracy and attack success ratio. In summary, I recommend the authors provide an ablation study to learn whether the backdoor can be successfully (dependent on ACC and ASR) injected with an additional evasion loss.\n\nI also found some errors in the references, for instance, the author's name of \u2018bypassing backdoor detection algorithm in deep learning\u2019 is wrong."
                },
                "questions": {
                    "value": "As I mentioned in the weakness, does the evasion loss affect the backdoor injection?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7765/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699086792011,
            "cdate": 1699086792011,
            "tmdate": 1699636948329,
            "mdate": 1699636948329,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "9eptGDObi7",
                "forum": "NI0RsRuFsW",
                "replyto": "tbvGlfbAo5",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Author Response"
                    },
                    "comment": {
                        "value": "Thank you for your careful analysis of our work. We hope the following response addresses your concerns.\n\n**Effect on accuracy and ASR is in Table 1.**\n\n>The authors should provide the ablation study on the hyperparameters of evasion loss to check their effect on the accuracy and attack success ratio\n\nWe agree that this is important information. In the original submission, **we provided these numbers in Table 1**. An expanded version showing accuracy and ASR for each experimental setting is in Table 8. On average, the evasive trojans that we use in our main experiments have very similar ASR to standard trojans and very similar accuracy to clean networks. If we have addressed the thrust of your concerns, we kindly ask that you consider raising your score.\n\n**Additional points.**\n\nThank you for pointing out the error in the \"Bypassing Backdoor Detection Algorithms in Deep Learning\" reference. We based this on the Google Scholar version of the article, which only lists Reza Shokri as an author. We have fixed this issue thanks to your help."
                    }
                },
                "number": 9,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7765/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700608301561,
                "cdate": 1700608301561,
                "tmdate": 1700608301561,
                "mdate": 1700608301561,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "aTkkV8T1vg",
            "forum": "NI0RsRuFsW",
            "replyto": "NI0RsRuFsW",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_jSxM"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_jSxM"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposes a method to train backdoored models that are stealthier (i.e., they are close to the distribution of clean models). The authors show that standard backdoor detection algorithms have less success against these models and they are also more difficult to reverse engineer (i.e., identify the target class of the attack)."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "- Evasive trojaning attack specifically designed against model-based defenses, like MNTD.\n- Reduces the success of model-level detectors and trigger reverse engineering."
                },
                "weaknesses": {
                    "value": "- Several prior attacks that pursue similar goals are not evaluated.\n- Most recent reverse engineering defenses are missing.\n- The effects of specificity loss are poorly understood.\n- Removal-based defenses can be just as effective.\n\n\nThe idea of model-level distribution matching is new and interesting but it's specifically designed against model-level defenses. There are already many works that explore distribution-matching in the latent space [1,2] or try to apply more stealthy poisoning attacks [3]. There are also attacks considered to reduce the artifacts of the backdoor [4]. \n\nMoreover, in the appendix, the authors show that their attack performs similarly to TaCT but combining with TaCT improves the stealthiness. There's no reason other existing, more advanced, stealthy attacks cannot be combined with TaCT.\nThe results on backdoor detection show no significant improvement (except against the model-level defenses) over simple baseline attacks. \n\nAll in all, I don't think the submitted paper brings a novel, and significantly more effective idea to the table. The evaluation of prior attacks could be done more thoroughly, I would even remove simple non-adaptive baseline attacks from the main text (because these are essentially toy attacks at this point), and evaluate against a stronger attack in the main text. Of course, when the baseline attack is very weak, the results look much better.\n\nRegarding defenses, there are some recent improvements over K-ARM. Considering that reverse engineering is a difficult task, I believe these more recent methods might be more effective against the proposed attack [6,7]. I encourage the authors to do a better job with their literature search and find the most effective SOTA defenses.\n\nFurther, the goal of specificity loss is to reduce artifacts (non-intended triggers the model learns as a result of the attack). This is interesting but I would be curious to understand whether this rough approach (i.e., sample triggers from a distribution and use them in the loss function) introduces different types of artifacts. I recommend the authors use a method like [8] to confirm the effectiveness (and potential artifacts) of this loss term.\n\nFinally, I cannot see any evaluation of removal-based defenses, e.g., [9]. Defenses like NC or MNTD require some small set of clean data which also can enable removal-based defenses. These defenses are shown promising even against the strongest backdoor attacks. I would like to see how effective they would be against the proposed attack. Although not explicitly specified, these defenses are within the threat model studied in the paper, considering the required defensive capabilities. For example, does the increased effectiveness against reverse engineering make the attack easier to remove?  \n\n\n[1] Doan et al. Backdoor Attack with Imperceptible Input and Latent Modification\n\n[2] Zhong et al., Imperceptible Backdoor Attack: From Input Space to Feature Representation\n\n[3] Qi et al., Revisiting the Assumption of Latent Separability for Backdoor Defenses \n\n[4] Hong et al., Handcrafted Backdoors in Deep Neural Networks\n\n[5] Tang et al., Demon in the Variant: Statistical Analysis of DNNs for Robust Backdoor Contamination Detection\n\n[6] Tao et al., Better Trigger Inversion Optimization in Backdoor Scanning\n\n[7] Wang et al., Rethinking the Reverse-engineering of Trojan Triggers\n\n[8] Sun et al., Poisoned classifiers are not only backdoored, they are fundamentally broken\n\n[9] Li et al.,, Neural Attention Distillation: Erasing Backdoor Triggers from Deep Neural Networks"
                },
                "questions": {
                    "value": "See above for my recommendations and questions."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7765/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699286564453,
            "cdate": 1699286564453,
            "tmdate": 1699636948217,
            "mdate": 1699636948217,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "wk3lLTn5mN",
                "forum": "NI0RsRuFsW",
                "replyto": "aTkkV8T1vg",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Author Response (1/2)"
                    },
                    "comment": {
                        "value": "Thank you for your careful analysis of our work. We hope the following response addresses your concerns.\n\n**Differences between evading model-level and input-level / dataset-level detection.**\n\nWe mention in the paper that we are solely concerned with model-level detection. This is a very different problem from input-level and dataset-level detection, and we show in Appendix B that it requires different methods to address, such as the one we propose in this paper.\n\nNamely, we compare to WaNet and LIRA, which are representative examples of methods that try to make triggers stealthy. We find that these are trivially easy to detect with model-level detectors like MNTD. We are not aware of any stealthy trigger papers that evaluate against MNTD, so ours is the first to make this observation.\n\nThe three methods you cite ([1], [2], [3]) are similar to WaNet and LIRA. They aim to reduce the distance between clean and trigger-embedded inputs (either in input-space or latent-space) with the goal of making triggers stealthy, but not with the goal of making parameters look similar to clean parameters. This is very different from our work, which reduces the distance between clean and trojaned *parameters*. Our results in Appendix B suggest these two objectives may be at odds, which would be an interesting direction for future work to explore.\n\n**Novelty of the proposed method.**\n\nPart of the novelty of our proposed method is that we try to reduce the distributional distance between clean and trojaned *parameters*, rather than clean and trigger-embedded *inputs*. To the best of our knowledge, we are the first work to explore this avenue and demonstrate its effectiveness against a wide array of model-level trojan detectors.\n\nThere are also many other sources of novelty in our paper. E.g., we find that our method surprisingly reduces the effectiveness of target label prediction and trigger synthesis, despite not being designed for this purpose. To the best of our knowledge, we are the first to conduct a large-scale quantitative evaluation of target label prediction and trigger synthesis and the first to propose a method that reduces performance on this tasks.\n\n**Comparisons to stronger attacks.**\n\nAs we mention above, we do compare to strong stealthy trigger attacks, including WaNet and LIRA, finding that they are trivially easy to detect with model-level detectors like MNTD. We also compare to TaCT, and we find that it surprisingly improves evasiveness against a wide range of model-level detectors, which was not previously known (in the original TaCT paper, the authors conducted a more limited evaluation with far fewer detectors). Combining our method with TacT yields stronger results, so we are able to outperform TaCT in source-specific settings; in all-to-one settings TaCT is not applicable.\n\n**Our attack is state-of-the-art for evading model-level detectors.**\n\nIt's important to note that **to the best of our knowledge, our attack is state-of-the-art for evading model level detectors**. We are not aware of any recent stealthy trigger attacks that evaluate on model-level detectors like MNTD that leverage a training set of networks (including the three that you cite), and our results on WaNet and LIRA suggest that these attacks would perform poorly. We also compare to specific prior works that do try to evade model-level detectors in Appendix B.2, and our method outperforms them. Given these factors, we do feel justified in claiming state-of-the-art, although research on this problem is still in very early stages. More importantly, we are the first to show that evading a wide range of model-level detectors is possible in the first place, using principled parameter-level distributional distances.\n\n**Reasons for focusing on the patch and blended attack in the main experiments.**\n\nCharacterizing the patch and blended baselines as \"very weak\" isn't entirely accurate. While they are weak against input-level and dataset-level detectors, they remain a standard choice of attack in the model-level detection literature. While we do compare to other attacks like WaNet and LIRA, we are not aware of any other attacks that are widely used in model-level detection papers. The patch (BadNets) and blended attacks remain the norm, so using them for our main experiments is a natural choice."
                    }
                },
                "number": 7,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7765/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700608211205,
                "cdate": 1700608211205,
                "tmdate": 1700608211205,
                "mdate": 1700608211205,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "H57Yx86Bsp",
                "forum": "NI0RsRuFsW",
                "replyto": "aTkkV8T1vg",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Author Response (2/2)"
                    },
                    "comment": {
                        "value": "**Inclusion of more recent attacks.**\n\nPlease note that **we do actually include the PixelBackdoor method of Tao et al. [6] that you recommend including.** This is one of the many detectors in our main evaluations. In total, we include 8 model-level detectors, including 5 published detectors. This is far more than any other work we are aware of, and includes a broad range of different detection strategies, including scanning methods like Neural Cleanse and PixelBackdoor, baseline detectors like a specificity check, and adaptive methods that train against our trojaned networks including MNTD and Param. Thanks to your suggestion, we will add the Wang et al. [7] attack to the camera-ready paper, which is similar to the Neural Cleanse, ABS, and K-Arm, and PixelBackdoor detectors that we already include.\n\n**Evaluation of Sun et al. method to spot artifacts**\n\nThanks to your suggestion, we have run a preliminary evaluation with the Sun et al. method using their original codebase. Unfortunately, their method does not perform well on our standard trojans, possibly because we use different datasets and triggers. The original paper requires high-resolution images, which are challenging in our setting where we have to train over 6,000 networks. It also only uses colored patch triggers. By contrast, we use smaller resolution images and randomized black-and-white patch triggers to automatically sample from a distribution of triggers. We have not observed any artifacts caused by our specificity loss. To the contrary, not using the specificity loss causes the specificity-based detector to obtain very high scores (SB in Table 2). Thus, we are confident that our specificity loss is a genuine contribution that increases evasiveness against this type of detector. If we have addressed the thrust of your concerns, we kindly ask that you consider raising your score.\n\n**Removal-based defenses.**\n\n(As an aside, please note that MNTD does not require a clean dataset. It requires a dataset of clean and trojaned *networks*, but the queries are optimized from scratch.)\n\nSome research in the trojan detection community focuses on developing new attacks to evade the entire pipeline of trojan defenses. However, so far these works have not considered a wide range of model-level detectors, including training-based detectors like MNTD. Our paper does not attempt to evade the entire pipeline of defenses, including input-level, dataset-level, and model-level detection, and trojan removal. Rather, we are studying the specific problem of evading model-level detection, which hasn't been extensively studied before.\n\nThus, we do not include an extensive comparison to other types of defenses, including dataset-level or trojan removal defenses. In fact, since we fix the triggers in our experiments to highly visible triggers, we are confident that simple dataset-level methods like Activation Clustering would perform quite well on our attacks. Similarly, it is very possible that our method makes trojans easier to remove. However, this is not the focus of our contribution. Combining our model-level evasion method with methods for evading other types of defenses would be a large undertaking, so we leave this to future work."
                    }
                },
                "number": 8,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7765/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700608220610,
                "cdate": 1700608220610,
                "tmdate": 1700608259498,
                "mdate": 1700608259498,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "SJYZXalAo2",
            "forum": "NI0RsRuFsW",
            "replyto": "NI0RsRuFsW",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_CPhH"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7765/Reviewer_CPhH"
            ],
            "content": {
                "summary": {
                    "value": "**Paper Summary**\n\nThis paper proposes a new method to inject trojan into clean models. Specifically, a new `evasive loss\u2019 is introduced to minimize the distance between the parameters and features of clean/trojan models. Comparison results show that the new loss introduced can effectively evade commonly used trojan detection methods."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "**Strengths**\n\n\u2013 The writing is clear and the method is easy to understand.\n\u2013 The paper proposes an interesting method to evade trojan detection."
                },
                "weaknesses": {
                    "value": "**Weakness**\n\n\u2013 The method is very incremental with only a new term in loss introduced. \n\u2013 The overhead of introducing the new loss term is unclear  (in computation or model quality).\n\u2013 Comparison with trojan attacking works are not given. \n\u2013 The datasets used to evaluate the method are too small."
                },
                "questions": {
                    "value": "**Questions:**\n\nI think the method proposed has some insights, however the evaluation is not satisfactory.\n\n\u2013  It seems to me the new loss is only tested during the trojan injection method proposed in BadNet? The BadNet is referred to as \u2018Standard Trojan\u2019 across the paper. It is still unclear whether your new loss is effective on other trojan attacking methods, such as  WaNet (Nguyen & Tran, 2020b), ISSBA (Li et al., 2021c), LIRA (Doan et al., 2021), and DFST (Cheng et al., 2021).  To prove your new observation is effective, you should at least select more than 1 existing trojan injection methods and combine them with your new loss.\n\n\u2013  The model architecture for evaluation is also unclear to me. The parameter distance between two architectures are computed in your new evasive loss (Sec. 4.1) and I don\u2019t think this is computationally scalable for large models.\n\n\u2013 Only 4 datasets are given in the evaluation, and all of them have input size less than 32x32 (GTSRB is downsampled to 32x32 as mentioned in Page.6). I don\u2019t think this is enough to prove the method is effective. \n\n\u2013 A lot of redundant evaluations and figures in the paper. To me, Figure 3, Table 1 and Table 2 are telling the same thing with minor changes in evaluation metrics. Also, the abnormal performance that exists in the results is not fully explained. For example, why `Param` shows better detection rate in `standard trojan` compared to `evasive trojan`?\n\nOverall, I think the paper shows some interesting observations on how to evade trojan detection through Wasserstein distance. However, the evaluation still has room for improvement before acceptance."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7765/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699303501308,
            "cdate": 1699303501308,
            "tmdate": 1699636948111,
            "mdate": 1699636948111,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "VcbU1vEqU1",
                "forum": "NI0RsRuFsW",
                "replyto": "SJYZXalAo2",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7765/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Author Response"
                    },
                    "comment": {
                        "value": "Thank you for your careful analysis of our work. We hope the following response addresses your concerns.\n\n**Comparisons with other trojan attacks.**\n\nThe two trojan attacks we consider in the main experiments are the BadNets attack (which we call \"patch\") and the blended attack of Chen et al. 2017 (which we call \"blended\"). These are two foundational attacks in the literature that have become the standard for evaluating model-level detectors. We consider \"Standard\" and \"Evasive\" versions of these attacks to evaluate the impact of our evasion loss.\n\nIn Appendix B.2, we also compare to two representative stealthy trigger attacks: WaNet and LIRA. We find that these are trivially easy for model-level detectors to detect, with MNTD obtaining 100% and 97.1% AUROC, respectively. In preliminary experiments, we tried adding our evasion loss to WaNet but found that it did not reduce the AUROC of MNTD below 100%. This suggests that stealthy trigger attacks, which are designed to evade input-level detectors, are hard to make evasive for model-level detectors. A further corollary is that evading model-level detection likely requires different methods, such as the one proposed in our work.\n\nIn Appendix B.2, we also include comparisons to the TaCT trojan insertion method, which is a method for inserting source-specific trojans. Interestingly, we find that TaCT improves evasion against model-level detectors despite not being designed for this purpose. We also show that combining TaCT with our method gives even stronger evasion.\n\nIn total, we compare to five different trojan insertion methods, although we focus on the commonly studied \"patch\" and \"blended\" attacks in our main experiments due to their common usage in prior work on model-level detection.\n\n**Scalability of the evasion loss for larger models.**\n\nThe evasion loss is very computationally efficient, requiring only an L2 distance computation for each parameter vector. This is comparable to the compute required for L2 regularization.\n\nThe evasion loss does incur a memory overhead for loading the model, since it requires loading an \"anchor model\" fixed to the initialization. For the ResNet-50 scale models that we use (described in Section 5), this is inconsequential. However, for LLM-scale models it could present some moderate challenges, although it would certainly still be a viable attack.\n\n**Reason for using the selected datasets.**\n\nMost neural trojan papers only train a handful of models, or a few hundred at most. Investigating model-level detection requires training datasets of models. We train over 6,000 models in total, with each individual number in our tables representing hundreds of trained models. Each model requires approximately an hour to train (more for Vision Transformers on GTSRB). Thus, for computational reasons we decided to focus on 32x32 datasets that are commonly used in the model-level detection literature.\n\n**Differences between Figure 3, Table 2, and Table 1.**\n\nYou are correct that Figure 3 and Table 2 show two views of the same data. Table 2 is a table of AUROC values, and Figure 3 shows individual ROC curves for three representative experiments in this table. It's standard to show ROC curves alongside AUROC values, as the full curves can provide helpful context as to the shape of the tradeoff and whether one method is always better than the other, or whether this is only true for certain recall and FPR values.\n\nTable 1 shows different numbers: the ASR of the trojans and accuracy of the trojaned models on clean inputs without triggers. This demonstrates that our evasive trojans have similar ASR and accuracy to standard trojans and clean networks, which is important for ensuring that the comparisons between standard and evasive trojans are fair. If we have addressed the thrust of your concerns, we kindly ask that you consider raising your score.\n\n**Reason for Param detector's high performance.**\n\nIn Appendix B.1, we show that removing our randomization loss causes the Param detector to obtain 100% AUROC. In fact, the Param detector's strong performance in preliminary experiments is what led us to develop the randomization loss and discover the issue of emergent coordination that we show in Figure 4. Even after including our randomization loss, the Param detector performs better on our Evasive Trojans than on Standard Trojans, although the difference is much smaller than before. We have updated the paper to clarify this. Thank you for your suggestion."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7765/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700608176239,
                "cdate": 1700608176239,
                "tmdate": 1700608581895,
                "mdate": 1700608581895,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]