[
    {
        "title": "Fast Value Tracking for Deep Reinforcement Learning"
    },
    {
        "review": {
            "id": "EhaYeduNRW",
            "forum": "LZIOBA2oDU",
            "replyto": "LZIOBA2oDU",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission3802/Reviewer_n3CS"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission3802/Reviewer_n3CS"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposed a novel and scalable sampling algorithm for reinforcement learning. It provides a systematic theoretical analysis of the convergence, identifying that the method is able to quantify uncertainties."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "1 poor"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "This paper focuses on an important problem of RL: how to model the uncertainty during the interaction with the environment.\n\nThe paper proposed a new sampling framework for RL. The paper also gives a systematic theoretical analysis of the convergence of the proposed algorithm under the general nonlinear setting."
                },
                "weaknesses": {
                    "value": "The writing of the paper is quite unclear to me. Some presentations need to be further clarified.\n\n- I don't quite understand why the title of the paper is \"fast value tracking\". The term \"tracking\" is only mentioned in the introduction without clearly explaining it. Why is it \"fast\"?\n\n- eq. 2,  introducing  $\\pi$ seems lack motivation to me. Why it can tackle the issues suffered by KTD.\n\n  \n\nSome terms need further explanation and clarification.\n\n- Please clarify what \"stage\" means.\n- $x_t$ denotes a set of states and actions, does it refer to a trajectory containing a set of states and actions?\n- It's weird to introduce a notation without explanation the first time, such as $h(\\cdot)$\n- \"Optimal policy exploration\"\n\nThe experiments are not sufficient\n\n- the paper only compares the Adam algorithm.\n- The improvement over Adam is not significant   according to Figure A1\n\n\n\n\nMinor comments:\n\n- It's kind of weird to say $r(s,a)$ is a random variable.\n- Markov chain => Markov Chain\n- It's kind of hard to get the main contribution of the paper from the introduction\n- such as e.g.?\n- The caption in Figure 5 is very akward."
                },
                "questions": {
                    "value": "The paper claims that:\n\n> it is more appropriate to consider the value or the model parameters as random variables rather than fixed unknowns, and it is preferable to focus on tracking rather than convergence during the policy learning process.\n\nHowever, could you please explain what tracking is? And how could (i)(ii)(iii)(iv) can lead to this conclusion or statement?\n\n\n\n\n\nHow's the paper related to some random value function-based method? such as [1].\n\n[1] Osband, Ian, et al. \"Deep Exploration via Randomized Value Functions.\" *J. Mach. Learn. Res.* 20.124 (2019): 1-62."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission3802/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698845996215,
            "cdate": 1698845996215,
            "tmdate": 1699636337449,
            "mdate": 1699636337449,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "PEJjCG3z7I",
                "forum": "LZIOBA2oDU",
                "replyto": "EhaYeduNRW",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3802/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3802/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Reply to Reviewer n3CS"
                    },
                    "comment": {
                        "value": "### reply to W1:\nWe use the term \"value tracking\" to reflect the state-space model nature of reinforcement learning (RL). Specifically, we reformulate RL as a state space model and estimate the model using a modified Kalman filter method along with process of data generation.\n\n#### Ans:    \n\nThe word `fast' reflects the efficiency of the proposed LKTD algorithm, \n         As analyzed at the end of Section 1, LKTD has a computational complexity of $O(np)$ per iteration, allowing scalability for large-scale neural network approximations, where $p$ denotes the dimension (i.e., number of parameters) of the neural network. In contrast, the computational complexity of the existing filter algorithms is $O(p^2)$ per iteration. \n         Therefore, the proposed algorithm can be very efficient when a large-scale network is used in approximation, while the sample size at each stage/step is small.\n\n#### Ans:    \nKTD suffers from inaccurate linearization and resulted operations on large-scale matrices. The proposed algorithm employs a state augmentation approach, see equation (5) of the paper, to avoid linearization. Furthermore, it accelerates computation  using the forecast-analysis procedure developed in ensemble Kalman filter, which avoids direct decomposition of the preconditioned matrix given in equation (11) of the paper. Refer to Zhang et al. [1] for more discussions on this issue.\n\n[1] Peiyi Zhang, Qifan Song, and Faming Liang. A langevinized ensemble kalman filter for large-\nscale static and dynamic learning. Statistica Sinica, 2023. doi: 10.5705/ss.202022.0172.\n\n### reply to W2:    \n#### Ans:    \nThe term \"stage\" refers to  a time step of the state space model, where a batch of training samples are collected based on the current value of $\\theta$. In the revision, we will change it to ``step'' as used in some other RL papers.\n\n#### Ans:    \nYes, $x_t = (s_t, a_t, s_{t+1}, a_{t+1})$, which is the transition tuple excluding the reward $r_t$.\n\n#### Ans:    \nIn the revision, we will add explanations for all newly introduced notations. Specifically, $h(x_t,\\theta_t)$ can be interpreted as a stochastic estimator of $E_{\\rho} [r(s,a)|s,a]$ based on the new sample $s_{t+1}$ or  $(s_{t+1},a_{t+1})$, depending on our interest in $V$- or $Q$-functions.\n\n#### Ans:    \nWe use term to express the property of the proposed algorithm: It can potentially sample all optimal policies with correct proportions. We illustrates this property using Figure 4, which indicates the proposed algorithm can sample optimal policies in approximately correct proportions, while Adam fails to explore different optimal policies.\n\n### reply to W3:\nThe major goal of this research is to provide a method to quantify the uncertainty associated with the RL system. As demonstrated by Figure 2 and Figure 3, the proposed algorithms significantly outperform EKF and Adam in this perspective. \n\nAs the second goal of this research, we use Figure A1 to show the proposed algorithm also performs very well in model training in terms of rewards. The proposed algorithm achieves comparable or better performance as Adam, a state-of-the-art algorithm in complex function optimization.\n\n\n### reply to W4:\n#### Ans:  \nIt refers to a reward in the paper. As a function of the state variable $s$ and the action variable $a$, it is indeed a random variable in RL.\n\n#### Ans:  \nThe text will be changed accordingly.\n\n#### Ans:  \nIn the revision, we will particularly emphasize that (i) we provide a new formulation for RL, and (ii) provide an associated sampling algorithm and study its theoretical guarantee, enabling the uncertainty associated with the RL system to be properly quantified. However, the existing methods fail to do so.\nWe note that our use of SGLD in this paper is new and should be classified as one of our proposed algorithms for RL. In the rebuttal, we have implemented an existing version of SGLD (Vanilla SGLD) for RL. on the mean square Bellman error, which cannot provide faithful confidence intervals as ours. \nThe following figure shows the mean coverage rate of 95% prediction interval over 100 experiments.\nhttps://pasteboard.co/xHNnZ0kGEyoX.png\n\n#### Ans:  \nThe text will be changed accordingly.\n\n#### Ans:  \nIt will be expanded in the revision: The left plot shows the cumulative rewards obtained during the training process, the middle plot shows the testing performance without random exploration, and the right plot shows the performance of best model learned up to the current stage."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3802/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700711750931,
                "cdate": 1700711750931,
                "tmdate": 1700711750931,
                "mdate": 1700711750931,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "UaE2MvPQd3",
            "forum": "LZIOBA2oDU",
            "replyto": "LZIOBA2oDU",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission3802/Reviewer_dX3U"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission3802/Reviewer_dX3U"
            ],
            "content": {
                "summary": {
                    "value": "This paper delves into the stochastic nature in RL by introducing the Langevinized Kalman Temporal-Difference (LKTD) algorithm, which relies on an approximate sampling technique grounded in the Kalman filtering paradigm. By leveraging stochastic gradient Markov chain Monte Carlo (SGMCMC), this algorithm efficiently draws samples from the posterior distribution of deep neural network parameters, offering robust uncertainty quantification for deep RL."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "Existing RL algorithms often treat the value function as a deterministic entity, overlooking the system's inherent stochastic nature. The Kalman Temporal Difference (KTD) framework in RL treats the value function as a random variable, aiming to track the policy learning process by formulating RL as a state space model. However, KTD-based techniques employing linearization methods become inefficient with high-dimensional models.\n\nTo improve the computational efficiency in deep RL, this paper reformulates RL with a new state space model, and adopts Langevinized ensemble Kalman filter (LEnKF) algorithm to ensure that the empirical distribution of the parameters in value function will converge to the desired target distribution. This reformulation enhances robustness by including prior information in the state evolution equation, robustifying performance, and handling large-scale neural network approximations. The proposed algorithm introduces computational efficiency, directly handling nonlinear functions without requiring linearization. It achieves memory efficiency by replacing the storage for the covariance matrix with particles, showcasing scalability for large-scale neural network approximations.\n\nProviding the convergence guarantee in deep RL while incorporating approximate Bayesian inference can be challenging. This paper establishes promising performance guarantees in this regime."
                },
                "weaknesses": {
                    "value": "1. The uncertainty quantification for Deep RL is not restricted to Kalman TD frameworks. In the literature of Bayesian RL, we do have works that adopt other approximate sampling techniques, e.g. ensembling in Bootstrapped DQN (Osband et.al. 2016), \"Deep Exploration via Randomized Value Functions\" (Osband et.al. 2019), and RLSVI with general function approximation (Ishfaq et.al., 2021). Although the above methods do not adopt MCMC methods as approximate sampling scheme, could authors compare the proposed method with the existing Bayesian RL methods, not just restricted to the Kalman TD context?\n\n2. Though the authors provide a clear comparison to the existing Kalman TD frameworks,  it is desirable to see a more thorough related work study in Bayesian RL / uncertainty quantification in deep RL, which would be beneficial.\n\n3. The proposed method requires a proper prior distribution to achieve the performance guarantee in LEnKF. It is unclear how the quality of the prior affects the performance through the current theorems. Is it possible to capture such quantity in the upper bounds provided in Theorem 1 or Theorem 2?\n\n4. The experiment environments are relatively simple, especially for the control tasks. It is suggested authors consider more complicated locomotion tasks to demonstrate the effectiveness of the proposed method.\n\n5. The proofs of Theorem 1 and 2 rely on a significant number of assumptions. It is suggested authors comment on whether those assumptions are imposed in order to achieve the convergence guarantee in sampling schemes, and how such assumptions can be satisfied in practice."
                },
                "questions": {
                    "value": "1. Could authors comment on how many number of iterations are required in SGLD in order to achieve the convergence guarantee in Theorem 1? And how optimal is the convergence rate?\n\n2. I am also curious if we adopt second-order MCMC methods such as SGHMC, could we obtain faster convergence with extra computational benefits? Is Theorem 1 generalizable to include the convergence guarantee of SGHMC methods? What can be potential challenges compared to SGLD?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission3802/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698986789727,
            "cdate": 1698986789727,
            "tmdate": 1699636337375,
            "mdate": 1699636337375,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "Ozci7oPQai",
                "forum": "LZIOBA2oDU",
                "replyto": "UaE2MvPQd3",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3802/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3802/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Reply to Reviewer dX3U"
                    },
                    "comment": {
                        "value": "### reply to W1: \nIn our most recent experiment, we compared our LKTD and the reformulated SGLD algorithms with DQN, BootDQN, and Vanilla SGMCMC algorithms, which do not incorporate our state space reformulation. The box plot of the coverage rate in Figure 1 (https://pasteboard.co/xHNnZ0kGEyoX.png) clearly shows that only the LKTD and reformulated SGLD algorithms achieve a reliable 95% prediction interval. In contrast, the other algorithms failed to converge to the true Q-value function. This failure is attributed to the semi-gradient derived from the DQN structure, which represents a biased gradient for the mean square Bellman equation.\n\n### reply to W2: \nBayesian DQN deploys Thompson sampling on the approximated posterior of the Q-function. However, the posterior distribution is conditional on the last hidden layer of the deep Q network. Since the network parameters are constantly changing throughout the training phase, it is unclear where the Q-function converges. On the other hand, LKTD guarantees the Q-network converges to a distribution around the optimal Q-function. Therefore, we can draw samples during the training phase and perform uncertainty quantification in a single experiment. Thanks for your advice, in the revision, we will include a more detailed explanation of the difference between our algorithm and related works.\n### reply to W3: \nThanks for your thoughtful question. The prior can generally affect   \n    the constants $A$, $L_U$, $m_U$, $M_U$, and $B$, which are involved in the upper bound provided \n    in Theorem 1. However, as implied by equation (9) in Algorithm 1, the prior effect  on these constants is of the order $O(\\frac{1}{\\mathcal{N}})$, which can be diminished by increasing the pseudo population size $\\mathcal{N}$.\n### reply to W4: \nAs suggested by another reviewer, we will include behavior suite environment in our revision.\n\n### reply to W5:\nThank you for your thoughtful question. In Lemma 1, we show that the Kalman temporal difference (KTD) framework used to solve the RL problem can be formulated as a preconditioned SGLD algorithm. This formulation is general without specific assumptions involved. \n    Then we establish the convergence of the preconditioned SGLD algorithm under the standard assumptions for stochastic gradient MCMC algorithms. We refer these assumptions to Raginsky et al. (2017) [1] (cited in the paper).  As explained below, these assumptions can be easily satisfied in practice.\nAssumption A1-(C1) concerns the stationarity of the Markov decision process (MDP), a regular condition for almost all RL studies. \n     \nAssumption A1-(C3) basically requires the log-prior density function $\\log \\pi(\\theta)$ \n    and the neural network function $h(x,\\theta)$ (with $\\theta$ representing the weights \n    of the neural network) to be twice continuously differentiable. In this paper, we set $\\pi(\\theta)$ \n    as  a mixture Gaussian distribution (see equation (A34)). Therefore, A1-(C3) is satisfied.\n\nIntuitively, the assumption A1-(C4) is to bound the dynamics inside a bounded domain; if $\\theta_k$ is far away from the origin, then the dynamics are forced to get back around the origin. Although the neural network likelihood function is multimodal, the mixture Gaussian prior used in the paper forces the resulting posterior to be well behaved around the origin and thus to satisfy \n    A1-(C4) and A1-(C2). \n\nAssumption A1-(C5) regulates the variation of the stochastic gradient involved \n     at each iteration of the algorithm. This assumption can be satisfied by a pre-fixed value \n     of $\\mathcal{N}$.\n\nAssumption A1-(C6) concerns the distribution of the initial weights of the neural network. It can be satisfied by initializing weights in a bounded space.\n\nAssumption A2 concerns the setting of the learning rate, which can be satisfied by setting $\\epsilon_k=O(1/k^{\\alpha})$ for some $1/2 < \\alpha<1$. Assumption A3 is taken from Chen et al. (2015) [2] (cited in the paper), a regular assumption for test functions. Assumption A4 concerns the eigenvalues of the preconditioning matrix. It is automatically satisfied by the special structure \n     of $\\Sigma_t= \\frac{n}{\\mathcal{N}}[I-\\epsilon_t H_t^T(\\epsilon_t H_t H_t^T+R_t)^{-1} H_t]$, following from an extension of Ostrowski's theorem [3].\n\nThe above discussions will be incorporated into the revised manuscript.\n\n[1] Maxim Raginsky, Alexander Rakhlin, and Matus Telgarsky. Non-convex learning via\nstochastic gradient Langevin dynamics: a nonasymptotic analysis. In Proceedings of the\n2017 Conference on Learning Theory, pp. 1674\u20131703, 2017.}\n\n[2] Changyou Chen, Nan Ding, and Lawrence Carin. On the convergence of stochastic gradient\nmcmc algorithms with high-order integrators. In Advances in Neural Information Processing\nSystems, pp. 2278\u20132286, 2015.\n\n[3] Nicholas J. Higham and Sheung Hun Cheng, Modifying the Inertia of Matrices Arising in Optimization, Linear Algebra Appl. 275\u2013276, 261-279, 1998."
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3802/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700710621977,
                "cdate": 1700710621977,
                "tmdate": 1700710621977,
                "mdate": 1700710621977,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "UEQ43fhi1i",
            "forum": "LZIOBA2oDU",
            "replyto": "LZIOBA2oDU",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission3802/Reviewer_5LPR"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission3802/Reviewer_5LPR"
            ],
            "content": {
                "summary": {
                    "value": "This paper introduces a sampling algorithm called Langevinized Kalman Temporal-Difference (LKTD) for deep reinforcement learning. The algorithm leverages the Kalman filtering paradigm to efficiently draw samples from the approximate posterior distribution of deep neural network parameters, allowing for the quantification of uncertainties associated with the value function and model parameters. The LKTD algorithm improves the robustness and adaptability of reinforcement learning approaches."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "The paper introduces the limitations of existing reinforcement learning algorithms that overlook the stochastic nature of the agent-environment interaction system. To address this, the authors propose a novel algorithm called Langevinized Kalman Temporal-Difference (LKTD) that leverages the Kalman filtering paradigm to draw samples from the posterior distribution of deep neural network parameters. The LKTD algorithm allows for quantifying uncertainties associated with the value function and model parameters, and enables monitoring of these uncertainties during policy updates throughout the training phase.\n\n### Technical route of the article (step by step):\n\nThe LKTD algorithm is based on Langevin-Koopman Dynamic Mode Decomposition (LKTD) and Stochastic Gradient Langevin Dynamics (SGLD) sampler.\nThe mathematical equations and algorithms used in the LKTD algorithm are described, including the formulas for forecasting and analysis.\nThe convergence of the LKTD algorithm under the on-policy setting is discussed, along with the conditions and assumptions required for the convergence.\nThe choice of the pseudo-population size N and its impact on the system is explained.\nThe cooperation of the LKTD algorithm with a replay buffer is discussed, and a convergence theory for this scenario is presented."
                },
                "weaknesses": {
                    "value": "1. Comparison with existing posterior sampling value-based algorithms for exploration is missing. Say ensemble sampling, Bootstrapped DQN or HyperDQN.\n2. It is better to translate the theoretical guarantee to regret bound.\n3. Comparison for uncertainty quantification in deep neural network is missing.\n4. The empirical performance could be demonstrated through a wider range of benchmark problems, e.g. Arcade Learning benchmarks or behaviour suite."
                },
                "questions": {
                    "value": "See weakness."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission3802/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3802/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission3802/Reviewer_5LPR"
                    ]
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission3802/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699107592599,
            "cdate": 1699107592599,
            "tmdate": 1699636337311,
            "mdate": 1699636337311,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "8sxFkz9gPN",
                "forum": "LZIOBA2oDU",
                "replyto": "UEQ43fhi1i",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission3802/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission3802/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Reply to Reviewer 5LPR"
                    },
                    "comment": {
                        "value": "### reply to W1:    \nWe have implemented Bootstrapped DQN to construct 95\\% prediction interval for the escape environment.  Due to the use of semi-gradient in DQN structure, the Q-functions construct by BootDQN is biased and thus the resulting confidence interval is less faithful. \nIn figure 1 (https://pasteboard.co/xHNnZ0kGEyoX.png), the box plot of coverage rate shows that BootDQN failed to cover the true Q-value at the nominal 95\\% level. In figure 2 (https://pasteboard.co/kBcqXjvKh6pP.png) , the MSE of Q-value estimates indicates that BootDQN exhibits a much larger bias compare to LKTD and SGLD (with pseudo population). In figure 3 (https://pasteboard.co/1mRkGnk2YJ0N.png), there is a clear decrease in interval length as the pseudo population size increases, which agrees with the statement in Remark 2. In our implementation for Bootstrap DQN, we set the learning rate to $10^{-4}$, and Bernoulli masking probability to 0.5. We demonstrated the results for two settings: head=5 and head=20.\n\n### reply to W2:   \nWe don't use regret function as our objective function. Instead of minimizing the regret function, LKTD draws samples from the stationary distribution of Q-values. Hence, the performance of the algorithm is quantified by the bias between sample mean $\\bar{\\phi}_\\mathcal{N}(\\theta)$ and the population $\\phi(\\theta^*)$. As implied by equation (14) in Remark 1, the resulting regret is of the order $O(r_n^4 T/\\mathcal{N}) + O(\\sqrt{T})$, where $T$ denotes the number of time stages/steps.\n    Therefore, the proposed method obtains the ideal $O(\\sqrt{T})$ error bounds by choosing a large value \n    of $\\mathcal{N}$. In the revision, we will add a remark for this translation.\n### reply to W3:   \nIn this rebuttal, we have included the results of SGLD and SGHMC, which were used to train deep neural networks but in the conventional  formulation. That is, we apply both algorithms directly to the mean square temporal difference loss function without state space reformulation. \n    \\begin{equation}\n        \\sum_{i=1}^n (Q(s,a|\\theta) - r -\\gamma \\max_{a'} Q(s',a'|\\theta))^2 + ||\\theta||^2\n    \\end{equation}\n    As shown by the plots given in the common reply, they could not produce correct coverage for Q-values. This experiment indicates the importance of our new formulation. For Vanilla SGLD and Vanilla SGHMC, both learning rate and temperature are set to $10^{-4}$ and 0.1 respectively. And the momentum coefficient for SGHMC is set to be 0.9.\n### reply to W4:   \n We have applied LKTD to noisy environment in behavior suite: bandit_noise(https://pasteboard.co/LRriSJpY8lHy.png) and cart pole_noise(https://pasteboard.co/shFjTcVrL8jn.png), where average regret is used as a criterion of performance. However,  due to the nature of sampling algorithms, LKTD is expected to have slightly higher regret due to higher variation for uncertainty quantification. Hence, the coverage rate of the prediction interval is a better measurement for LKTD."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission3802/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700708300722,
                "cdate": 1700708300722,
                "tmdate": 1700710250962,
                "mdate": 1700710250962,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]