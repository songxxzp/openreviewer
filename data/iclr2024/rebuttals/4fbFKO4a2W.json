[
    {
        "title": "Guided Sketch-Based Program Induction by Search Gradients"
    },
    {
        "review": {
            "id": "3sPsr8B2I7",
            "forum": "4fbFKO4a2W",
            "replyto": "4fbFKO4a2W",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission286/Reviewer_EcME"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission286/Reviewer_EcME"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposes using Natural Evolution Strategies for synthesizing programs. Given a program sketch, they create a parameterized distribution for possible values of the holes. They attempt to use Natural Evolution Strategies to learn, via gradient descent, a distribution whose argmax will be the ground truth program. On two example synthesis problems, the authors show their approach leads to solutions which satisfy the input/output specifications."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "1 poor"
                },
                "strengths": {
                    "value": "I think there could be potential in the approach of using Natural Evolution Strategies for program synthesis.\n\nThe authors have a good grasp of related work and the key difficulties behind face program synthesis and program induction."
                },
                "weaknesses": {
                    "value": "Overall, the paper is still in its infancy.\n\nThe evaluation consists of running the approach on two toy synthesis tasks, each of which consists of a single conditional. They are more like example problems rather than a benchmark from which the performance of the approach can be gleaned.\n\nThere is no comparison to alternative methods.\n\nThe approach is described with little detail. In particular, the core contribution is using Natural Evolution Strategies (NES) to fill program sketches, and the details and intuition of how NES works  here is not systematically explained, so it's hard to understand what is going on.\n\nI would suggest evaluating your approach on some standard benchmarks and comparing to prior work, so we can get a sense of how well NES works in terms of computational cost and performance."
                },
                "questions": {
                    "value": "None"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "1: strong reject"
                },
                "confidence": {
                    "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission286/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission286/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission286/Reviewer_EcME"
                    ]
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission286/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698686957592,
            "cdate": 1698686957592,
            "tmdate": 1699635954472,
            "mdate": 1699635954472,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    },
    {
        "review": {
            "id": "AZhODIrTZs",
            "forum": "4fbFKO4a2W",
            "replyto": "4fbFKO4a2W",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission286/Reviewer_MY2o"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission286/Reviewer_MY2o"
            ],
            "content": {
                "summary": {
                    "value": "The paper proposes an approach to automated program synthesis based on\nuser-provided sketches that allow to learn parameterized programs. The authors\ndescribe their approach, which uses evolutionary algorithms and gradients, and\nevaluate it empirically."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "The paper tackles an interesting problem, but falls short in several areas."
                },
                "weaknesses": {
                    "value": "First, the description of the proposed method is unclear. Algorithm 1 contains\nseveral concepts, e.g. the return F_i, that are not defined or explained in the\ntext. It is impossible to even judge, never mind reproduce what the authors have\ndone without this information.\n\nFurther, the empirical evaluation is tiny, comprising only two programs unless I\nmissed something. This isn't sufficient to show the general applicability of the\nmethod, in particular as there is no comparison to other approaches. It is\nimpossible to judge if or how much the proposed approach improves over the\nliterature and other approaches.\n\nIt is unclear why the description of the method was broken into \"PT.1\" and\n\"PT.2\"."
                },
                "questions": {
                    "value": "No questions."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission286/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698689698210,
            "cdate": 1698689698210,
            "tmdate": 1699635954386,
            "mdate": 1699635954386,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    },
    {
        "review": {
            "id": "uRD2Ka9oN7",
            "forum": "4fbFKO4a2W",
            "replyto": "4fbFKO4a2W",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission286/Reviewer_y6cE"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission286/Reviewer_y6cE"
            ],
            "content": {
                "summary": {
                    "value": "This work proposes an approach to program induction based on reducing program induction to an optimization problem using Natural Evolution Strategies, which is an approach based around approximating gradients through perturbing and scoring parameters to update a search distribution from which programs can be sampled. Program tokens are sampled from categorical distributions while floating point constants are sampled from normal distributions, and the parameters of these distributions are optimized through the search process. This search method is used to fill the holes in a program sketch, where the size of the output program is known."
                },
                "soundness": {
                    "value": "1 poor"
                },
                "presentation": {
                    "value": "1 poor"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "* The idea of a program synthesis approach based around gradient descent on a search distribution which is then used for sampling programs is generally an interesting one"
                },
                "weaknesses": {
                    "value": "**Overall** This work is very preliminary, the experiments are very limited and much of the paper is spent on background around synthesis approaches. I don't think this is ready for publication at ICLR, but I encourage the authors to submit with revisions to a workshop.\n\nSpecific points:\n- The experiments are very preliminary \u2013 they run two experiments, each involving finding a single program. More complete experiments would be needed on larger datasets (ideally ones used in the synthesis community) to properly evaluate the method\n- Working with fixed sized programs is a considerable limitation, for example a hole can be filled with something like `5` or `+` or but not with `(+ 2 x)`. It's difficult for me to think of a setting where this kind of thing is known.\n\nSome more minor points around the background and setup of the paper:\n- The framing of \"program induction\" as being distinct from \"program synthesis\" doesn't align with how I believe the terms are generally used in the field \u2013 program induction is a specific type of program synthesis. The authors give a reasonable definition of program induction in section 1.1, however in section 1.2 they say \"Unlike program induction, in which the system learns a program for a specific task, program synthesis is concerned with generating correct programs of arbitrary, high-level specifications.\". I would instead frame it as program synthesis being the general setting of finding a program that solves a task given a specification of that task, and program induction being program synthesis when the specification is underspecified (eg when it's given as input-output examples, as opposed to a formal logical spec). I'm happy to provide references to synthesis papers that use the terms in these ways if it's helpful, I'm fairly confident these are the usual definitions and that synthesis is not generally held in contrast to induction but rather as a supertype of it. Also, note that program synthesis still generally deals with solving tasks \u2013 the high level specifications are just another way of specifying tasks.\n    - I also notice \"inductive synthesis\" is described in section 1.2.2 which I think is describing the same thing as program induction again \u2013 Are these two sections meant to be describing different ideas?\n- Deductive synthesis is described in 1.2.1 then never comes up again and doesnt seem related to the papers approach\n- Generally, much of sections 1-3 can be condensed and combined into fewer headings.\n- In section 1 there's a mention of how \"interpretability\" is \"inherent in handwritten programs\". This statement could use a bit more of a caveat \u2013 it's certainly possible (and in fact common) to write programs that are difficult to understand/interpret, depending on what you mean by interpretability. For example, obfuscated code and uncommented code can be difficult for humans to understand, and the amount of static analysis / automated interpretability one can do of programs is highly dependent on the language. I agree with the argument that programs are often much more interpretable than deep learning models, but I would suggest caveating it a bit more than just stating that interpretability is \"inherent\""
                },
                "questions": {
                    "value": "* Can you clarify the program induction / synthesis distinction mentioned in Weaknesses above?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission286/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission286/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission286/Reviewer_y6cE"
                    ]
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission286/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698980417254,
            "cdate": 1698980417254,
            "tmdate": 1699635954233,
            "mdate": 1699635954233,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    },
    {
        "review": {
            "id": "ceIuNTB3QZ",
            "forum": "4fbFKO4a2W",
            "replyto": "4fbFKO4a2W",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission286/Reviewer_a6L3"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission286/Reviewer_a6L3"
            ],
            "content": {
                "summary": {
                    "value": "This work introduces a method for performing program induction by using a blackbox optimisation for\nfinding the best parameters to fill holes in parametrised sketches of programs."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "The paper is very clearly written and task it's trying to solve well-specified. While there is\nplenty of work on program synthesis with sketches, I do feel there are still many powerful applications\nof sketching that have been under-explored like this work."
                },
                "weaknesses": {
                    "value": "The use of a blackbox optimization algorithm was novel, but the programs involved are so\nsmall. Would it not be possible to make a set of differentiable program sketches by enumerating\nall the discrete choices, running a gradient optimization for each of them, and then taking\nthe sketch which optimised the objective function best? For programs this small, isn't an\nenumerative search still viable?\n\nI also wish the proposed algorithm had been compared against something else. A simple\nbaseline or maybe even RobustFill? Right now, the experiments consist of two fairly small\nprograms and no sense of whether the results shown are better or worse than other methods\nused for program induction."
                },
                "questions": {
                    "value": "Would it be possible to cover this algorithm to neurally-guided methods?\nWould it be possible to cover it to some enumerative search baseline?\nCould these comparisons include number of programs explored and wall-clock time for the search procedure?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission286/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699504651466,
            "cdate": 1699504651466,
            "tmdate": 1699635954151,
            "mdate": 1699635954151,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    }
]