[
    {
        "title": "DIFUSCO-LNS: Diffusion-Guided Large Neighbourhood Search for Integer Linear Programming"
    },
    {
        "review": {
            "id": "tz7TSmg0HF",
            "forum": "9QV7Q9gKl9",
            "replyto": "9QV7Q9gKl9",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4304/Reviewer_Xy75"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4304/Reviewer_Xy75"
            ],
            "content": {
                "summary": {
                    "value": "The authors propose using a diffusion model for generating neighborhoods for use in large neighborhood search. The diffusion model is trained to imitate local branching, an oracle method that is supposed to find the best local neighborhood to search. The authors present results comparing their approach against other learning-based approaches, heuristics, and branch and bound. They demonstrate mixed results with learning approaches tending to outperform fixed heuristics."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "The main strengths of the work are that it evaluates against several baselines, using several metrics, and in several ILP settings including generalization to larger instances. Additionally, the paper overall gives a reasonable explanation of the model architecture, data collection, and settings."
                },
                "weaknesses": {
                    "value": "The main weakness of the work is that it seems to just be application of a diffusion model to improve LNS solving without further developing or integrating any of the ideas in diffusion or LNS to get improved performance. For instance, previous approaches generally consider directly predicting the neighborhood. However, given a generative diffusion model one might consider generating several neighborhoods, evaluating them, and selecting the best. Otherwise, you might also consider integrating optimization-based objectives in the diffusion model to guide the diffusion model towards generating better solutions. \n\nAdditionally, while the authors do evaluate many metrics, the performance difference between the proposed approach and previous work seems to be quite small and within the uncertainty intervals. It seems unclear that the proposed approach does improve over previous work but in the case that it generally does improve just within a small margin, you might consider evaluating win rate across instances or computing an average rank across instances to understand which algorithm generally solves the problem the fastest.\n\nThe problem instances also seem to be effectively solved quite quickly with the primal gap quickly reaching below 10-3. It would help to explain what level of primal gap is reasonable for these instances to be considered solved."
                },
                "questions": {
                    "value": "The authors should consider some rephrasing to better situate their work within the context of optimization.\nPositioning of the work:\n1st paragraph, last sentence\nOur work \u2026 belongs to the category of approximate solvers.\nIt seems that this work doesn\u2019t give approximation guarantees and also doesn\u2019t give indication of how close to optimality a solution is so instead should be considered a primal solver.\n\n3rd paragraph\nIt is unclear why the referenced LNS approaches require domain-expert knowledge. It seems that they all readily take the ILP formulation as input without much tuning (other than selecting the neighborhood size which is needed in this work as well).\nIn the same paragraph, it is not obvious why a data-driven approach is necessarily a better alternative as it assumes access to a distribution of problem instances and requires offline training. Here it might be helpful to give a high-level explanation of why learning-based methods should work well. \n\nIt would be helpful to explain why local branching is something we desire to learn, does it give performance guarantees for LNS? Does it empirically work well but is just too slow?\n\nAverage rank seems to be computed using the summary statistics. However, it might be informative to include a metric measuring the average rank that averages over problem instances. This would help give an idea of whether a given algorithm was generally solving problems faster overall. \n\nSmall errors:\n\n2nd paragraph\nHeuristics \u2026 is called \u2026 -> heuristics are called\n3rd paragraph\nHand-craft destroy -> hand-crafted destroy\nP3 local branching paragraph\n\u201cCan we\u201d -> delete this, or missing rest of sentence?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4304/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698700237878,
            "cdate": 1698700237878,
            "tmdate": 1699636398679,
            "mdate": 1699636398679,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "EZVX6TPyb2",
                "forum": "9QV7Q9gKl9",
                "replyto": "tz7TSmg0HF",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4304/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4304/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Reply to Reviewer Xy75"
                    },
                    "comment": {
                        "value": "We want to thank Reviewer Xy75 for your valuable suggestions. We will polish the paper accordingly. Here is the response to your questions.\n\n> The main weakness of the work is that it seems to just be application of a diffusion model to improve LNS solving without further developing or integrating any of the ideas in diffusion or LNS to get improved performance. \n\nPlease see the first part of our general response.\n\n> The problem instances also seem to be effectively solved quite quickly with the primal gap quickly reaching below 10-3. It would help to explain what level of primal gap is reasonable for these instances to be considered solved.\n\nWe compute the primal gap based on the optimal primal bound among all methods in our experiment, therefore, reaching $10^{-3}$ does not really mean the model reaches the optimal value. Also please see our general responses on this.\n\n> It would be helpful to explain why local branching is something we desire to learn, does it give performance guarantees for LNS? Does it empirically work well but is just too slow?\n\nLB (local branching) can give a guaranteed optimal neighborhood for LNS if it can be solved optimally, but it is NP-complete and shares the same time complexity as the original problem. Therefore, it is usually not used when the primal heuristics are needed within a short time.\n\n> It seems that this work doesn\u2019t give approximation guarantees\n\nThanks for pointing this out. We have changed the phrase from approximate solvers to primal solvers.\n\n> Here it might be helpful to give a high-level explanation of why learning-based methods should work well.\n\nThanks for the insightful comment. We have added a paragraph explaining that.\n\n> Average rank seems to be computed using the summary statistics. However, it might be informative to include a metric measuring the average rank that averages over problem instances. This would help give an idea of whether a given algorithm was generally solving problems faster overall.\n\nThis is a really helpful suggestion. We have made the corresponding change in Table 2 and 3. From the current average rank, CL-LNS looks stronger which is also consistent with the conclusion in the original paper."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4304/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700720964724,
                "cdate": 1700720964724,
                "tmdate": 1700723579657,
                "mdate": 1700723579657,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "enmCeY15GK",
            "forum": "9QV7Q9gKl9",
            "replyto": "9QV7Q9gKl9",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4304/Reviewer_Gizx"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4304/Reviewer_Gizx"
            ],
            "content": {
                "summary": {
                    "value": "The paper proposes a diffusion-based approach for learning a large neighborhood heuristic for solving integer linear programming problems (ILPs). Large neighborhood primal heuristics can be used to quickly find high-quality solutions to ILPs using commercial ILP solvers. They do so by iteratively destroying (using a destroy heuristic) and repairing (using the ILP solver) a given starting solution. In recent years, a number of machine learning approaches have been proposed that aim to learn good destroy heuristics. The proposed method builds upon earlier works (using the same model architecture, features, and data collection) but uses a diffusion-based learning scheme. The authors evaluate their approach on 4 problems and observe that it outperforms earlier approaches."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "- The idea to use a diffusion model for learning destroy heuristics is novel. Furthermore, the use of a diffusion model is well motivated and straightforward.\n- The proposed approach shows good performance and outperforms all other evaluated approaches."
                },
                "weaknesses": {
                    "value": "- In my opinion, the paper is lacking additional ablation studies or experiments that evaluate the influence of the different hyperparameters. The authors only conduct one experiment that analyzes the effect of the number of diffusion steps. They report results for the values 5, 10, 20, 50 and find that 50 steps lead to the best results. This raises the question if the performance of the approach can be further improved by selecting an even higher number of steps. Overall, the relationship between number of diffusion step, prediction time, and prediction quality could be explored further. Fig. 4, which shows the results for the existing experiments, is also a bit difficult to read. Furthermore, the influence of other hyperparameters (e.g., destroy size) could be evaluated further.\n- The novelty of the paper is very slightly limited by the fact that the authors use the same model architecture, features, data collection etc. as earlier work. The main contribution of the authors is that they replace the imitation/contrastive learning approach of earlier works with a diffusion-based approach.\n- The quality of Fig. 1 and Fig. 2 could be improved. For example, by using the same font for all Figures. Both figures are also not mentioned or explained in the text. For Fig. 2 it is not clear what elements are added and why only x_1 and x_n are considered on the right hand side (and not x_2, x_3, \u2026). \n- It is not clear based on which (near-)optimal values the primal gap is calculated. Ideally, the authors would also report the primal bound in the Appendix to make comparisons for future works easier.\n- There are some minor spelling mistakes etc. (LSN instead of LNS (page 2), Arechitecture (Fig. 2), unnecessary comma at the end of the baselines paragraph. etc)."
                },
                "questions": {
                    "value": "- The approach uses a larger number of hyperparameters (often different parameters for different problems). How have these been selected?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission4304/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission4304/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission4304/Reviewer_Gizx"
                    ]
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4304/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698771742727,
            "cdate": 1698771742727,
            "tmdate": 1699636398605,
            "mdate": 1699636398605,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "T3h7WKWzuB",
                "forum": "9QV7Q9gKl9",
                "replyto": "enmCeY15GK",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4304/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4304/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Reply to Reviewer Gizx"
                    },
                    "comment": {
                        "value": "We want to thank Reviewer Gizx for your valuable suggestions. We will polish the paper accordingly. Here is the response to your questions.\n\n> In my opinion, the paper is lacking additional ablation studies or experiments that evaluate the influence of the different hyperparameters.\n\nThe LNS-related hyperparameters are set to the same as used in the previous work (CL-LNS, Huang et al., 2023). For diffusion related parameters, please see Figure 5. Our main finding is that different types of problems have different best diffusion steps and diffusion schedules. For example, a linear schedule with 10 steps works best for MIS problems, while a cosine schedule with 2 steps works best for CA problems.\n\n> The novelty of the paper is very slightly limited by the fact that the authors use the same model architecture, features, data collection etc. as earlier work.\n\nPlease see the first part in our general response. \n\n> It is not clear based on which (near-)optimal values the primal gap is calculated. Ideally, the authors would also report the primal bound in the Appendix to make comparisons for future works easier.\n\nPlease see the second part in our general response. The optimal values are chosen as the best primal bound among all methods, including all baselines and DIFUSCO-LNS. The primal bound is reported in Figure 5 in Appendix.\n\n> The quality of Fig. 1 and Fig. 2 could be improved.\n\nThanks for pointing this out! We have improved the quality of the figures."
                    }
                },
                "number": 3,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4304/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700720930198,
                "cdate": 1700720930198,
                "tmdate": 1700720989622,
                "mdate": 1700720989622,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "HW9UX9j6iD",
            "forum": "9QV7Q9gKl9",
            "replyto": "9QV7Q9gKl9",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission4304/Reviewer_3tnY"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission4304/Reviewer_3tnY"
            ],
            "content": {
                "summary": {
                    "value": "The paper presents an ML-guided LNS framework for MIPs. It uses a diffusion model to guide variable selection in the destroy step of LNS. The variable selection is treated as a generative task, and is learned by imitating the Local Branching expert policy. In the experiment, the new method DIFUSCO-LNS is compared against a variety of ML-guided approaches and heuristic approaches. The presented results show that the proposed method finds better solutions at a faster speed on most benchmarks."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. Applying diffusion is a novel idea and an interesting direction for LNS mip solving.\n\n2. Experimental results show promise for the approach."
                },
                "weaknesses": {
                    "value": "1. The results are promising on some benchmarks but overall not super impressive. Also, could you highlight the innovation in diffusion models from this paper that enables its application for LNS? \n\n2. It would be interesting to see the comparison prediction accuracy / per-iteration improvement to confirm that difusco-LNS is indeed making better predictions.\n\n3. Related to the previous point, It would be good to report the ML inference time overhead during testing. My understanding is that diffusion requires a more expensive denoising process than the other ML approaches using the same architecture.\n\n4. It seems DIFUSCO-LNS is sensitive to hyperparameters. It is not discussed how the best hyperparameters were chosen in the paper."
                },
                "questions": {
                    "value": "1. You mentioned that you were not able to reproduce results for some baselines due to differences in hardware/compute resources. Can you elaborate more on this? For LB-RELAX there seems to be quite a huge difference. From my own experience, sometimes it is due to different software versions (like SCIP or Gurobi). The other time it might be due to hardware differences: a slower machine computes different heuristics at the BnB nodes and thus produces different results if the wall-clock time budget is fixed.\n\n2. Difusco-LNS also takes advantage of multiple good solutions following previous work. I wonder if a contrastive learning component can be built into the diffusion model so that you can leverage bad solutions from LB?\n\n3. I realize the green curve in Figure 4 has an increasing trend at around 500-600 seconds. What happens there?\n\n4. From the ablation studies, it seems that DIFUSCO-LNS is sensitive to a couple of hyperparameters. I wish to understand whether you need to fine-tune them for different benchmarks."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission4304/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698869966895,
            "cdate": 1698869966895,
            "tmdate": 1699636398532,
            "mdate": 1699636398532,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "wZ5cW3b1s8",
                "forum": "9QV7Q9gKl9",
                "replyto": "HW9UX9j6iD",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission4304/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission4304/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Reply to Reviewer 3tnY"
                    },
                    "comment": {
                        "value": "We want to thank Reviewer 3tnY for your valuable suggestions. We will polish the paper accordingly. Here is the response to your questions. \n\n> Could you highlight the innovation in diffusion models from this paper that enables its application for LNS?\n\nPlease see our answer in the general response. \n\n> It would be interesting to see the comparison prediction accuracy / per-iteration improvement to confirm that difusco-LNS is indeed making better predictions.\n\nWe verify that DIFUSCO-LNS learns a better destroy policy than CL-LNS so it brings a larger per-iteration improvement in the primal bound on average. We visualize the comparison in Figure 7. We plot the 10-iteration improvement on MVC-S, CA-S, and SC-S and the 100-iteration improvement on MIS-S since the LNS typically has a much larger number of iterations on MIS-S (greater than 500) than that on other datasets (less than 100). We can also clearly observe that given the same number of iterations, DIFUSCO-LNS achieves a better primal bound, which verifies our assumption that DIFUSCO-LNS learns a better destroy policy.\n\n> Related to the previous point, It would be good to report the ML inference time overhead during testing. My understanding is that diffusion requires a more expensive denoising process than the other ML approaches using the same architecture.\n\nPlease see our answer in the general response. \n\n> It seems DIFUSCO-LNS is sensitive to hyperparameters. It is not discussed how the best hyperparameters were chosen in the paper.\n> From the ablation studies, it seems that DIFUSCO-LNS is sensitive to a couple of hyperparameters. I wish to understand whether you need to fine-tune them for different benchmarks.\n\nThe LNS-related hyperparameters are set to the same as used in the previous work (CL-LNS, Huang et al., 2023). For diffusion related parameters, please see Figure 5.\n\n> You mentioned that you were not able to reproduce results for some baselines due to differences in hardware/compute resources. Can you elaborate more on this?\n\nIn our research, we diligently followed the methodologies outlined in the publicly available code from the previous study (found at https://github.com/facebookresearch/CL-LNS). However, during our replication efforts on our own hardware, we observed variations in the results. Specifically, the trend of the performance curve differed from the original findings. This discrepancy could be attributed to differences in hardware and computing resources between our setup and that of the original study.\n\n> I wonder if a contrastive learning component can be built into the diffusion model so that you can leverage bad solutions from LB?\n\nGood question.  Although we currently have focused on improving the  generative probability of good solutions with diffusion, we do believe that contrastive learning [1], especially contrastive generative modeling [2], is an important future direction.  Thanks for this suggestion.\n\n> I realize the green curve in Figure 4 has an increasing trend at around 500-600 seconds. What happens there?\n\nGood catch! We found this is due to the solver on an instance accidentally stopped earlier. We have fixed the curve.\n\n[1] Huang, Taoan, et al. \"Searching large neighborhoods for integer linear programs with contrastive learning.\" International Conference on Machine Learning. PMLR, 2023.\n\n[2] Rafailov, Rafael, et al. \"Direct preference optimization: Your language model is secretly a reward model.\" arXiv preprint arXiv:2305.18290 (2023)."
                    }
                },
                "number": 2,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission4304/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700720898695,
                "cdate": 1700720898695,
                "tmdate": 1700720898695,
                "mdate": 1700720898695,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]