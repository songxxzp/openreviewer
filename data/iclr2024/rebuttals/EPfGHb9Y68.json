[
    {
        "title": "Continual Offline Reinforcement Learning via Diffusion-based Dual Generative Replay"
    },
    {
        "review": {
            "id": "G60KV4BZMF",
            "forum": "EPfGHb9Y68",
            "replyto": "EPfGHb9Y68",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_R6pv"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_R6pv"
            ],
            "content": {
                "summary": {
                    "value": "The submission presents a new method for continual offline RL (CORL) that relies on three components: a Q-function to assess the quality of each action, with multiple heads to account for the multiple tasks the agent faces; a diffusion behavior model, to both generate actions to execute in the environment and generate replay data for past tasks to avoid forgetting; and a state diffusion model to generate states to match the distribution observed in the dataset for each past task, again to avoid forgetting. In a strict setting where the agent is not allowed to observe data for any previous task, this enables continual training without forgetting. The authors evaluate their method on four sequences of 4 MuJoCo tasks each, with varying dynamics."
                },
                "soundness": {
                    "value": "1 poor"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "######## Strengths ########\n\n- The use of diffusion models both for generating behaviors and replay data is promising\n- The overall algorithm carefully leverages the three components above to continually learn new tasks\n- The problem of CORL itself is understudied, so it's good to see contributions in this area"
                },
                "weaknesses": {
                    "value": "######## Weaknesses ########\n- Section 2 (preliminaries) is largely unclear and not stand-alone\n- Section 3 (approach) is also not sufficiently clear or precise, and seems to introduce both math and text that are not related to the submission\n- The experimental evaluation is not sufficient to assess the benefits of the proposed method\n \n######## Recommendation ########\n\nUnfortunately, I recommend that this manuscript is not accepted in its current form. The main concern I have is the limited experimental evaluation. The authors propose an approach that is a combination of existing ideas (which is fine!), but unfortunately there is not sufficient evidence to support the choice of this combination. Moreover, the draft (especially sections 2 and 3) would need to undergo major revisions to make the text clear and (most importantly) precise.\n\n######## Arguments ########\n- Experimental setting -- The place with the most room for improvement in this submission is the empirical evaluation. In particular, I have three main concerns:\n    - The evaluation uses very simple MuJoCo tasks to evaluate methods. The authors should evaluate their approach on much more complex tasks, such as those from the Meta-World [1], CausalWorld [2], RLBench [3], or CompoSuite [4,5]. This is particularly true because the authors' motivation stems from the need for diffusion models to represent complex behaviors.\n    - The continual setting uses sequences of only 4 tasks. Given that the curves in Figure 2 for CuGRO get progressively worse as more tasks are trained, it would be important to study how this detriment scales with the number of tasks. Can we expect CuGRO to handle a really long stream of tasks? We need empirical evidence to answer that question\n    - The evaluation considers no external baselines. There are a number of existing continual learning and offline RL methods (which the authors themselves cite in their manuscript). Yet the evaluation is limited to variations of the authors' proposed method (oracle, noise, and none). Would other continual learning methods be as effective? Would other offline RL methods work well in this setting (especially considering that the tasks are quite simple). \n- Clarity of preliminaries\n    - The description of advantage-weighted regression misses a key piece: the Q function is w.r.t. \\mu, which is the piece that makes Eq. 4 solve the _costrained_ optimization of Eq. 2. This should be explicitly stated and explained, as otherwise the reader might think Q_\\theta is the standard Q^\\pi --- this is what I thought initially when reading 2.1\n    - It's unclear if Eq. 5 corresponds to Eq. 3. I believe that it does, and if so, my understanding is that Q_\\theta in Eq. 5 is not the same as Q_\\theta in Eq. 4---the former is w.r.t. \\pi and the latter is w.r.t. \\mu. Please clarify.\n    - The description of the diffusion models in Sec 2.2 misses mentioning the existence of a forward diffusion process that adds noise to an (observed) action. This makes it difficult to parse the last sentence before Eq. 6 where the diffusion model is predicting some un-defined noise. \n    - The description prior to Eq. 7 is still unclear to me: is Q estimating the value of the actions w.r.t. \\mu or \\pi? The authors mention that the actions are sampled from \\mu, but is the long-term value measured for \\pi or \\mu? It seems that the middle part of Eq. 7 entails that it's from \\pi, but this isn't stated in text. \n    - What does re-sampling mean toward the end of Sec 2.1? What was the first \"sampling\"?\n \n- Clarity/precision of approach\n    - Sec 3.1\n        - The description of CORL is mostly clear, but I do have a couple of questions:\n            - What aspects of the MDP are allowed to change from task to task? If all of them, then which ones do the authors consider in their approach/evaluation?\n            - Is the distribution over MDPs P(M) stationary or is it allowed to change over time? Is there any implication of that for the learning process or evaluation setting in the experiments?\n    - Sec 3.2\n        - While I agree that diffusion models (or generally expressive generative models) are useful for expressing RL policies, the authors seem to conflate two things in their description of why that is the case: 1) some tasks require multimodal behaviors (like in footnote 1) and 2) the overall behavior expressed by the diffusion model should capture a breadth of tasks. The latter is hinted at in both the intro and here, but never actually explained or exemplified. \n        - The argument of footnote 2 is somewhat weak. What if two visual classification tasks are \"detect if dog is in image\" and \"detect if cat is in image\" and they're both given the same image of a dog? Tasks would require opposite predictions given the same image, just like the RL model would. Plus, the conclusion would be that diffusion models are better because they could capture both the opposite actions, but how is that useful if they can't differentiate when to execute each? The only way to solve a problem like this is to let the model take as input a task indicator (or something to differentiate the tasks), and it's unclear that a Gaussian conditioned on this information would fail. \n        - This section is very odd. The first paragraph is all motivation and no technical details. Then second paragraph contains some details about how the diffusion model for state generation works (the equivalent for actions was in the perliminaries). Then the final paragraph is all about doing classifier or classifier-free guidance, but it's unclear what for or why 6 lines of this show up in the middle of a technical section when the authors don't even actually try it. I guess the idea is that the classifier-based/free guidance could ensure that the generated states actually correspond to the conditioning task?\n    - Sec 3.3\n        - \"the desired importance of the new task...\" seems to suggest that Eq. 8 should be a weighted sum. But the authors more likely mean that there needs to be some weighting to ensure that the current task is learned sufficiently well while avoiding forgetting. It isn't really about the importance but about being able to optimize properly. \n        - It's unclear why there's a test loss (Eq. 11 and 14) for specific models. Isn't performance measured as the obtained reward of the agent on the tasks?\n        - It's also unclear what the authors mean by \"reconstruct the cumulative state space\". Doesn't the task conditioning imply that the agent is learning separate state spaces, one for each task?\n        - Are the generated states for behavior replay drawn after updating the state generator? Before? Or are they both updated together? How was this choice made and what are the implications of it? My intuition would be that it's better to first train the behavior model on the fixed state generator and then train the state generator, because updates to the behavior model have no effect on the state generator but the converse is not true.\n            - This seems to be clarified in Algorithm 1, but the authors should state it explicitly in text and not rely exclusively on the Appendix to transmit that point. \n    - Sec 3.4\n        - It's quite unclear after reading this section why the authors use the term behavior cloning, which has a very specific connotation in the context of off-line RL -- replicating the behavior that generates the data.\n        - Instead, I think this approach is better described as a form of _functional regularization_, which is a method broadly studied in supervised continual learning research.\n\n[1] Yu et al., \"Meta-World: A benchmark and evaluation for multi-task and meta reinforcement learning.\" CoRL, 2020\n\n[2] Ahmed et al., \"CausalWorld: A Robotic Manipulation Benchmark for Causal Structure and Transfer Learning.\" ICLR, 2021\n\n[3] James et al., \"Rlbench: The robot learning benchmark & learning environment.\" RAL, 2020\n\n[4] Mendez et al., \"CompoSuite: A Compositional reinforcement learning benchmark.\" CoLLAs, 2022\n\n[5] Hussing et al., \"Robotic Manipulation Datasets for Offline Compositional Reinforcement Learning.\" arXiv, 2023"
                },
                "questions": {
                    "value": "######## Additional feedback ########\n\nThe following points are provided as feedback to hopefully help better shape the submitted manuscript, but did not impact my recommendation in a major way.\n\nAbstract\n- The abstract is very clear. It lays out very well how the approach works and the results they obtain \n\nIntro\n- It's unclear what \"new tasks emerge overwhelmingly\" means or why van de Ven et al. is cited to support that claim. \n- The motivation for why CORL is special seems to be all about RL in general, and not specifically about offline RL. This seems to undermine the need to develop specialized approaches.\n- There's always the question of whether the size of the model might surpass the size of replay buffers. In visual settings that tends to happen. It's unclear if it does here\n- The idea of using generative models to express state and action distributions (which isn't novel) is good, especially in the offline setting where we can't make assumptions about the form of the distribution\n- What does \"behavior cloning matter\" mean in the context of a critic, which is not a behavior model?\n\nSec 2\n- I appreciate the notation clarification right before Sec 3! The authors could consider moving it to the beginning of Sec. 2 so the reader knows this ahead of time. \n- I thought we were missing a description of CORL, but that's in Sec. 3. Is the formalization of CORL a contribution of this work? If not, maybe it's worth also including it in Sec 2.\n\nSec 3.1\n- It does seem like the problem setting should be moved to Sec 2, and then the overview be placed in Sec 3 before introducing Sec 3.2 (which would be 3.1) below\n- Fig. 1 is useful. Why are there two (s,a,r,s') boxes in b and c? It seems like they are the same tuple, just that the first down arrow takes s and the second down arrow takes a. \n\nSec 4\n- \"the generator is the only constraint on task performance\" -- how is this an improvement over other continual learning methods?\n- \"When the generative model is optimal, training the networks with generative replay is equivalent to joint training on the entire dataset.\" \n    - Sure, an optimal replay method would achieve that... but can we actually train an optimal generator over a long sequence of tasks? Also, it is only equivalent to joint training if we actually do full joint training (from scratch), but not if we start from the previously trained models. Starting from previously trained models might be better or worse, but certainly not equivalent.\n- What is the (final) performance of SAC/TD3 on the collected datasets?\n- What is the \"oracle\" for the behavior model? And what is the \"noisy\" replay for the behavior model?\n- More than baselines, these seem to be ablations of CuGRO. While oracle is roughly a performance upper bound, it's unclear how other existing continual learning algorithms would perform compared to CuGRO/oracle. It's also unclear if non-diffusion approaches (given \"oracle\" or some other forgetting avoidance method) would work well.\n- I like the analysis of why Hopper-Vel fails\n- In Figure 3 we don't get to see past task performance. Or is this average performance including current and past tasks? Does Table 1 measure the final performance of all past tasks after training on the final task, or upon finishing training on each individual task?\n- The hyperparamter sensitivity analysis is good and useful.\n\nTypos/style/grammar\n- Footnotes in 3.2 should go before periods, not after the period and a space (e.g., \"...keep emerging\\footnote{text}.\")\n- Sec 3.2, paragraph 1 -- do datasets really \"emerge\"? Maybe they are \"constructed\" instead\n- Sec 3.2, paragraph 2 -- scored-based --> score-based\n- Sec 3.3, first line -- technically, the models are \\mu_\\phi and \\epsilon_\\psi, and \\phi eand \\psi are the parameters\n- I find the use of \"replayed\" samples (throughout the text) a bit odd, since they aren't real samples. I'd suggest using \"generated\" samples instead to consistently clarify that these are not real."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission1109/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698337236787,
            "cdate": 1698337236787,
            "tmdate": 1699636037231,
            "mdate": 1699636037231,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "mMFkgsHQLM",
                "forum": "EPfGHb9Y68",
                "replyto": "G60KV4BZMF",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 1/3)"
                    },
                    "comment": {
                        "value": "**Q1. Experiments: i) Comparison to external baselines of existing continual learning and offline RL methods; ii) Evaluation on more testbeds like Meta-World, CausualWorld, RLBench, or CompoSuite;  iii) CuGRO's scalability with the number of tasks in continual learning.**\n\nA1: i) As we are the first to leverage expressive diffusion models to tackle the understudied CORL challenge, our primary concern is to validate whether our dual generative replay mechanism can realize high-fidelity replay of the sample space.\nHence, following the classical DGR method [1], we compare the performance of the RL model trained with variants of replay methods: Oracle, None, and Noise.\nFor Oracle, the generated data is replaced with real data of past tasks to demonstrate that our diffusion-based generator can mimic the data distribution with high-fidelity.\nFor Noise, the state generator is replaced with Gaussian noise to demonstrate the effectiveness of our diffusion-based state generator.\nFor None, the state generator is removed and catastrophic forgetting is incurred, which demonstrates the necessity of our generative replay mechanism.\nWe did not compare our method to several existing continual RL methods due to the difference in the intrinsic characteristics and applicable scenarios.\nFor example, [2] belongs to the parameter isolation kind, [3, 4] needs to replay real samples of past tasks, and most of the existing methods [2, 3, 5] tackle the online RL problems other than the offline setting.\n\nii) These testbeds are usually used to test traditional online RL algorithms and has not been applied to offline scenarios yet. \nCompared with online continual RL, offline continual RL is less studied, and there is no standard dataset for it. \nGenerally, the MuJoCo environment, as seen in the D4RL dataset [6], is a popular testbed for offline RL. \nThe MuJoCo environment is also commonly used in offline meta-RL for testing [7, 8]. \nHence, we evaluate CORL algorithms on MuJoCo environments with offline datasets in this paper.\n\niii) We follow the generative replay paradigm, e.g., DGR [1] and DDGR[9], where the scalability primarily depends on the modeling fidelity of the generator.\nThis rationale underpins the choice of diffusion models for our method, mirroring the research motivation of DDGR. \nIn DDGR, diffusion models demonstrate better fidelity compared to GANs, and exhibit promising superiorities for continual learning based on generated replay.  \nOur method is the first step that leverages expressive diffusion models to tackle the CORL challenge, and we believe that this approach will see further developments in the future.\n\nIn summary, it is important to evaluate CORL methods on more testbeds, or to conduct empirical comparisons to existing methods for demonstrating their respective pros and cons, or to modify these online continual methods to adapt to offline settings.\nWe leave these for future work.\n\n\n[1] Hanul Shin, et al., Continual learning with deep generative replay, NeurIPS 2017.\n\n[2] Gaya et al., Building a subspace of policies for scalable continual learning, ICLR 2023.\n\n[3] Maciej Wolczyk, et al., Disentangling transfer in continual reinforcement learning, NeurIPS 2022.\n\n[4] Sibo Gai, et al., OER: Offline experience replay for continual offline reinforcement learning, ECAI 2023.\n\n[5] David Rolnick, et al., Experience replay for continual learning, NeurIPS 2019.\n\n[6] Justin Fu, et al., D4RL: Datasets for Deep Data-Driven Reinforcement Learning, arXiv:2004.07219, 2020.\n\n[7] Eric Mitchell, et al., Offline meta-reinforcement learning with advantage weighting, ICML 2021.\n\n[8] Haoqi Yuan, et al., Robust task representations for offline meta-reinforcement learning via contrastive learning, ICML 2022.\n\n[9] Rui Gao, et al., DDGR: Continual learning with deep diffusion-based generative replay, ICML 2023."
                    }
                },
                "number": 9,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700300019232,
                "cdate": 1700300019232,
                "tmdate": 1700300019232,
                "mdate": 1700300019232,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "efAy9cQQck",
                "forum": "EPfGHb9Y68",
                "replyto": "G60KV4BZMF",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 2/3)"
                    },
                    "comment": {
                        "value": "**Q2. Clarity of approach: i) Change of the MDP distribution from task to task; ii) Claim of multimodal behaviors within one task and across tasks; iii) The weighting of losses across tasks; iv) About test loss in Eqs. (11) and (14); v) The order of training model components; vi) About behavior cloning.**\n\nA2: i) One task corresponds to an MDP, and tasks are generated from a specific MDP distribution in continual learning. We have explained the details of sequential tasks in Sec. 3.1 and Appendix B.\n\nii) The behavior policy of a single task may be a multimodal distribution. \nWhen considering multiple tasks, the distribution of all behavior policies might become even more multimodal. \nHence, we use a diffusion model to fit the behavior policies of all tasks. \nIn classification tasks, opposite predictions are resolved using a task indicator. \nSimilarly, in RL, the diffusion model mimics behavioral strategies, while the decision-making is guided by the Q-function. \n\niii) In Eqs. (10) and (13), we present the general form of training loss and set $\\beta$ to facilitate training. \nDuring the training process, the value of $\\beta$ is 0.5. \n\niv) The goal of  Eq. (8) is to learn a continual policy that maximizes the expected return over all encountered tasks, which aligns with the training objectives of Eqs. (10) and (13). \nThe test loss in Eqs. (11) and (14) evaluates the training effectiveness of the diffusion model, analogous to the validation loss in supervised learning. \nThe setting of the test loss is consistent with DGR [1].\n\nv) We decouple the policy into a behavior generative model and an action evaluation model, and use the state generative model along with the behavior generative model to achieve generative replay. \nDuring the continual learning process, we use a continually updated state generation model to cover the state space of all tasks, enabling it to reconstruct the cumulative state space of all tasks based on task encoding.\nThe order of training model components is actually shown in Fig. 1.\n\nvi) In our method, action sampling is guided by Q-values, analogous to classical value function methods where the policy/behavior is derived from value functions.\nHence, cloning the Q-function implicitly clones the behaviors, thus we call the process as behavior cloning.\n\n\n**Q3: Clarity of preliminaries: i) The description of advantage-weighted regression; ii) The relationship of Eqs. (3)-(5); iii) The description of the diffusion models in Sec 2.2 misses mentioning the existence of a forward diffusion process that adds noise to an (observed) action; iv) The description prior to Eq. (7); v) What does re-sampling mean toward the end of Sec 2.1?**\n\nA1: i) Following your suggestions, we have further explained $Q_\\theta$ and $Q^\\pi$ and their relationship.\n\nii) Eq. (4) is the general modeling form of offline RL, Eq. (5) is the decoupling form proposed by SfBC [10], and $Q_\\theta$ is the same in Eqs. (4) and (5). \n\niii) In Section 2.2, we describe the forward diffusion process of the diffusion model. Diffusion models are generative models that begin by defining a forward process to gradually add noise to an unknown data distribution, and then learn to reverse this process.\n\niv) Eq. (7) is based on the fundamental concepts of offline RL.  \n$R_i^{(0)}$ is the vanilla return of trajectories. \nThe first part of Eq. (7) offers an implicit planning scheme within dataset trajectories that mainly helps to avoid bootstrapping over unseen actions and accelerate convergence. \nThe middle part of Eq. (7) enables the generalization of actions in similar states across different trajectories.  \nThis is our basic approach, and you can refer to SfBC for details [10].\n\nv) The 'first' sampling means sampling from the diffusion-based behavior generative model.\nThen, we evaluate the sampled actions with the trained critic network.\nThe learned policy is a combination of the behavior generative model and the critic network.\nFinally, during execution, actions are 're-sampled' from the learned policy.\nMore details can be found in [10].\n\n\n[10] Huayu Chen, et al., Offline reinforcement learning via high-fidelity generative behavior modeling, ICLR 2023."
                    }
                },
                "number": 10,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700300054051,
                "cdate": 1700300054051,
                "tmdate": 1700300054051,
                "mdate": 1700300054051,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "tmFs1uhNvW",
                "forum": "EPfGHb9Y68",
                "replyto": "G60KV4BZMF",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 3/3)"
                    },
                    "comment": {
                        "value": "**Q4: Introduction: i) What new tasks emerge overwhelmingly' means; ii) The motivation for why CORL is special seems to be all about RL in general, and not specifically about offline RL; iii) There's always the question of whether the size of the model might surpass the size of replay buffers.**\n\nA1: i) It means that in a continual learning setting, new tasks keep emerging in a sequential manner.\n\nii) Our method does not operate in an online mode and is solely suitable for offline scenarios. \nUnder the offline RL paradigm, we model behavior policies using a diffusion model.\n\niii) The size of the model will not exceed the size of the replay buffer. \nTaking the *HalfCheetah-Vel* environment as an example, we only require an additional state generative model to realize generative replay. \nThe state generator has about 24M parameters, and each new task has about 1M samples where each sample ($s,a$) has a dimension of 26. \nAs the number of tasks increases, the size of the replay buffer will continue to expand, but the model size will remain constant. \nMoreover, we assume that the data from previous tasks is not available, a challenge often encountered in real-world scenarios, making generative replay necessary.\n\n\n**Q5: Sec. 2 and Sec 3.1: i) The authors could consider moving the notation clarification to the beginning of Sec. 2; ii) Move the description of CORL in Sec 2; iii) Why are there two ($s,a,r,s'$) boxes in Figs. 1(b) and 1(c)?**\n\nA5: i) Following your suggestion, we have moved the notation clarification to the beginning of Sec. 2. \n\nii) Additionally, we have described CORL in Section 3.1 and have now relocated it to Sec. 2.\n\niii) In Fig. 1, in order to clearly show that real samples and generated samples are used together to train the behavior evaluation model, we use two ($s, a, r, s'$)  boxes to correspond to the state generator box and the behavior generator box, respectively.\n\n\n\n**Q6: Sec. 4: i) \"The generator is the only constraint on task performance\" -- how is this an improvement over other continual learning methods? ii) Starting from previously trained models might be better or worse, but certainly not equivalent to joint training on the entire dataset; iii) What is the (final) performance of SAC/TD3 on the collected datasets? iv) Explanations of baselines**\n\nA6: i) Continual learning methods can mainly be divided into three categories: regularization-based, parameter isolation, and rehearsal methods. \nWe focus on the rehearsal method, using experience replay, and propose using a generative model to generate replay samples rather than storing samples of old tasks.\nTherefore, the generator is the only constraint on task performance in our method.\nCompared with methods that need to store samples of old tasks, our method only requires storing the generative model, which greatly saves memory space.\n\nii) In the continual learning process, we train the networks using generated samples of old tasks and real samples of new tasks together. \nIf the generative model based on the diffusion model is good enough, it can generate very accurate samples, equivalent to joint training based on real data from all current tasks.\n\niii) The final performance of SAC/TD3 on the collected dataset is shown in the table below.\n\n| Swimmer-Dir     | 1048.38 | \n| Hopper-Vel      | 185.72  |\n| Walker2D-Params | 164.88  | \n| HalfCheetah-Vel | -24.75  |\n\n\niv) We have explained our baseline in Section 4. \nOracle uses real samples of all previous tasks to sequentially train the dual generators, and to train the multi-head critic with behavior cloning. \n*Noise* considers the opposite case when generated samples do not resemble the real distribution at all. \nWe omit the state generative model and use random noises as replayed state samples.\nThe behavior generator and multi-head critic are sequentially trained using these randomly generated states.\nOracle stores real samples of all old tasks, which is the best case in the replay method, and the performance of our method is very close to Oracle. \nAdditionally, from the experimental results of 'None' and 'Noise,' we can see that the performance decreases when the state generative model is removed or there is no replay.\nFigure 3 shows the average performance including current and past tasks. \nTable 1 shows the final performance on all past tasks after training on the final task.\n\n\n**Q7:  Typos/style/grammar issues.**\n\nA7: We sincerely thank the reviewer for their careful reading and have revised the paper according to your suggestions."
                    }
                },
                "number": 11,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700300091192,
                "cdate": 1700300091192,
                "tmdate": 1700300091192,
                "mdate": 1700300091192,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "cjje19swGM",
                "forum": "EPfGHb9Y68",
                "replyto": "tmFs1uhNvW",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Reviewer_R6pv"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Reviewer_R6pv"
                ],
                "content": {
                    "title": {
                        "value": "Thank you for your response"
                    },
                    "comment": {
                        "value": "I thank the authors for their response. I have read it in detail and unfortunately did not find sufficient evidence to update my score. Critically, the authors defend the lack of need to expand their experimental setting, which I believe to be critical for making this into a fully developed contribution."
                    }
                },
                "number": 13,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700313983265,
                "cdate": 1700313983265,
                "tmdate": 1700313983265,
                "mdate": 1700313983265,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "6WPyKmN0T6",
            "forum": "EPfGHb9Y68",
            "replyto": "EPfGHb9Y68",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_t1vB"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_t1vB"
            ],
            "content": {
                "summary": {
                    "value": "The authors in the paper propose a dual generative reply framework to address the challenges in continual RL, where the practical algorithms are required to adapt to new environments and simultaneously leverage the previous knowledge. In particular, they use two diffusion models to generate both the state and behavior generative reply on the offline data and update in a sequential way. Using the behavior cloning technique, the multi-head critic is updated effectively, and the resulting algorithm CuGRO suggests competitive performance in the considered Mujoco benchmark."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "* The paper is well-organized and easy to follow.\n* The proposed method is technically sound, including the incorporation of diffusion models to mimic the generative buffer reply.\n* The empirical performance seems significant compared with considered baselines."
                },
                "weaknesses": {
                    "value": "* Incorporating diffusion models in offline RL for generative reply is straightforward, and the computation cost should be rigorously discussed.\n* The loss function in Eq.10, 11, 13, 14, and 15 is easy to figure out, but it is hard to guarantee the convergence. For instance, in Eq.10, it is not clear whether training a diffusion model via using the data from the last diffusion model has any convergence guarantee. This issue could be severe especially when we only have access to offline data with a limited size or large state and action space.\n* Missing other continual RL baselines or benchmarks. In continual RL, the benchmark \u2018continual world\u2019 is commonly used to evaluate the continual control algorithms, but the proposal algorithm is only evaluated in small-scaled benchmarks in Mujuco games. It is not clear whether this approach is effective in the commonly-used continual RL environments. Also, some typical continual RL baselines are missing, such as [1].\n\n[1] Gaya et al. Building a subspace of policies for scalable continual learning (ICLR 2023)"
                },
                "questions": {
                    "value": "Please refer to Weakness.\n\nOverall, as far as I can tell, the proposed method is technically sound and achieves competitive performance. However, the computation cost would be large, and it also lacks discussion about the convergence guarantee and training details. Some typical benchmarks and baselines should be considered as well."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission1109/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission1109/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission1109/Reviewer_t1vB"
                    ]
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission1109/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698635796931,
            "cdate": 1698635796931,
            "tmdate": 1699636037135,
            "mdate": 1699636037135,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "eJl8SAJ7zT",
                "forum": "EPfGHb9Y68",
                "replyto": "6WPyKmN0T6",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 1/2)"
                    },
                    "comment": {
                        "value": "**Q1: Incorporating diffusion models in offline RL for generative reply is straightforward, and the computation cost should be rigorously discussed.**\n\nA1: In the continual learning setting, the category of generative replay methods [1, 2] needs to maintain two separate models: the solver (the backbone RL algorithm) and the generator (which mimics the data distribution of past tasks).\nThat is, they eliminate the dependency on accessing data of past tasks at the cost of maintaining an additional generative model, e.g., GANs [1] or diffusion models [2].\nTaking the HalfCheetah task as an example, the state generator has about 24M parameters, and each new task has about 1M samples where each transition sample ($s,a,r,s'$) has a dimension of 26.\nTraining the state generator with 1M samples roughly costs 2.5 hours on an NVIDIA RTX 3090 GPU, which could be further reduced to 50 minutes via distributed training on 4 GPUs.\n\nIn literature, current diffusion-based RL methods [3-8] could face the challenge of increased computational costs due to the training and sampling of diffusion models.\nFor example, the diffusion-planning methods [4, 8] also need to train two separate diffusion models, one to generate the trajectory data and another to predict the cumulative rewards of trajectory samples.\nWe believe that the fast development of diffusion models in the generative modeling community can help tackle the above challenge for RL problems, such as sampling acceleration methods [9, 10].\nOur method is the first step that leverages expressive diffusion models to tackle the CORL challenge, and we will continue to tackle the limitations in future work as stated in the original paper (bottom, page 9): \"Though, our method requires two diffusion models to synthesize replayed samples, which could be further improved by sampling acceleration methods or developing one diffusion model for unifying the state and behavior modeling. We leave these directions as future work.\"\n\n\n**Q2: The convergence guarantee, in Eqs. (10)-(11) and (13)-(15), of training a diffusion model via using the data from the last diffusion model, especially when we only have access to offline data with a limited size or large state and action space.**\n\nA2: Under the generative replay paradigm [1, 2], we train the diffusion models using a mixed distribution of real data from the new task and pseudo data generated from previous generators. \nThe convergence regarding Eqs. (10), (11), (13), and (14) align with the diffusion model.\nIn Eq. (15), the first term follows a planning-based Bellman operator used in offline RL [3], and the second term corresponds to behavior cloning.\nHence, the convergence regarding Eq. (15) is consistent with the specific Bellman operator [3] and the supervised stochastic gradient descent (SGD).\nThe convergence of diffusion models is independent of the training data. \nContinually training the diffusion model with data generated by the previous iteration of the model only affects the quality of the training data and does not influence the model's convergence.\nHence, the convergence remains consistent with the vanilla diffusion models. \nAdditionally, the convergence of the model is independent of the dataset size.\n\n[1] Hanul Shin, et al., Continual learning with deep generative replay, NeurIPS 2017.\n\n[2] Rui Gao, et al., DDGR: Continual learning with deep diffusion-based generative replay, ICML 2023.\n\n[3] Huayu Chen, et al., Offline reinforcement learning via high-fidelity generative behavior modeling, ICLR 2023.\n\n[4] Michael Janner, et al., Planning with diffusion for flexible behavior synthesis, ICML 2022.\n\n[5] Zhendong Wang, et al., Diffusion Policies as an Expressive Policy Class for Offline Reinforcement Learning, ICLR 2023.\n\n[6] Bingyi Kang, et al., Efficient Diffusion Policies for Offline Reinforcement Learning, NeurIPS 2023.\n\n[7] Anurag Ajay, et al., Is Conditional Generative Modeling all you need for Decision Making? ICLR 2023.\n\n[8] Fei Ni, et al., MetaDiffuser: Diffusion Model as Conditional Planner for Offline Meta-RL, ICML 2023.\n\n[9] Cheng Lu, et al., DPM-Solver: A Fast ODE Solver for Diffusion Probabilistic Model Sampling in Around 10 Steps, NeurIPS 2022.\n\n[10] Qinsheng Zhang, et al., gDDIM: Generalized denoising diffusion implicit models, ICLR 2023."
                    }
                },
                "number": 7,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700207231881,
                "cdate": 1700207231881,
                "tmdate": 1700207231881,
                "mdate": 1700207231881,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "u0K0P1Gnxs",
                "forum": "EPfGHb9Y68",
                "replyto": "6WPyKmN0T6",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 2/2)"
                    },
                    "comment": {
                        "value": "**Q3: Missing continual RL benchmarks (e.g., continual world) and baselines (e.g., [11]).**\n\nA3: As we are the first to leverage expressive diffusion models to tackle the understudied CORL challenge, our primary concern is to validate whether our dual generative replay mechanism can realize high-fidelity replay of the sample space.\nHence, following the classical DGR method [1], we compare the performance of the RL model trained with variants of replay methods: Oracle, None, and Noise.\nFor Oracle, the generated data is replaced with real data of past tasks to demonstrate that our diffusion-based generator can mimic the data distribution with high-fidelity.\nFor Noise, the state generator is replaced with Gaussian noise to demonstrate the effectiveness of our diffusion-based state generator.\nFor None, the state generator is removed and catastrophic forgetting is incurred, which demonstrates the necessity of our generative replay mechanism.\nWe did not compare our method to several existing continual RL methods due to the difference in the intrinsic characteristics and applicable scenarios.\nFor example, [11] belongs to the model expansion kind, [12, 13] needs to replay real samples of past tasks, and most of the existing methods [11, 12, 14] tackle the online RL problems other than the offline setting.\n\n'Continual world' is currently used to test traditional online RL algorithms and has not been applied to offline scenarios yet. \nCompared with online continual RL, offline continual RL is less studied, and there is no standard dataset for it. \nGenerally, the MuJoCo environment, as seen in the D4RL dataset [16], is a popular testbed for offline RL. \nThe MuJoCo environment is also commonly used in offline meta-RL for testing [8, 16, 17]. \nHence, we evaluate CORL algorithms on MuJoCo environments with offline datasets in this paper.\n\nOn the other hand, it is important to evaluate CORL methods on more testbeds like the continual world in the future.\nIt is also significant to conduct empirical comparisons to existing methods for demonstrating their respective pros and cons, or to modify these online continual methods to adapt to offline settings.\nWe leave these for future work.\n\n\n[1] Hanul Shin, et al., Continual learning with deep generative replay, NeurIPS 2017.\n\n[8] Fei Ni, et al., MetaDiffuser: Diffusion Model as Conditional Planner for Offline Meta-RL, ICML 2023.\n\n[11] Gaya et al., Building a subspace of policies for scalable continual learning, ICLR 2023.\n\n[12] Maciej Wolczyk, et al., Disentangling transfer in continual reinforcement learning, NeurIPS 2022.\n\n[13] Sibo Gai, et al., OER: Offline experience replay for continual offline reinforcement\nlearning, ECAI 2023.\n\n[14] David Rolnick, et al., Experience replay for continual learning, NeurIPS 2019.\n\n[15] Justin Fu, et al., D4RL: Datasets for Deep Data-Driven Reinforcement Learning, arXiv:2004.07219, 2020.\n\n[16] Eric Mitchell, et al., Offline meta-reinforcement learning with advantage weighting, ICML 2021.\n\n[17] Haoqi Yuan, et al., Robust task representations for offline meta-reinforcement learning via contrastive learning, ICML 2022."
                    }
                },
                "number": 8,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700207315786,
                "cdate": 1700207315786,
                "tmdate": 1700207315786,
                "mdate": 1700207315786,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "criohIzI65",
            "forum": "EPfGHb9Y68",
            "replyto": "EPfGHb9Y68",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_RUFG"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_RUFG"
            ],
            "content": {
                "summary": {
                    "value": "The paper addresses the continual offline reinforcement learning (CORL) problem, focusing on the challenge of catastrophic forgetting as models encounter new tasks. To combat this, the study introduces CuGRO, a method that decouples the learning policy into a generative behavior model and an action evaluation model, ensuring diverse behaviors are captured. A state generative model is also employed to mimic past task distributions. By leveraging diffusion probabilistic models, CuGRO achieves high-fidelity sample reproduction. Empirical tests reveal CuGRO's superiority in reducing forgetting and enhancing forward transfer, closely matching results using original data."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. Innovative idea: The paper introduces CuGRO, a novel framework of CORL, which is one of the first to leverage expressive diffusion models for this challenge. \n2. Practical memory solutions: Instead of relying on large buffers to store real samples from prior tasks, CuGRO synthesizes high-quality pseudo-samples, addressing the challenges of memory constraint and potential privacy issues. \n3. Empirical validation: The paper provides empirical evidence from various tasks that demonstrates CuGRO's effectiveness in mitigating forgetting."
                },
                "weaknesses": {
                    "value": "1. Motivation. There is no sufficient support for the necessity of using diffusion models to learn the behaviors from prior tasks. Though the general knowledge is that diffusion models can work better in terms of generation and generalization, there is no explicit reason against the utilization of other modes such as behavior cloning, GAN, VAE, etc. \n2. Efficiency trade-off: Though storing models for prior tasks might work well, training diffusion models for each different task might not be sample-efficient nor computation-efficient. Therefore, the authors might want to provide more information on the feasibility of this approach and the computation resource usage for implementing the experiments. \n3. Experiment: The experiment did not show how diffusion models contribute to the continual learning of the model. The authors might want to show the performance of the diffusion models to demonstrate that diffusion models are contributing to the performance. In addition, it is unclear in the paper regarding the training data of the diffusion models. Will noisy data degrade the performance of the diffusion models and the CuGRO model as a whole?"
                },
                "questions": {
                    "value": "1. I was wondering if applying other types of generative models to replace the diffusion model will yield similar performance. \n2. I am curious to know the computation resources used and how long to train the model.\n3. I was wondering about the scalability of the model. If having more tasks degrade the model's performance?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission1109/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698708021719,
            "cdate": 1698708021719,
            "tmdate": 1699636037052,
            "mdate": 1699636037052,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "1mypxksHOJ",
                "forum": "EPfGHb9Y68",
                "replyto": "criohIzI65",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 1/2)"
                    },
                    "comment": {
                        "value": "**Q1: On the necessity of using diffusion models to learn behaviors from prior tasks, and the reason against the utilization of other models such as behavior cloning, GAN, VAE, etc. If applying other types of generative models to replace the diffusion model will yield similar performance?**\n\nA1: As repeatedly stated in our original paper, we have discussed the advantages of the diffusion model and the motivation for adopting it to tackle the CORL challenge.\nDue to the strong distributional expressivity and the ability to fit multimodal distributions, diffusion models have been explosively developed in the RL community recently [1-5], such as using diffusion models for behavior policy modeling [1], for target policy modeling [2], and for model-based trajectory modeling [2].\nIn the first paragraph of Sec. 3.2 (bottom, page 4), we elaborate on the necessity of using the diffusion model to learn behavior from prior tasks as: \"This perspective rooted in generative modeling presents three promising advantages for CORL. First, existing policy models are usually unimodal Gaussians with limited distributional expressivity, while collected behaviors in CORL become progressively diverse as novel datasets keep emerging. Learning a generative behavior model is considerably simpler since sampling from the behavior policy can naturally encompass a diverse range of observed behaviors, and allows the policy to inherit the distributional expressivity of diffusion models. Second, RL models are more prone to deficient generalization across diverse tasks. Learning a unified behavior model can naturally absorb novel behavior patterns, continually promoting knowledge transfer and generalization for offline RL. Third, generative behavior modeling can harness extensive offline datasets from a wide range of tasks with pretraining, serving as a foundation model to facilitate finetuning for any downstream tasks. This aligns with the paradigm of large language models, and we reserve this promising avenue for future research.\"\n\nOn the other hand, other models such as behavior cloning, GANs, and VAEs can also be considered as alternatives to the diffusion model. \nIn this paper, we choose the powerful diffusion model due to its promising properties discussed above.\nAs the state-of-the-art architecture in the generative modeling community, the diffusion model has achieved great success in high-fidelity data generation, such as its superiority over GANs [6] and stable diffusion [7].\n\n**Q2:  Experiment: i) Show how diffusion models contribute to continual learning performance; ii) Clarify the training data of the diffusion models; iii) Will noisy data degrade the performance of the diffusion models and the CuGRO model as a whole?**\n\nA2: i) As stated in our experiments, our primary concern is to validate whether our diffusion-based generative replay mechanism can realize high-fidelity replay of the sample space.\nHence, we set three baselines as Oracle, None, and Noise.\nFor Oracle, the generated data is replaced with real data of past tasks to demonstrate that our diffusion-based generator can mimic the data distribution with high-fidelity.\nFor Noise, the state generator is replaced with Gaussian noise to demonstrate the effectiveness of our diffusion-based state generator.\nFor None, the state generator is removed and catastrophic forgetting is incurred, which demonstrates the necessity of our generative replay mechanism.\nIn summary, these observations verify the contributions of our diffusion models to the continual learning performance.\n\nii) The collection details of offline datasets are explained in Appendix B.\nAs stated in Sec. 3.3, the diffusion models are trained using a mixed data distribution of real samples and replayed ones from the previous generator.\n\niii) We only use the noisy data in the Noise baseline, where the state generative model is replaced with Gaussian noise.\nIn CuGRO, we train the diffusion models with a mixed distribution of real data from the new task and pseudo data generated from previous generators.\n\n[1] Huayu Chen, et al., Offline reinforcement learning via high-fidelity generative behavior modeling, ICLR 2023.\n\n[2] Zhendong Wang, et al., Diffusion Policies as an Expressive Policy Class for Offline Reinforcement Learning, ICLR 2023.\n\n[3] Michael Janner, et al., Planning with diffusion for flexible behavior synthesis, ICML 2022.\n\n[4] Bingyi Kang, et al., Efficient Diffusion Policies for Offline Reinforcement Learning, NeurIPS 2023.\n\n[5] Anurag Ajay, et al., Is Conditional Generative Modeling all you need for Decision Making? ICLR 2023.\n\n[6] Prafulla Dhariwal et al., Diffusion models beat GANs on image synthesis, NeurIPS 2021.\n\n[7] Robin Rombach et al., High-Resolution Image Synthesis with Latent Diffusion Models, CVPR 2022."
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700206961151,
                "cdate": 1700206961151,
                "tmdate": 1700206961151,
                "mdate": 1700206961151,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "Esx3X9PXKS",
                "forum": "EPfGHb9Y68",
                "replyto": "criohIzI65",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 2/2)"
                    },
                    "comment": {
                        "value": "**Q3: Efficiency trade-off: Training diffusion models for each different task might not be sample-efficient nor computation-efficient. Therefore, the authors might want to provide more information on the feasibility of this approach and the computation resource usage for implementing the experiments (e.g., how long to train the model).**\n\nA3: In the continual learning setting, the category of generative replay methods [8, 9] needs to maintain two separate models: the solver (the backbone RL algorithm) and the generator (which mimics the data distribution of past tasks).\nThat is, they eliminate the dependency on accessing data of past tasks at the cost of maintaining an additional generative model, e.g., GANs [8] or diffusion models [9].\n\n**For sample efficiency**, our method operates in an offline mode, and the size of the offline dataset is fixed.\nHence, the sample efficiency is not a primary consideration.\n\n**For computation efficiency**, taking the HalfCheetah task as an example, the state generator has about 24M parameters, and each new task has about 1M samples where each transition sample ($s,a,r,s'$) has the dimension of 26.\nAs the number of tasks increases, the number of encountered samples will continue to expand, while the model size remains constant.\nTraining the state generator with 1M samples roughly costs 2.5 hours on an NVIDIA RTX 3090 GPU, which could be further reduced to 50 minutes via distributed training on 4 GPUs.\nThe advantage of generative replay becomes more remarkable for scenarios where massive datasets are needed to train a task or the continual learning setting contains a large number of sequential tasks.\nAdditionally, the generative replay method can produce pseudo data as much as needed, which can also improve the robustness and flexibility of the model.\n\nIn literature, current diffusion-based RL methods [1-5] could face the challenge of increased computational costs due to the training and sampling of diffusion models.\nFor example, the diffusion-planning methods [3] also need to train two separate diffusion models, one to generate the trajectory data and another to predict the cumulative rewards of trajectory samples.\nWe believe that the fast development of diffusion models in the generative modeling community can help tackle the above challenge for RL problems, such as sampling acceleration methods [10, 11].\nOur method is the first step that leverages expressive diffusion models to tackle the CORL challenge, and we will continue to tackle the limitations as stated in the original paper (bottom, page 9): \"Though, our method requires two diffusion models to synthesize replayed samples, which could be further improved by sampling acceleration methods or developing one diffusion model for unifying the state and behavior modeling. We leave these directions as future work.\"\n\n\n**Q4:  I was wondering about the scalability of the model. If having more tasks degrade the model's performance?**\n\nA4: We follow the generative replay paradigm, e.g., DGR [8] and DDGR[9], where the scalability primarily depends on the modeling fidelity of the generator.\nThis rationale underpins the choice of diffusion models for our method, mirroring the research motivation of DDGR. \nIn DDGR, diffusion models demonstrate better fidelity compared to GANs, and exhibit promising superiorities for continual learning based on generated replay.  \nOur method is the first step that leverages expressive diffusion models to tackle the CORL challenge, and we believe that this approach will see further developments in the future.\n\n[1] Huayu Chen, et al., Offline reinforcement learning via high-fidelity generative behavior modeling, ICLR 2023.\n\n[2] Zhendong Wang, et al., Diffusion Policies as an Expressive Policy Class for Offline Reinforcement Learning, ICLR 2023.\n\n[3] Michael Janner, et al., Planning with diffusion for flexible behavior synthesis, ICML 2022.\n\n[4] Bingyi Kang, et al., Efficient Diffusion Policies for Offline Reinforcement Learning, NeurIPS 2023.\n\n[5] Anurag Ajay, et al., Is Conditional Generative Modeling all you need for Decision Making? ICLR 2023.\n\n[8] Hanul Shin, et al., Continual learning with deep generative replay, NeurIPS 2017.\n\n[9] Rui Gao, et al., DDGR: Continual learning with deep diffusion-based generative replay, ICML 2023.\n\n[10] Cheng Lu, et al., DPM-Solver: A Fast ODE Solver for Diffusion Probabilistic Model Sampling in Around 10 Steps, NeurIPS 2022.\n\n[11] Qinsheng Zhang, et al., gDDIM: Generalized denoising diffusion implicit models, ICLR 2023."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700207048433,
                "cdate": 1700207048433,
                "tmdate": 1700207048433,
                "mdate": 1700207048433,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "eKGZKiv9Tj",
            "forum": "EPfGHb9Y68",
            "replyto": "EPfGHb9Y68",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_msqf"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission1109/Reviewer_msqf"
            ],
            "content": {
                "summary": {
                    "value": "Motivated by the limitations of unimodal Gaussian policy models and the memory constraints of storing data from previous tasks, the authors propose a novel dual generator system to facilitate continual learning in reinforcement learning. This system features a behavior generative model that diffuses over actions given states, and a state generative model that diffuses over states from past tasks without needing to store all previous data. When encountering a new task, this dual approach leverages the state generator to generate synthetic state samples reflective of all former tasks, and the behavior generator produces corresponding actions, forming pseudo state-action pairs. \nThan, a multi-head critic network, with separate heads dedicated to individual tasks, is trained on real samples from new datasets and annoate the pseudo pairs to create synthetic samples for behavior cloning."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "3 good"
                },
                "strengths": {
                    "value": "Pros:\n1. First attempt to incorporate diffusion model for continual offline RL. Novel idea to utilizing diffusion-model\u2019s expressiveness to generate high-fidelity replay of the previous tasks to prevent the need of storing all previous tasks samples.\n2. Shows effectiveness in generating new samples to represent prior tasks when comparing CuGRO with the Oracle in Table 1 and figure 2. \n3. Achieves strong experimental results across the 4 simulated environments. The proposed CuGRO algorithm closely matches the Oracle, outperforming baselines.\n4. Ablation studies conducted to analyze the hyper parameters lambda which controls how much emphasis to put on the previously replayed dataset."
                },
                "weaknesses": {
                    "value": "Cons:\n1. Requires training two separate diffusion models, which can be computationally expensive for sampling at test time since parallel sampling is not possible. Exploring concatenating {s,a} and diffuse with one model could improve efficiency.\n2. This methods alleviates the memory capacity concern by condensing the previous task\u2019s knowledge into two diffusion models. How does the continual training cost of updating diffusion models for each new task and sampling from them trade off with the memory savings of condensing previous tasks?\n3. Limited baselines: Is comparison only made within the diffusion-based model generator pipeline? Why there is no comparison to previous continual RL algorithms provided?"
                },
                "questions": {
                    "value": "please see weaknesses"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "2: You are willing to defend your assessment, but it is quite likely that you did not understand the central parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission1109/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698910484981,
            "cdate": 1698910484981,
            "tmdate": 1699636036993,
            "mdate": 1699636036993,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "7xOoPJzpfz",
                "forum": "EPfGHb9Y68",
                "replyto": "eKGZKiv9Tj",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 1/2)"
                    },
                    "comment": {
                        "value": "**Q1: Training two separate diffusion models can be computationally expensive. Exploring concatenating {s,a} and diffusing with one model could improve efficiency.**\n\nA1: Thank you for your insightful comments. \nWe train two separate diffusion models since we adopt the diffusion-based generative behavior modeling method [1] as our backbone offline RL algorithm.\nThis kind of backbone is well suited for continual learning problems, because training a unified behavior model can continually absorb new behavior patterns to promote forward knowledge transfer for the offline setting, and sampling from this generative model can naturally encompass a progressive range of observed behaviors.\nThen, for continual learning, we need to adopt another generative model to synthesize pseudo  samples of past tasks under the paradigm of deep generative replay [9, 10]. \n\nOn the other side, this architecture with two diffusion models could indeed increase computational costs.\nIn literature, current diffusion-based RL methods [1-5] could face the challenge of increased computational costs due to the training and sampling of diffusion models.\nFor example, the diffusion-planning methods [2, 6] also need to train two separate diffusion models, one to generate the trajectory data and another to predict the cumulative rewards of trajectory samples.\nWe believe that the fast development of diffusion models in the generative modeling community can help tackle the above challenge for RL problems, such as sampling acceleration methods [7, 8].\nOur method is the first step that leverages expressive diffusion models to tackle the CORL challenge, and we will continue to tackle its limitations as stated in the original paper (bottom, page 9): \"Though, our method requires two diffusion models to synthesize replayed samples, which could be further improved by sampling acceleration methods or developing one diffusion model for unifying the state and behavior modeling. We leave these directions as future work.\"\n\n**Q2: How does the continual training cost of updating diffusion models for each new task and sampling from them trade off with the memory savings of condensing previous tasks?**\n\nA2: In the continual learning setting, the category of generative replay methods [9, 10] needs to maintain two separate models: the solver (the backbone RL algorithm) and the generator (which mimics the data distribution of past tasks).\nIn our method, we eliminate the dependency on accessing data of past tasks at the cost of maintaining an additional diffusion-based state generator.\nTaking the HalfCheetah task as an example, the state generator has about 24M parameters, and each new task has about 1M samples where each transition sample ($s,a,r,s'$) has a dimension of 26.\nAs the number of tasks increases, the number of encountered samples will continue to expand, while the model size remains constant.\nTraining the state generator with 1M samples roughly costs 2.5 hours on an NVIDIA RTX 3090 GPU, which could be further reduced to 50 minutes via distributed training on 4 GPUs.\nThe advantage of generative replay becomes more remarkable for scenarios where massive datasets are needed to train a task or the continual learning setting contains a large number of sequential tasks.\nAdditionally, the generative replay method can produce pseudo data as much as needed, which can also improve the robustness and flexibility of the model.\n\nFurther, the pros of generative replay are not limited to memory savings only.\nIn many practical applications, we cannot access real data due to privacy and security concerns, and generative replay is one of the few methods that is effective under these conditions.\nThis challenge makes generative replay methods more necessary in real-world scenarios.\n\n[1] Huayu Chen, et al., Offline reinforcement learning via high-fidelity generative behavior modeling, ICLR 2023.\n\n[2] Michael Janner, et al., Planning with diffusion for flexible behavior synthesis, ICML 2022.\n\n[3] Zhendong Wang, et al., Diffusion Policies as an Expressive Policy Class for Offline Reinforcement Learning, ICLR 2023.\n\n[4] Bingyi Kang, et al., Efficient Diffusion Policies for Offline Reinforcement Learning, NeurIPS 2023.\n\n[5] Anurag Ajay, et al., Is Conditional Generative Modeling all you need for Decision Making? ICLR 2023.\n\n[6] Fei Ni, et al., MetaDiffuser: Diffusion Model as Conditional Planner for Offline Meta-RL, ICML 2023.\n\n[7] Cheng Lu, et al., DPM-Solver: A Fast ODE Solver for Diffusion Probabilistic Model Sampling in Around 10 Steps, NeurIPS 2022.\n\n[8] Qinsheng Zhang, et al., gDDIM: Generalized denoising diffusion implicit models, ICLR 2023.\n\n[9] Hanul Shin, et al., Continual learning with deep generative replay, NeurIPS 2017.\n\n[10] Rui Gao, et al., DDGR: Continual learning with deep diffusion-based generative replay, ICML 2023."
                    }
                },
                "number": 3,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700206322392,
                "cdate": 1700206322392,
                "tmdate": 1700206322392,
                "mdate": 1700206322392,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "8aUHSezmvw",
                "forum": "EPfGHb9Y68",
                "replyto": "eKGZKiv9Tj",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response (Part 2/2)"
                    },
                    "comment": {
                        "value": "**Q3: Comparison to previous continual RL algorithms in addition to diffusion-based model generator pipeline.**\n\nA3: As we stated in the paper, continual learning methods can be categorized into three kinds: regularization, parameter isolation (model expansion), and rehearsal.\nEach of these three types has its own pros and cons, which aligns with the No Free Lunch Theorem in machine learning research.\nFor example, regularization methods can continually absorb new knowledge with a constant network capacity, while comprising additional regularization terms may lead to a tradeoff on the accomplishment of old and new tasks.\nModel expansion methods can leave existing knowledge totally undisturbed via parameter isolation, while it consumes increasing network resources.\n\nAs we are the first to leverage expressive diffusion models to tackle the understudied CORL challenge, our primary concern is to validate whether our dual generative replay mechanism can realize high-fidelity replay of the sample space.\nHence, following the classical DGR method [9], we compare the performance of the offline RL model trained with three variants of replay methods: Oracle, None, and Noise.\nFor Oracle, the generated data is replaced with real data of past tasks to demonstrate that our diffusion-based generator can mimic the data distribution with high-fidelity.\nFor Noise, the state generator is replaced with Gaussian noise to demonstrate the effectiveness of our diffusion-based state generator.\nFor None, the state generator is removed and catastrophic forgetting is incurred, which demonstrates the necessity of our generative replay mechanism.\n\nWe did not compare our method to several existing continual RL methods due to the difference in the intrinsic characteristics and applicable scenarios.\nFor example, [11] belongs to the model expansion kind, [12] and [13] need to replay real samples of past tasks, and most of the existing methods [11, 12, 14] tackle the online RL problems other than the offline setting.\nOn the other hand, it is significant to conduct empirical comparisons to these methods to demonstrate their respective pros and cons, or to modify these online continual methods to adapt to offline settings.\nWe leave these for future work.\n\n[9] Hanul Shin, et al., Continual learning with deep generative replay, NeurIPS 2017.\n\n[11] Jean-Baptiste Gaya, et al., Building a subspace of policies for scalable continual learning, ICLR 2023.\n\n[12] Maciej Wolczyk, et al., Disentangling transfer in continual reinforcement learning, NeurIPS 2022.\n\n[13] Sibo Gai, et al., OER: Offline experience replay for continual offline reinforcement learning, ECAI 2023.\n\n[14] David Rolnick, et al., Experience replay for continual learning, NeurIPS 2019."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700206390723,
                "cdate": 1700206390723,
                "tmdate": 1700206390723,
                "mdate": 1700206390723,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "LINl5WyY9b",
                "forum": "EPfGHb9Y68",
                "replyto": "8aUHSezmvw",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission1109/Reviewer_msqf"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission1109/Reviewer_msqf"
                ],
                "content": {
                    "title": {
                        "value": "Thanks for the response."
                    },
                    "comment": {
                        "value": "Thank the authors for the response. I\u2019d like to keep my score for acceptance."
                    }
                },
                "number": 14,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission1109/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700730810057,
                "cdate": 1700730810057,
                "tmdate": 1700730810057,
                "mdate": 1700730810057,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]