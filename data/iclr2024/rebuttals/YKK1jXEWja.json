[
    {
        "title": "Prospector: Improving LLM Agents with Self-Asking and Trajectory Ranking"
    },
    {
        "review": {
            "id": "RqgyEZ01AU",
            "forum": "YKK1jXEWja",
            "replyto": "YKK1jXEWja",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_EvHL"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_EvHL"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposes Prospector, a large language model-based agent that aims to solve multi-step decision making tasks. Prospector comprises two parts: Self-Asking, which enables the LLM agent to generate questions and answer them itself, leading to improved intermediate steps in the decision making process, and Trajectory Ranking, where an LLM critic is used to predict the rewards of different trajectories. Compared to prior LLM agents for the ALFWorld and Webshop tasks that only use ICL methods, Prospector is able to achieve higher success rates."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "- The proposed method is both simple and intuitive, using LLMs for both planning and critiquing of possible trajectories. The paper is well-written and clear.\n- The experiments seem thorough, with comparisons against state-of-the-art methods in the same task domains, and ablations of each component of the proposed Prospector method (removing the trajectory ranking, evaluating the accuracy of the different LLM critics, comparing few-shot and finetuned LLM critics). In particular, studying the choice of either a fine-tuned or ICL-based critic is interesting and seems novel."
                },
                "weaknesses": {
                    "value": "While the method is straightforward and intuitive with impressive experimental results, my main concern is that the two main components of the methods seem to lack novelty in themselves. This can maybe be clarified with further experimentation: \n\n-  It\u2019s not clear how much of the overall performance improvement is just due to giving the LLM multiple attempts at a single question with the trajectory ranking process. Further experiments disentangling this would be helpful: for example, if we used the same LLM critics and trajectory ranking process with the ReAct prompt, would it perform on par with Prospector (these experiments seem to be present for ALFWorld but not WebShop)? Would majority voting at every step, which also allows multiple trajectory attempts but without an explicit LLM critic, be less useful than using the LLM-based critic as in Prospector? \n\n- The AskAct process is does not seem like a novel contribution in and of itself, as it was proposed in Measuring and Narrowing the Compositionality Gap in Language Models (Press et al., 2022). While the authors note that that Self-Ask work was developed for QA tasks specifically, applying the same general technique of prompting the LLM to ask itself a limited set of questions to reason is a limited contribution. In particular, it seems like AskAct was not applied to the ALFWorld benchmark for the Prospector agent, and only tested in WebShop as a single fixed question that asks \"which observed object is most proper to select\" (shown in Figure 2 and Table 13 and 16). Further experiments eliciting different types of self-asked questions across all the tasks would strengthen this contribution."
                },
                "questions": {
                    "value": "- It would be helpful to have an ablation with the trajectory ranking only, and no intermediate self-asking step for WebShop, as is shown in ALFWorld. Is most of the juice coming the critic-based trajectory ranking?\n- It would also be interesting to see if the few-shot critic performance improves with intermediate chain-of-thought reasoning steps in the critic prompt, rather than just having the critic immediately output a response as success/failure. \n- It would help to add a clarifying caption to Figure 2. It\u2019s not immediately clear why the AskAct reasoning is correct (the second highlighted think[] sentence on the right seems to just reiterate the query, similar to the first highlighted think[] sentence on the left). The item observations from the search don\u2019t seem to indicate which option matches the query (they both are <40 dollars and have mn4 as an option)."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7717/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698709137154,
            "cdate": 1698709137154,
            "tmdate": 1699636940729,
            "mdate": 1699636940729,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "UiPOEacwpi",
                "forum": "YKK1jXEWja",
                "replyto": "RqgyEZ01AU",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "content": {
                    "title": {
                        "value": "[1/3] Response to Reviewer EvHL"
                    },
                    "comment": {
                        "value": "We thank the reviewer for his/her comments and suggestions.\n\n**[Responses to Weaknesses]** \n\n**W1.** Further experiments disentangling this would be helpful: for example, if we used the same LLM critics and trajectory ranking process with the ReAct prompt, would it perform on par with Prospector (these experiments seem to be present for ALFWorld but not WebShop)?\n\n**WA1.** To address this important suggestion, we conducted **additional experiments on WebShop**. To provide a more clear view on the performance of each component of Prospector, we conducted experiments with four different settings: (1) ReAct only, (2) AskAct only, (3) ReAct + Trajectory Ranking (TR), and (4) AskAct + TR. To expedite experiments and reduce costs, we used open-source LLMs (i.e., Llama-2-70B for the LLM Actor and FLAN-T5-3B for the LLM Critic) instead of closed-source LLMs. The additional experiment results are summarized in the bottom section of the following table.\n\nSome findings from the additional experiments can be summarized as follows:\n- On the WebShop environment, **Llama-2-70B**, one of representative open-source LLMs **can achieve comparable performance with text-davinci-002**, one of the most powerful LLMs.\n- In both cases of text-davinci-002 and Llama-2-70B, **AskAct meaningfully improves the success rate compared to ReAct:** from 35.8 to 39.8 on text-davinci-002, and **from 37.6 to 42.2 on Llama-2-70B**. This means that AskAct, a simple prompting method that adds extra question prompts on ReAct, can be effective.\n- **ReAct + TR (the setting requested by the reviewer) can improve ReAct from 37.6 to 42.2** in the success rate. However, ReAct + TR is less efficient in terms of the computation complexity, since **it requires 8x larger computation than AskAct** to achieve the similar performance.\n- **AskAct + TR further improves the success rate of AskAct (from 42.2 to 43.6)**, and provides better performance than ReAct + TR (42.2).\n\nWe will add the results in the revised paper, and upload it during the author response period.\n\n| Method | LLM Actor | LLM Critic | Reward | Success Rate |\n|---|---|---|:---:|:---:|\n| Human (expert) | - | - | 82.1 | 59.6 |\n| Human (average) | - | - | 75.5 | 50.0 |\n| IL | - | - | 59.9 | 29.1 |\n| IL + RL | - | - | 62.4 | 28.7 |\n| ReAct | PaLM-540B | - | 66.6 | 40.0 |\n| ReAct | text-davinci-002 | - | 63.3 | 35.8 |\n| ReAct + Reflexion (k=8) | text-davinci-002 | - | - | 35.0 |\n| AskAct (Prospector) | text-davinci-002 | - | 66.5 | 39.8 |\n| **AskAct + TR (k=8) (Prospector)** | text-davinci-002 | text-davinci-002 | 69.3 | **41.4** |\n| ReAct | Llama-2-70B | - | 62.3 | 37.6 |\n| AskAct (Prospector) | Llama-2-70B | - | 68.6 | 42.2 |\n| ReAct + TR (k=8) (Prospector) | Llama-2-70B | FLAN-T5-3B (SFT) | 69.3 | 42.2 |\n| **AskAct + TR (k=8) (Prospector)** | Llama-2-70B | FLAN-T5-3B (SFT) | 70.2 | **43.6** |"
                    }
                },
                "number": 1,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700507382408,
                "cdate": 1700507382408,
                "tmdate": 1700668930731,
                "mdate": 1700668930731,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "plqBu6f0Kg",
                "forum": "YKK1jXEWja",
                "replyto": "RqgyEZ01AU",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "content": {
                    "title": {
                        "value": "[2/3] Response to Reviewer EvHL"
                    },
                    "comment": {
                        "value": "**[Responses to Weaknesses]**\n\n**W2.** In particular, it seems like AskAct was not applied to the ALFWorld benchmark for the Prospector agent, and only tested in WebShop as a single fixed question that asks \"which observed object is most proper to select\" (shown in Figure 2 and Table 13 and 16). Further experiments eliciting different types of self-asked questions across all the tasks would strengthen this contribution.\n\n**WA2.** To reflect this important suggestion, we conducted **additional experiments on ALFWorld**. Similar to the addtional experiments on WebShop, we conducted experiments with four different settings: (1) ReAct only, (2) AskAct only, (3) ReAct + Trajectory Ranking (TR), and (4) AskAct + TR.\n\nSome findings from the additional experiments can be summarized as follows:\n- **AskAct effectively improves the success rate of ReAct (from 41.0 to 56.7)**. Note that a LLM with lower temperature provides slightly better performance in case of single sampling.\n- Since AskAct provides a better baseline, **AskAct + TR can achieve much better performance with less sampling** (e.g., AskAct only (56.7) comparable with ReAct + TR (k=2) (56.0)).\n- We emphasize that **AskAct and TR can make an effective synergy in improving LLM agents in terms of both performance and efficiency**.\n\nWe will add the results and the AskAct prompt for ALFWorld in the revised paper.\n\n| Method | LLM Actor | LLM Critic | k=1 | 2 | 3 | 4 | 5 |\n| --- | --- | --- | :---: | :---: | :---: | :---: | :---: |\n| BUTLER (RL) | -| - | 37.0 | - | - | - | - |\n| Act | PaLM-540B | - | 45.0 | - | - | - | - |\n| ReAct | PaLM-540B | - | 70.9 | - | - | - | - |\n| ReAct | text-davinci-002 (temp=0.0) | - | 78.4 | - | - | - | - |\n| ReAct + Reflexion | text-davinci-002 | - | - | - | - | - | 86.0 |\n| **ReAct + TR (Prospector)** | text-davinci-002 (temp=0.8) | text-davinci-002 | 71.6 | - | 93.3 | - | **95.5** |\n| ReAct | Llama-2-70B (temp=0.0) | - | **41.0** | - | - | - | - |\n| AskAct (Prospector) | Llama-2-70B (temp=0.0) | - | **56.7** | - | - | - | - |\n| ReAct + TR (Prospector) | Llama-2-70B (temp=0.8) | FLAN-T5-3B (SFT) | 33.6 | 59.0 | 69.4 | 73.1 | **77. 6** |\n| **AskAct + TR (Prospector)** | Llama-2-70B (temp=0.8) | FLAN-T5-3B (SFT) | 53.7 | 76.1 | 80.6 | 84.3 | **86.6** |"
                    }
                },
                "number": 2,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700508465668,
                "cdate": 1700508465668,
                "tmdate": 1700669760728,
                "mdate": 1700669760728,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "fll5yCwxDc",
                "forum": "YKK1jXEWja",
                "replyto": "RqgyEZ01AU",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "content": {
                    "title": {
                        "value": "[3/3] Response to Reviewer EvHL"
                    },
                    "comment": {
                        "value": "**[Responses to Questions]**\n\n**Q1.** It would be helpful to have an ablation with the trajectory ranking only, and no intermediate self-asking step for WebShop, as is shown in ALFWorld. Is most of the juice coming the critic-based trajectory ranking?\n\n**A1.** This question is closely related to the weakness 1. Please see our response to the weakness 1 above.\n\n---\n**Q2.** It would also be interesting to see if the few-shot critic performance improves with intermediate chain-of-thought reasoning steps in the critic prompt, rather than just having the critic immediately output a response as success/failure.\n\n**A2.** Thank you for your thoughtful suggestion. We will try our best to provide some experiment results on this suggestion within the author response period.\n\n---\n**Q3.** It would help to add a clarifying caption to Figure 2.\n\n**A3.** Thank you for your constructive suggestion. We will add a clarifying caption to Figure 2 in the revised paper. We plan to upload the revised paper during the author response period."
                    }
                },
                "number": 3,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700508660059,
                "cdate": 1700508660059,
                "tmdate": 1700669170782,
                "mdate": 1700669170782,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "Y8bGr9q1uR",
                "forum": "YKK1jXEWja",
                "replyto": "plqBu6f0Kg",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Reviewer_EvHL"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Reviewer_EvHL"
                ],
                "content": {
                    "comment": {
                        "value": "Thank you for addressing my concerns and presenting the additional experimental results, which are more thorough. Given these updated results, I have two remaining questions:\n- Is there an explanation for why there exists a performance difference between ReAct/AskAct only and their respective cases with TR and k=1? I would expect those to be similar, but it seems like TR with k=1 actually hurts performance.\n- Could the authors provide an example of the self-ask questions generated for ALFWorld?"
                    }
                },
                "number": 5,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700649627848,
                "cdate": 1700649627848,
                "tmdate": 1700649627848,
                "mdate": 1700649627848,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "Kw4vs3Ge9h",
                "forum": "YKK1jXEWja",
                "replyto": "RqgyEZ01AU",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer EvHL"
                    },
                    "comment": {
                        "value": "Thank you for your thoughtful comments. We provide answers to your remaining questions.\n\n---\n**Q1**. Is there an explanation for why there exists a performance difference between ReAct/AskAct only and their respective cases with TR and k=1? I would expect those to be similar, but it seems like TR with k=1 actually hurts performance.\n\n**A1**. As you point out, there is a slight performance difference between ReAct (AskAct) only and ReAct (AskAct) + TR (k=1). It is due to that we set a different temperature of the LLM Critic (Llama-2-70B) for each case. **To leverage the stochastic generation of LLMs, Prospector sets a high temperate (0.8), when applying Trajectory Ranking (TR).** In contrast, ReAct sets the temperature of a LLM to 0.0 (i.e., deterministic sampling). Sampling from the LLM with a high temperature usually results in a slightly lower performance, since the probability distribution of tokens becomes to have higher uncertainty. Instead, we can generate diverse trajectories, and one of which can be highly likely correct. Actually, we cannot leverage the stochasticity of a LLM in case of TR with k=1. However, to make consistency, we set the same high temperature of a LLM when applying TR.\n\n---\n**Q2**. Could the authors provide an example of the self-ask questions generated for ALFWorld?\n\n**A2**. Thank you for your request. We are happy to provide an example of AskAct prompt for ALFWorld. An AskAct prompt is based on a ReAct prompt, and it simply adds few self-asking steps before reasoning steps. In the following example AskAct prompt, we highlight the added self-asking steps. **In ALFWorld, the self-asking step checks if a target object is found.** This self-asking step significantly reduces missing a target object in a place (due to hallucination). Further, it can elicit a proper next action, if the target object is found. **We would like to emphasize that this simple prompting can significantly improves the success rate in ALFWorld (on Llama-2-70B, ReAct: 41.0, AskAct: 56.7)**. Here is an example AskAct prompt.\n\n---\n\nYou are in the middle of a room. Looking quickly around you, you see a cabinet 4, a cabinet 3, a cabinet 2, a cabinet 1, a countertop 1, a garbagecan 1, a handtowelholder 2, a handtowelholder 1, a sinkbasin 2, a sinkbasin 1, a toilet 1, a toiletpaperhanger 1, and a towelholder 1.\n\nYour task is to: put some spraybottle on toilet.\n\n\\> think: To solve the task, I need to find and take a sparybottle, then put it on toilet.\n\nOK.\n\n\\> think: First I need to find a spraybottle. A spraybottle is more likely to appear in cabinet (1-4), countertop (1), toilet (1), sinkbasin (1-2), garbagecan (1). I can check one by one, starting with cabinet 1.\n\nOK.\n\n\\> go to cabinet 1\n\nOn the cabinet 1, you see a cloth 1, a soapbar 1, a soapbottle 1.\n\n\\> **think: Did I find a spraybottle?**\n\nOK.\n\n\\> **think: No, I did not. I need to go other place to find a spraybottle.**\n\nOK.\n\n\\> go to cabinet 2\n\nThe cabinet 2 is closed.\n\n\\> open cabinet 2\n\nYou open the cabinet 2. The cabinet 2 is open. In it, you see a candle 1, and a spraybottle 2.\n\n\\> **think: Did I find a spraybottle?**\n\nOK.\n\n\\> think: Now I find a spraybottle (2). Next, I need to take it.\n\nOK.\n\n\\> take spraybottle 2 from cabinet 2\n\nYou pick up the spraybottle 2 from the cabinet 2.\n\n\\> think: Now I take a spraybottle (2). Next, I need to put it in/on toilet 1.\n\nOK.\n\n\\> go to toilet 1\n\nOn the toilet 1, you see a soapbottle 2.\n\n\\> put spraybottle 2 in/on toilet 1\n\nYou put the spraybottle 2 in/on the toilet 1."
                    }
                },
                "number": 6,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700668574010,
                "cdate": 1700668574010,
                "tmdate": 1700669561984,
                "mdate": 1700669561984,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "2SqlrxhfRb",
            "forum": "YKK1jXEWja",
            "replyto": "YKK1jXEWja",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_EsKc"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_EsKc"
            ],
            "content": {
                "summary": {
                    "value": "The paper introduces Prospector, an innovative LLM agent designed for decision-making tasks. Unlike previous methods such as ReAct and Reflexion, which rely on few-shot in-context learning or use feedback from the environment, Prospector integrates two novel components: Self-Asking and Trajectory Ranking. Self-Asking allows the LLM to pose and answer its own questions during few-shot demonstrations, aiming to collect more pertinent information for decision-making. Trajectory Ranking, on the other hand, involves generating multiple action trajectories and selecting the most rewarding one using reward prediction models. The authors show that Prospector significantly outperforms existing methods on benchmark tasks like ALFWorld and WebShop."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. The paper addresses a gap in current LLM-based decision-making methods by integrating feedback from the environment and incorporating stochasticity in trajectory generation.\n2. The proposed method shows empirical success, outperforming existing state-of-the-art methods on standard benchmarks.\n3. Prospector offers an approach that avoids costly fine-tuning, making it more generalizable and efficient."
                },
                "weaknesses": {
                    "value": "1. Both the critic and the generator are LLMs. This could amplify any existing issues inherent to LLMs.\n2. Limited discussion on the limitations of the reward prediction models used for Trajectory Ranking.\n3. The paper could benefit from a more comprehensive analysis comparing the computational overhead introduced by the Self-Asking and Trajectory Ranking components."
                },
                "questions": {
                    "value": "1. How does the computational complexity of Prospector compare to that of existing methods like ReAct and Reflexion?\n2. Could you elaborate on the reward prediction models used in Trajectory Ranking? What are the limitations of the reward prediction models you used, and how do they impact the overall performance of Prospector?\n3. Are there specific types of questions or domains where the Self-Asking mechanism is more or less effective?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7717/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698728568067,
            "cdate": 1698728568067,
            "tmdate": 1699636940616,
            "mdate": 1699636940616,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "E9S7ixnI5y",
                "forum": "YKK1jXEWja",
                "replyto": "2SqlrxhfRb",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer EsKc"
                    },
                    "comment": {
                        "value": "We thank the reviewer for his/her comments and suggestions.\n\n**[Responses to Questions]**\n\n**Q1.** How does the computational complexity of Prospector compare to that of existing methods like ReAct and Reflexion?\n\n**A1.** We present an analysis of the complexity of each method.\nLet $N$ be the number of tokens involved in a single trajectory and $m$ the number of generated trajectories. Assuming a transformer model is used as the backbone, the complexity of ReAct is $O(N^2)$.\nReflexion generates a sequence of $m$ trajectories. Assuming all past trajectories are given to the model, Reflexion has a complexity of $O(m^2N^2)$. Note that this may vary depending on how the method is implemented.\nOur method involves sampling $m$ independent trajectories and ranking them. This process has a complexity of $O(mN^2)$. **Although ReAct is more efficient than our approach, our method performs much better.** **Our method is further more efficient and performs better than Reflexion based on the analysis above.**\n\n---\n\n**Q2.** Could you elaborate on the reward prediction models used in Trajectory Ranking? What are the limitations of the reward prediction models you used, and how do they impact the overall performance of Prospector?\n\n**A2.** We use a LLM as a reward model (named LLM Critic) that predicts the expected reward of a trajectory generated by the LLM Actor. **In this paper, we consider two types of LLM Critics: (1) few-shot LLM Critic and (2) fine-tuned LLM Critic.** A few-shot LLM Critic takes few examples of (trajectory, reward) as inputs, and generates a response as a reward. A fine-tuned LLM Critic is fine-tuned on a dataset of (trajectory, reward), and generate response as the reward for a given input trajectory. A few-shot LLM Critic has some advantages of generality, since it does not need to be trained on a specific environment. But, it may provide low prediction accuracy, as shown in the case of the WebShop environment. In contrast, a fine-tuned LLM Critic can provide high reward prediction accuracy, since it is trained on trajectories generated from an environment. Recently, building a general reward model is investigated as an important research problem. One of the representative work is Prometheus [1]. **We believe that Prospector can benefit from the general and accurate reward models like Prometheus.**\n\n[1] Seungone Kim, et al., \"Prometheus: Inducing Fine-grained Evaluation Capability in Language Models\", arXiv:2310.08491.\n\n---\n\n**Q3.** Are there specific types of questions or domains where the Self-Asking mechanism is more or less effective?\n\n**A3.** In this study, **we find that Self-Asking is considerably effective in both ALFWorld and WebShop.** To answer this thoughtful question, we conducted additional experiments on ALFWorld. As shown in the following table, **AskAct effectively improves the success rate of ReAct (from 41.0 to 56.7).**\n\n| Method | LLM Actor | LLM Critic | Success Rate (%) |\n| --- | --- | --- | --- |\n| ReAct | Llama-2-70B | - | **41.0** |\n| ReAct + TR (k=5) (Prospector) | Llama-2-70B | FLAN-T5-3B (SFT) | 77.6 |\n| AskAct | Llama-2-70B | - | **56.7** |\n| AskAct + TR (k=5) (Prospector) | Llama-2-70B | FLAN-T5-3B (SFT) | 86.6 |\n\nSelf-Asking is a prompting method based on a ReAct prompt, and **it simply adds few self-asking steps before reasoning steps**. In the following example AskAct prompt for ALFWorld, we highlight the added self-asking steps. **In ALFWorld, the self-asking step checks if a target object is found.** This self-asking step significantly reduces missing a target object in a place (due to hallucination). Further, it can elicit a proper next action, if the target object is found.\n\n---\n\nYou are in the middle of a room. Looking quickly around you, you see a cabinet 4, a cabinet 3, a cabinet 2, a cabinet 1, a countertop 1, a garbagecan 1, a handtowelholder 2, a handtowelholder 1, a sinkbasin 2, a sinkbasin 1, a toilet 1, a toiletpaperhanger 1, and a towelholder 1.\n\nYour task is to: put some spraybottle on toilet.\n\n\\> think: To solve the task, I need to find and take a sparybottle, then put it on toilet.\n\nOK.\n\n\\> think: First I need to find a spraybottle. A spraybottle is more likely to appear in cabinet (1-4), countertop (1), toilet (1), sinkbasin (1-2), garbagecan (1). I can check one by one, starting with cabinet 1.\n\nOK.\n\n\\> go to cabinet 1\n\nOn the cabinet 1, you see a cloth 1, a soapbar 1, a soapbottle 1.\n\n\\> **think: Did I find a spraybottle?**\n\nOK.\n\n\\> **think: No, I did not. I need to go other place to find a spraybottle.**\n\nOK.\n\n\\> go to cabinet 2\n\nThe cabinet 2 is closed.\n\n\\> open cabinet 2\n\nYou open the cabinet 2. The cabinet 2 is open. In it, you see a candle 1, and a spraybottle 2.\n\n\\> **think: Did I find a spraybottle?**\n\nOK.\n\n\\> **think: Now I find a spraybottle (2). Next, I need to take it.**\n\nOK.\n\n\\> take spraybottle 2 from cabinet 2"
                    }
                },
                "number": 7,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700677707762,
                "cdate": 1700677707762,
                "tmdate": 1700699354822,
                "mdate": 1700699354822,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "LN6P5bdgKG",
                "forum": "YKK1jXEWja",
                "replyto": "E9S7ixnI5y",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Reviewer_EsKc"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Reviewer_EsKc"
                ],
                "content": {
                    "comment": {
                        "value": "I still have concerns about the complexities and technical novelties. I will maintain my current scores for now."
                    }
                },
                "number": 10,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700691268775,
                "cdate": 1700691268775,
                "tmdate": 1700691268775,
                "mdate": 1700691268775,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "qBMxjidHW4",
            "forum": "YKK1jXEWja",
            "replyto": "YKK1jXEWja",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_UFEP"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_UFEP"
            ],
            "content": {
                "summary": {
                    "value": "In this paper, the authors present Prospector, an algorithm for improving LLM agents operating on language tasks. The authors introduce the concepts of Self-Asking, involving asking the model to ponder the task and options at hand, and trajectory ranking, which considers multiple rollouts from the language models and compares them using a \"critic\", which is a different LLM call, to find the best possible response.\n\nThe paper is organized as following: first, the interactive decision making tasks is introduced on which the rest of the paper is based on. Then, the authors introduce the two new components in this paper, namely self-asking, where the agent asks and answers a question about the task at hand, and trajectory ranking, where multiple natural language interactions are rolled out, and then the best trajectory is picked out by an LLM critic. The authors present a variety of experiments based on these premises, such as how different language models perform as the action model, and how well different critics (fine tuned vs. few shot prompted) perform against each other. The authors show that while it may not be very important to fine tune the actor, fine tuning the critic leads to clear improvements. The necessary ablations (such as: how well does each of these components perform by themselves?) are not marked separately, but included in the primary reported results tables."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "1 poor"
                },
                "strengths": {
                    "value": "The paper has a few strong points, such as:\n1. A comprehensive evaluation across different language models used as critics. \n2. On different parameters of the experiments, a proper experimentation schedule was used, such as few-shot reward prediction accuracy.\n3. The success rate on the evaluated benchmarks show marked improvement over previous work, however, I am not familiar with the benchmarks in the field enough to know if this is sufficient."
                },
                "weaknesses": {
                    "value": "The positive impact of the paper is beset by several downsides. Here are these in the order of importance:\n1. I am not certain about the magnitude of the impact of the method introduced in this paper. The method of self-asking itself does not seem significant enough in and of itself without the trajectory ranking, and is quite similar to many different previous methods such as thinking step by step. Trajectory ranking is definitely the more interesting of the two components, but I am not sure it is a novel and significant enough contribution to merit a place in this venue.\n2. Following up on this, the work is beset by the fact that the new methods are only evaluated in two benchmarks only. While they perform well on the benchmarks, the question of how easy they will be to scale to a variety of other tasks remain unanswered from the paper itself.\n3. While there is a comprehensive study run on LLM critic and which language model is best for that task, it does not extend to the LLM actor itself. Rather, only two models of incredibly large sizes are used, which keeps the evaluation quite one-sided.\n\nOverall, this paper shows promise in a few direction, but does not make a noteworthy contribution in any of the directions in my opinion. However, given my limited experience in such works, I am happy to reconsider my take at the word of the area chair."
                },
                "questions": {
                    "value": "1. How well does the open source smaller models perform on the tasks presented in the paper?\n2. Could you please expand the previous work section to properly differentiate yourself from them and clarify what contributions of yours in this paper are novel vs. same as what is done before?\n3, What would be the primary challenges of scaling this method to new benchmarks?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "5: marginally below the acceptance threshold"
                },
                "confidence": {
                    "value": "2: You are willing to defend your assessment, but it is quite likely that you did not understand the central parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7717/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698790689066,
            "cdate": 1698790689066,
            "tmdate": 1699636940495,
            "mdate": 1699636940495,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "TGFyl2Ezv7",
                "forum": "YKK1jXEWja",
                "replyto": "qBMxjidHW4",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer UFEP"
                    },
                    "comment": {
                        "value": "We thank the reviewer for his/her comments and suggestions.\n\n**[Responses to Questions]**\n\n**Q1.** How well does the open source smaller models perform on the tasks presented in the paper?\n\nA1. To answer this important question, we conducted **comprehensive additional experiments on ALFWorld and WebShop by using open-source LLMs**. More specifically, we used **Llama-2-70B for the LLM Actor** and **fined-tuned FLAN-T5-3B for the LLM Critic**. We would like to emphasize that AskAct and TR can make an effective synergy in improving LLM agents in terms of both performance and efficiency.\n\nThe **open-source LLM experiments on ALFWorld** can be summarized as follows:\n- **AskAct effectively improves the success rate of ReAct (from 41.0 to 56.7)**.\n- Since AskAct provides a better baseline, **AskAct + TR can achieve much better performance with less sampling** (e.g., AskAct only (56.7) comparable with ReAct + TR (k=2) (56.0)).\n\n| Method | LLM Actor | LLM Critic | k=1 | 2 | 3 | 4 | 5 |\n| --- | --- | --- | :---: | :---: | :---: | :---: | :---: |\n| ReAct | text-davinci-002 (temp=0.0) | - | 78.4 | - | - | - | - |\n| ReAct + Reflexion | text-davinci-002 | - | - | - | - | - | 86.0 |\n| **ReAct + TR (Prospector)** | text-davinci-002 (temp=0.8) | text-davinci-002 | 71.6 | - | 93.3 | - | **95.5** |\n| ReAct | Llama-2-70B (temp=0.0) | - | **41.0** | - | - | - | - |\n| AskAct (Prospector) | Llama-2-70B (temp=0.0) | - | **56.7** | - | - | - | - |\n| ReAct + TR (Prospector) | Llama-2-70B (temp=0.8) | FLAN-T5-3B (SFT) | 33.6 | 59.0 | 69.4 | 73.1 | **77. 6** |\n| **AskAct + TR (Prospector)** | Llama-2-70B (temp=0.8) | FLAN-T5-3B (SFT) | 53.7 | 76.1 | 80.6 | 84.3 | **86.6** |\n\n---\nThe **open-source LLM experiments on WebShop** can be summarized as follows:\n- On the WebShop environment, **Llama-2-70B**, one of representative open-source LLMs **can achieve comparable performance with text-davinci-002**, one of the most powerful LLMs.\n- In both cases of text-davinci-002 and Llama-2-70B, **AskAct meaningfully improves the success rate compared to ReAct:** from 35.8 to 39.8 on text-davinci-002, and **from 37.6 to 42.2 on Llama-2-70B**. This means that AskAct, a simple prompting method that adds extra question prompts on ReAct, can be effective.\n- **AskAct + TR further improves the success rate of AskAct (from 42.2 to 43.6)**, and provides better performance than ReAct + TR (42.2).\n\n| Method | LLM Actor | LLM Critic | Reward | Success Rate |\n|---|---|---|:---:|:---:|\n| ReAct | text-davinci-002 | - | 63.3 | 35.8 |\n| ReAct + Reflexion (k=8) | text-davinci-002 | - | - | 35.0 |\n| AskAct (Prospector) | text-davinci-002 | - | 66.5 | 39.8 |\n| **AskAct + TR (k=8) (Prospector)** | text-davinci-002 | text-davinci-002 | 69.3 | **41.4** |\n| ReAct | Llama-2-70B | - | 62.3 | 37.6 |\n| AskAct (Prospector) | Llama-2-70B | - | 68.6 | 42.2 |\n| ReAct + TR (k=8) (Prospector) | Llama-2-70B | FLAN-T5-3B (SFT) | 69.3 | 42.2 |\n| **AskAct + TR (k=8) (Prospector)** | Llama-2-70B | FLAN-T5-3B (SFT) | 70.2 | **43.6** |\n\nWe will add the results in the revised paper, and upload it during the author response period."
                    }
                },
                "number": 4,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700510828439,
                "cdate": 1700510828439,
                "tmdate": 1700669724492,
                "mdate": 1700669724492,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    },
    {
        "review": {
            "id": "WkvztltWTx",
            "forum": "YKK1jXEWja",
            "replyto": "YKK1jXEWja",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_TbNU"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission7717/Reviewer_TbNU"
            ],
            "content": {
                "summary": {
                    "value": "The authors propose Prospector, which extends in-context learning (ICL) for LLMs to be able to optimize trajectories based on reward from environment using self-asking and ranking in decision making tasks. On two decision-making benchmark environments such as ALFWorld and WebShop, they empirically demonstrate that Prospector can considerably increase the success rate of given tasks, while outperforming recent advancements such as ReAct and Reflexion."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "1. The paper is well-written and easy to follow\n2. Extensive ablations and analysis presented is nicely done -- it shows how the two components of the prospector framework work and improve the performance of the baseline react models."
                },
                "weaknesses": {
                    "value": "1. Limited novelty: While it is good to see how two simple ideas when put together in the prospector framework can lead to good task performance in interactive decision making scenarios, the two ideas themselves are very close to existing work. Consequently, the novelty seems a bit limited, IMO.\n2. Broader baselines: I liked the authors ablations and comparison with React and its variants given the closeness of the approach (prospector) to react.  These were helpful in understanding how prospector's individual components improve performance. However, it would have been also useful to see how prospector's performance compares to other llm planning approaches e.g., the ones that combine llms + tree search/classical planning approaches such as https://arxiv.org/pdf/2307.08962.pdf to see how far does prospector push the performance. Lastly, given that prospector does some training for critics using example trajectories, I am wondering how the performance of prospector would compare to finetuned LLM planner/policy e.g., with LIMA (https://arxiv.org/abs/2305.11206) which can be used to finetune LLM with limited data. Without these, right now, it is unclear whether prospector should be the goto planning approach for interactive decision making problems or is it really just a better version of react?"
                },
                "questions": {
                    "value": "- Unclear why the authors do not show prospector with askact + trajectory ranking results on Alfworld (Table 2,4). I\u2019d encourage  the authors to do this for the sake of completeness. Likewise, it would be good to see prospector with react + trajectory ranking on webshop (table 7).\n- Table 5,8: Why is few-shot reward prediction accuracy of LLM critic lower with more shots (3-shot vs. 2-shot)?\n- It seems that Prospector would be slower than React or reflexion because of additional reasoning that it does using more LLM calls. For real world interactive decision making tasks, it might be useful for the authors to also report compute time needed to decide the next action during the task execution. To that end, it would be great to also add a limitation section.\n- What is the advantage of the LLM critic over a \u201clearnt\u201d critic which can take a policy rollout and provide a corresponding reward? Given that prospector is evaluated only in sim environment, why not use sim to learn such a critic? \n- The authors dont seem to cite or mention self-refine: https://arxiv.org/pdf/2303.17651.pdf but that seemed very similar to self-asking in prospector too IMO. \n- Opensourcing plans? Despite the simplicity of the approach, I encourage the authors to opensource their code for reproducibility."
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "details_of_ethics_concerns": {
                    "value": "NA"
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "value": "Yes",
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission7717/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission7717/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission7717/Reviewer_TbNU"
                    ]
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission7717/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1699059691931,
            "cdate": 1699059691931,
            "tmdate": 1699636940393,
            "mdate": 1699636940393,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": [
            {
                "id": "MFp1kNNny6",
                "forum": "YKK1jXEWja",
                "replyto": "WkvztltWTx",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Authors"
                ],
                "content": {
                    "title": {
                        "value": "Response to Reviewer TbNU"
                    },
                    "comment": {
                        "value": "We thank the reviewer for his/her comments and suggestions.\n\n**[Responses to Questions]**\n\n**Q1.** Unclear why the authors do not show prospector with askact + trajectory ranking results on Alfworld (Table 2,4). \n\n**A1.** To answer this important question, we conducted **additional experiments on ALFWorld**. We conducted experiments with four different settings: (1) ReAct only, (2) AskAct only, (3) ReAct + Trajectory Ranking (TR), and (4) AskAct + TR. To expedite experiments and reduce costs, we used open-source LLMs (i.e., Llama-2-70B for the LLM Actor and FLAN-T5-3B for the LLM Critic) instead of closed-source LLMs. The additional experiment results are summarized in the bottom section of the following table.\n\nSome findings from the additional experiments can be summarized as follows:\n- **AskAct effectively improves the success rate of ReAct (from 41.0 to 56.7)**. Note that a LLM with lower temperature provides slightly better performance in case of single sampling.\n- **Since AskAct provides a better baseline, AskAct + TR can achieve much better performance with less sampling** (e.g., AskAct only (56.7) comparable with ReAct + TR (k=2) (56.0)).\n- We emphasize that **AskAct and TR can make an effective synergy in improving LLM agents in terms of both performance and efficiency**.\n\n| Method | LLM Actor | LLM Critic | k=1 | 2 | 3 | 4 | 5 |\n| --- | --- | --- | :---: | :---: | :---: | :---: | :---: |\n| ReAct | text-davinci-002 (temp=0.0) | - | 78.4 | - | - | - | - |\n| ReAct + Reflexion | text-davinci-002 | - | - | - | - | - | 86.0 |\n| **ReAct + TR (Prospector)** | text-davinci-002 (temp=0.8) | text-davinci-002 | 71.6 | - | 93.3 | - | **95.5** |\n| ReAct | Llama-2-70B (temp=0.0) | - | **41.0** | - | - | - | - |\n| AskAct (Prospector) | Llama-2-70B (temp=0.0) | - | **56.7** | - | - | - | - |\n| ReAct + TR (Prospector) | Llama-2-70B (temp=0.8) | FLAN-T5-3B (SFT) | 33.6 | 59.0 | 69.4 | 73.1 | **77. 6** |\n| **AskAct + TR (Prospector)** | Llama-2-70B (temp=0.8) | FLAN-T5-3B (SFT) | 53.7 | 76.1 | 80.6 | 84.3 | **86.6** |\n\n---\n\n**Q2.** Table 5,8: Why is few-shot reward prediction accuracy of LLM critic lower with more shots (3-shot vs. 2-shot)?\n\n**A2.** This is due to the **limited context length** of text-davinci-002 (i.e., 4096). In both ALFWorld and WebShop, 3-shot examples often exceed the context length, and the last example is truncated.\n\n---\n\n**Q3.** It seems that Prospector would be slower than React or reflexion because of additional reasoning that it does using more LLM calls.\n\n**A3.** Let $N$ be the number of tokens involved in a single trajectory and $m$ the number of generated trajectories. Assuming a transformer model is used as the backbone, the complexity of ReAct is $O(N^2)$. Reflexion generates a sequence of $m$ trajectories. Assuming all past trajectories are given to the model, Reflexion has a complexity of $O(m^2N^2)$. Note that this may vary depending on how the method is implemented. Our method involves sampling $m$ independent trajectories and ranking them. This process has a complexity of $O(mN^2)$. **Although ReAct is more efficient than our approach, our method performs much better.** **Our method is further more efficient and performs better than Reflexion based on the analysis above.**\n\n---\n\n**Q4.** For real world interactive decision making tasks, it might be useful for the authors to also report compute time needed to decide the next action during the task execution. To that end, it would be great to also add a limitation section.\n\n**A4.** Thank you for your thoughtful question. **We believe that AskAct prompting (Self-Asking) can alleviate the computation overhead of Trajectory Ranking.** Since AskAct prompting provides considerably better baseline than ReAct prompting, AskAct + TR can achieve reasonable performance with less sampling. We can see this effect in the experiment results in the above table.\n\n---\n\n**Q5.** What is the advantage of the LLM critic over a \u201clearnt\u201d critic which can take a policy rollout and provide a corresponding reward? Given that prospector is evaluated only in sim environment, why not use sim to learn such a critic?\n\n**A5.** We would like to point out that this is one of the critics we consider in our paper. As we discuss in the last paragraph of section 3.2, **the in-context learning based critic fails to perform well in complex environments and a fine-tuned critic model performs better in this scenario.**\n\n---\n\n**Q6.** The authors don't seem to cite or mention self-refine.\n\n**A6.** Thank you for pointing out this related work, we will include a discussion about the Self-Refine paper in our revision.\n\n---\n\n**Q7.** Opensourcing plans?\n\n**A7.** We plan to opensource our implementation upon paper acceptance."
                    }
                },
                "number": 8,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700681637926,
                "cdate": 1700681637926,
                "tmdate": 1700681668630,
                "mdate": 1700681668630,
                "license": "CC BY 4.0",
                "version": 2
            },
            {
                "id": "uTIiE4qAth",
                "forum": "YKK1jXEWja",
                "replyto": "WkvztltWTx",
                "signatures": [
                    "ICLR.cc/2024/Conference/Submission7717/Reviewer_TbNU"
                ],
                "readers": [
                    "everyone"
                ],
                "writers": [
                    "ICLR.cc/2024/Conference",
                    "ICLR.cc/2024/Conference/Submission7717/Reviewer_TbNU"
                ],
                "content": {
                    "title": {
                        "value": "Post rebuttal"
                    },
                    "comment": {
                        "value": "Thanks for the additional ablations and comparisons. \n\nWhile I understand that prospector is more efficient than reflexion, I am still not clear about the computation time/number of LLM calls needed (on average) before an action is obtained as output from Prospector. This will be important for real-world deployment. \n\nI'd also like the authors to comment on the novelty of their contributions since I see that other reviewers have also raised similar concerns. \n\nGiven the above, I'll hold my score for now. I think the paper is interesting but I cant champion the paper."
                    }
                },
                "number": 9,
                "invitations": [
                    "ICLR.cc/2024/Conference/Submission7717/-/Official_Comment"
                ],
                "domain": "ICLR.cc/2024/Conference",
                "tcdate": 1700690254437,
                "cdate": 1700690254437,
                "tmdate": 1700690314567,
                "mdate": 1700690314567,
                "license": "CC BY 4.0",
                "version": 2
            }
        ]
    }
]