[
    {
        "title": "AdaLomo: Low-memory Optimization with Adaptive Learning Rate"
    },
    {
        "review": {
            "id": "bEBuPWEoCb",
            "forum": "p4B7rl1UFA",
            "replyto": "p4B7rl1UFA",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_VMbV"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_VMbV"
            ],
            "content": {
                "summary": {
                    "value": "This manuscript aims to provide a low-memory optimizer for LLMs."
                },
                "soundness": {
                    "value": "1 poor"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "1 poor"
                },
                "strengths": {
                    "value": "* This manuscript studies a crucial problem in the field.\n* This manuscript considers fine-tuning LLaMA with various model sizes"
                },
                "weaknesses": {
                    "value": "* The novelty of the AdaLomo is limited. It is very close to the design of Adafactor, while no performance comparison can be found in Table 2, Figure 2, and Figure 3.\n* The convergence of AdaLomo has no theoretical guarantee. \n* Some statements are weak, as no corresponding supports can be found. For example, in the sentence ``Through our ablation study on Adam, we found that its second-order moment estimation has a significantly greater impact on its convergence than the first-order moment estimation'', the ablation study refers to which table/figure?\n* Some design choices have no justification. For example, why it is a good idea to consider $u_{t, i} / \\max(1, RMS(u_{t, i})) \\times \\max(\\epsilon, RMS(\\theta_{t-1, i}))$ (though it is borrowed from AdaFactor)? Compared to other gradient clipping ideas, and gradient normalization techniques, why current design choice is a better idea? Some theoretical justifications or empirical evidence should be provided.\n* LoRA is a parameter-efficient fine-tuning method, while AdamW and AdaLoMO are optimizers. It looks unfair to directly compare LoRA with AdamW and AdaLoMO as they are orthogonal. \n* Some other baseline optimizers need to be considered. e.g., Lion [1] and Adan [2]; or even some other memory-efficient techniques should be evaluated with any other adaptive optimizers.\n\n## Reference\n[1] Symbolic Discovery of Optimization Algorithms\n\n[2] Adan: Adaptive Nesterov Momentum Algorithm for Faster Optimizing Deep Models"
                },
                "questions": {
                    "value": "* What is the exact definition of ``SGD with variance''?\n* What is the choice of optimizer used for LoRA?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "4: You are confident in your assessment, but not absolutely certain. It is unlikely, but not impossible, that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 1,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission9450/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698066924855,
            "cdate": 1698066924855,
            "tmdate": 1699637189733,
            "mdate": 1699637189733,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    },
    {
        "review": {
            "id": "ge0UaCmClb",
            "forum": "p4B7rl1UFA",
            "replyto": "p4B7rl1UFA",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_t9K6"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_t9K6"
            ],
            "content": {
                "summary": {
                    "value": "This paper presents the low-memory optimizer with adaptive learning rate (AdaLomo) for training large language models. The optimizer combines LOMO with the first/second-order moment estimations used in adaptive methods such as Adam. Computing the second-order moment estimation uses Non-negative matrix factorization. This paper shows numerically that AdaLomo is comparable with AdamW and reduces memory requirements."
                },
                "soundness": {
                    "value": "2 fair"
                },
                "presentation": {
                    "value": "2 fair"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "The strength of this paper is to show numerically that the proposed method, AdaLomo, is comparable with AdamW and reduces memory requirements."
                },
                "weaknesses": {
                    "value": "This paper numerically studies the performance of AdaLomo that can be obtained by combining the existing methods such as LOMO and Adam. It seems that AdaLomo has the best of both LOMO and Adam. This paper lacks theoretical explanations why AdaLomo performs better than the existing optimizers, such as LoRA, AdamW, and LOMO."
                },
                "questions": {
                    "value": "In general, I am not very familiar with this topic. Although this paper studies mainly practical numerical comparisons, I think that it needs theoretical explanations and evidences to emphasize the usefulness of AdaLomo. In particular,\n\n- There have been convergence analyses of Adam. Is it guaranteed theoretically that AdaLomo converges to a (local) minimizer and does not fall into the worst local minimizer (since Figure 1(b) shows that Adam decreases the value of the loss function more than SGD and SGD with momentum)? \n\nMoreover, I have the following concern. \n- The optimizers use that a batch size $b$ is 128. I do not know why the setting is appropriate. In intuition, the optimizers with a smaller batch size than 128 decrease the value of the loss function. Please compare the performance of using $b=128$ with the one of using smaller/larger batch sizes than $b = 128$. I would also like to check the performances of the optimizers using a cosine annealing step-size and a step-decay step-size. Could you compare the optimizers using constant step-sizes (Table 3) with the ones using cosine annealing step-sizes/step-decay step-sizes?  \n\nTypos and minor comments:\n- Page 1, Line -9: identifie $\\to$ identify \n- Page 4, Line -14: What is \"Adafactor\"?\n- Algorithm 1, Step 9: $s_{t,i}$ is not defined? \n- Page 5, footnote 1: $\\sum_{i=1}^{i=n} \\to \\sum_{i=1}^n$"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "3: reject, not good enough"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 2,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission9450/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698418179509,
            "cdate": 1698418179509,
            "tmdate": 1699637189625,
            "mdate": 1699637189625,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    },
    {
        "review": {
            "id": "oAMuRwDjLd",
            "forum": "p4B7rl1UFA",
            "replyto": "p4B7rl1UFA",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_6pvp"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_6pvp"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposes the AdaLOMO optimizer for training large language models. Specifically, the work 1) takes Adam and removes the second moment buffer, 2) factors the second momentum buffer of each parameter group into a Rank 1 matrix (outer-product of two vectors) and re-scales the second moment update to have a similar magnitude to the inverse RMS of the previous iterations parameters in the case where the updates grow very large. Numerical experiments are provided with LLaMA instruction tuning, and further LLaMA pretraining."
                },
                "soundness": {
                    "value": "1 poor"
                },
                "presentation": {
                    "value": "1 poor"
                },
                "contribution": {
                    "value": "1 poor"
                },
                "strengths": {
                    "value": "### Significance\n* This paper studies an important problem, namely how to improve the memory efficiency of optimizing large language models."
                },
                "weaknesses": {
                    "value": "### Originality\n* The proposed method is EXACTLY Algorithm 5 in Shazeer et al., 2018. The only difference is that the gradient of a layer is deallocated once it is used to compute the gradient of the next layer so as to save memory.\n  * Adafactor does already propose using Adam with a factored second moment. Similarly, they remove the first moment buffer. The RMS normalization is also taken directly from Adafactor, where it is motivated as a strategy for preventing very large updates when using slow decay of the second order buffer in the absence of a first order buffer.\n\n### Quality\nNumerous mathematical issues in terms of clarity + a few minor mathematical errors which are probably typos.\n* RMS on page 5 is incorrect, terms inside summation should be squared. However, $u$ is a matrix, so unclear what this computation involves. \n* In equation 9 it should be $v_{t,i} = r_{t,i} c_{t, i}$\n* In equation 10, unclear what $g_{t,i} / v_{t,i}$ involves, since $g_{t,i}$ and $v_{t,i}$ are matrices of size $m \\times n$\n* Used $\\theta_{t,i}$ to refer to a \u201cparameter\u201d but this is described as matrix of size $m \\times n$, should it is not just a single parameter."
                },
                "questions": {
                    "value": "What are the novel contributions of AdaLOMO compared to Adafactor?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "1: strong reject"
                },
                "confidence": {
                    "value": "5: You are absolutely certain about your assessment. You are very familiar with the related work and checked the math/other details carefully."
                },
                "code_of_conduct": {
                    "value": "Yes"
                }
            },
            "number": 3,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission9450/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698853257331,
            "cdate": 1698853257331,
            "tmdate": 1699637189521,
            "mdate": 1699637189521,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    },
    {
        "review": {
            "id": "qBzJW8tCFP",
            "forum": "p4B7rl1UFA",
            "replyto": "p4B7rl1UFA",
            "signatures": [
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_vpaW"
            ],
            "nonreaders": [],
            "readers": [
                "everyone"
            ],
            "writers": [
                "ICLR.cc/2024/Conference",
                "ICLR.cc/2024/Conference/Submission9450/Reviewer_vpaW"
            ],
            "content": {
                "summary": {
                    "value": "This paper proposes AdaLomo, a low-memory optimization method for large language models that provides an adaptive learning rate for each parameter while maintaining memory efficiency. The key ideas are using non-negative matrix factorization to estimate the second-order moment for the adaptive learning rate, and employing grouped update normalization to stabilize training. Experiments on instruction tuning and further pretraining of LLaMA models show AdaLomo achieves comparable results to AdamW while significantly reducing memory requirements."
                },
                "soundness": {
                    "value": "3 good"
                },
                "presentation": {
                    "value": "3 good"
                },
                "contribution": {
                    "value": "2 fair"
                },
                "strengths": {
                    "value": "* Tackles the important challenge of reducing memory footprint for large LM training. The motivation is well articulated.\n* Empirically analyzes differences between SGD, Adam and LOMO highlighting the role of second-order moments. Provides insight.\n* AdaLomo integrates sensible ideas - NMF for second-order moment estimation and grouped update normalization - to offer adaptive learning rates with low memory.\n* Experiments cover instruction tuning and further pretraining with solid results on par with AdamW and LoRA. Reduced memory requirements demonstrated."
                },
                "weaknesses": {
                    "value": "* The main ideas borrowed from prior work like Adafactor and grouped normalization limit novelty. Contributions appear incremental.\n* The two core components of AdaLomo are the use of non-negative matrix factorization (NMF) for estimating the second-order moment and the grouped update normalization. However, the paper does not contain ablation studies to directly demonstrate the benefits of each component.\n* Convergence plots during pretraining could be insightful to compare optimization behavior.\n* Lack of comparisons to related memory efficient methods like SM3, ZeRO, and 8-bit optimizer."
                },
                "questions": {
                    "value": "* Have you experimented with other ways to estimate second-order moments besides NMF? How did they compare in terms of memory and performance?\n* How sensitive is AdaLomo to the hyperparameters? Any guidelines for settings based on model architecture or task?"
                },
                "flag_for_ethics_review": {
                    "value": [
                        "No ethics review needed."
                    ]
                },
                "rating": {
                    "value": "6: marginally above the acceptance threshold"
                },
                "confidence": {
                    "value": "3: You are fairly confident in your assessment. It is possible that you did not understand some parts of the submission or that you are unfamiliar with some pieces of related work. Math/other details were not carefully checked."
                },
                "code_of_conduct": {
                    "value": "Yes"
                },
                "first_time_reviewer": {
                    "readers": [
                        "ICLR.cc/2024/Conference/Program_Chairs",
                        "ICLR.cc/2024/Conference/Submission9450/Senior_Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission9450/Area_Chairs",
                        "ICLR.cc/2024/Conference/Submission9450/Reviewer_vpaW"
                    ]
                }
            },
            "number": 4,
            "invitations": [
                "ICLR.cc/2024/Conference/Submission9450/-/Official_Review",
                "ICLR.cc/2024/Conference/-/Edit"
            ],
            "domain": "ICLR.cc/2024/Conference",
            "tcdate": 1698915219193,
            "cdate": 1698915219193,
            "tmdate": 1699641532922,
            "mdate": 1699641532922,
            "license": "CC BY 4.0",
            "version": 2
        },
        "responses": []
    }
]